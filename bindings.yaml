Subsystems:
  - Name: blend_mode
    Callbacks: []
    Enums:
      - SdlType: SDL_BlendFactor
        ZigType: Factor
        InternalType: c_uint
        Comment: "Factor to use for a blend operation."
        Values:
          - ZigValue: Zero
            SdlValue: $SDL.SDL_BLENDFACTOR_ZERO
            Comment: "(0, 0, 0, 0)"
          - ZigValue: One
            SdlValue: $SDL.SDL_BLENDFACTOR_ONE
            Comment: "(1, 1, 1, 1)"
          - ZigValue: SrcColor
            SdlValue: $SDL.SDL_BLENDFACTOR_SRC_COLOR
            Comment: "(r, g, b, a)"
          - ZigValue: OneMinusSrcColor
            SdlValue: $SDL.SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR
            Comment: "(1-r, 1-g, 1-b, 1-a)"
          - ZigValue: SrcAlpha
            SdlValue: $SDL.SDL_BLENDFACTOR_SRC_ALPHA
            Comment: "(a, a, a, a)"
          - ZigValue: OneMinusSrcAlpha
            SdlValue: $SDL.SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
            Comment: "(1-a, 1-a, 1-a, 1-a)"
          - ZigValue: DstColor
            SdlValue: $SDL.SDL_BLENDFACTOR_DST_COLOR
            Comment: "(r, g, b, a)"
          - ZigValue: OneMinusDstColor
            SdlValue: $SDL.SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR
            Comment: "(1-r, 1-g, 1-b, 1-a)"
          - ZigValue: DstAlpha
            SdlValue: $SDL.SDL_BLENDFACTOR_DST_ALPHA
            Comment: "(a, a, a, a)"
          - ZigValue: OneMinusDstAlpha
            SdlValue: $SDL.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA
            Comment: "(1-a, 1-a, 1-a, 1-a)"
        Functions: []
      - SdlType: SDL_BlendOperation
        ZigType: Operation
        InternalType: c_uint
        Comment: "Blend operation."
        Values:
          - ZigValue: Add
            SdlValue: $SDL.SDL_BLENDOPERATION_ADD
            Comment: "Dst + Src."
          - ZigValue: Sub
            SdlValue: $SDL.SDL_BLENDOPERATION_SUBTRACT
            Comment: "Src - Dst."
          - ZigValue: RevSub
            SdlValue: $SDL.SDL_BLENDOPERATION_REV_SUBTRACT
            Comment: "Dst - Src."
          - ZigValue: Min
            SdlValue: $SDL.SDL_BLENDOPERATION_MINIMUM
            Comment: "Min(Dst, Src)."
          - ZigValue: Max
            SdlValue: $SDL.SDL_BLENDOPERATION_MAXIMUM
            Comment: "Max(Dst, Src)."
        Functions: []
    Errors: []
    Values:
      - SdlName: SDL_BlendMode
        ZigName: Mode
        Type: $SDL.SDL_BlendMode
        IsOpaque: false
        Comment: "Mode for blending colors."
        Presets:
          - ZigValue: none
            SdlValue: $SDL.SDL_BLENDMODE_NONE
            Comment: "Dst = Src."
          - ZigValue: blend
            SdlValue: $SDL.SDL_BLENDMODE_BLEND
            Comment: "DstRGB = (SrcRGB * SrcA) + (DstRGB * (1-SrcA)), DstA = SrcA + (DstA * (1-SrcA))."
          - ZigValue: blend_premultiplied
            SdlValue: $SDL.SDL_BLENDMODE_BLEND_PREMULTIPLIED
            Comment: "DstRGBA = SrcRGBA + (DstRGBA * (1-SrcA))."
          - ZigValue: add
            SdlValue: $SDL.SDL_BLENDMODE_ADD
            Comment: "DstRGB = (SrcRGB * SrcA) + DstRGB, DstA = DstA."
          - ZigValue: add_premultiplied
            SdlValue: $SDL.SDL_BLENDMODE_ADD_PREMULTIPLIED
            Comment: "DstRGB = SrcRGB + DstRGB, DstA = DstA."
          - ZigValue: mod
            SdlValue: $SDL.SDL_BLENDMODE_MOD
            Comment: "DstRGB = SrcRGB * DstRGB, DstA = DstA."
          - ZigValue: mul
            SdlValue: $SDL.SDL_BLENDMODE_MUL
            Comment: "DstRGB = (SrcRGB * DstRGB) + (DstRGB * (1-SrcA)), DstA = DstA."
        Functions:
          - SdlName: SDL_ComposeCustomBlendMode
            ZigName: custom
            Comment: "Create a custom blend mode. The source is the pixels we are writing to the destination render target."
            Return:
              Sdl: SDL_BlendMode
              Zig: "?Mode"
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_BLENDMODE_INVALID
            Arguments:
              - Name: srcRgb
                Type: SDL_BlendFactor
                Value: null
                Mode: null
              - Name: dstRgb
                Type: SDL_BlendFactor
                Value: null
                Mode: null
              - Name: rgbOp
                Type: SDL_BlendOperation
                Value: null
                Mode: null
              - Name: srcAlpha
                Type: SDL_BlendFactor
                Value: null
                Mode: null
              - Name: dstAlpha
                Type: SDL_BlendFactor
                Value: null
                Mode: null
              - Name: alphaOp
                Type: SDL_BlendOperation
                Value: null
                Mode: null
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: clipboard
    Callbacks: []
#    Callbacks:
#      - SdlName: SDL_ClipboardDataCallback
#        ZigName: DataCallback
#        Comment: "Called when data for a given MIME type is request by the OS."
#        Return:
#          Sdl: "*void"
#          Zig: "[]const u8"
#          Convert: ret.ptr
#          Checks:
#            - Method: Custom
#              ComparisonVal: size.* = ret.len;
#        Arguments:
#          - Name: UserData
#            Type: type
#            Value: null
#            Mode: null
#          - Name: user_data
#            Type: *UserData
#            Value: null
#            Mode: null
#          - Name: mime_type
#            Type: ?zigstring
#            Value: null
#            Mode: null
#          - Name: size
#            Type: *usize
#            Value: *size
#            Mode: null
#      - SdlName: SDL_ClipboardCleanupCallback
#        ZigName: CleanupCallback
#        Comment: "Callback function that will be called when the clipboard is cleared, or new data is set."
#        Return:
#          Sdl: void
#          Zig: void
#          Convert: null
#          Checks: []
#        Arguments:
#          - Name: UserData
#            Type: type
#            Value: null
#            Mode: null
#          - Name: user_data
#            Type: *UserData
#            Value: null
#            Mode: null
    Enums: []
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_SetClipboardText
        ZigName: setText
        Comment: "Put UTF-8 text into the clipboard."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: text
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetClipboardText
        ZigName: getText
        Comment: "Get UTF-8 text from the clipboard. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Method: ReturnErrIfEqStr
              ComparisonVal: |
                ""
        Arguments: []
      - SdlName: SDL_HasClipboardText
        ZigName: hasText
        Comment: "Query whether the clipboard exists and contains a non-empty text string."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_SetPrimarySelectionText
        ZigName: setPrimarySelectionText
        Comment: "Put UTF-8 text into the primary selection."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: text
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetPrimarySelectionText
        ZigName: getPrimarySelectionText
        Comment: "Get UTF-8 text from the primary selection. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Method: ReturnErrIfEqStr
              ComparisonVal: |
                ""
        Arguments: []
      - SdlName: SDL_HasPrimarySelectionText
        ZigName: hasPrimarySelectionText
        Comment: "Query whether the primary selection exists and contains a non-empty text string."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
#      - SdlName: SDL_SetClipboardData
#        ZigName: setData
#        Comment: "Tell the system that data is available for the given MIME types. When requested, the set and clear callbacks will be called."
#        Return:
#          Sdl: bool
#          Zig: "!void"
#          Convert: null
#          Checks:
#            - Method: ReturnErrIfEq
#              ComparisonVal: false
#          Arguments:
#              - Name: UserData
#                Type: type
#                Value: null
#                Mode: null
#              - Name: callback
#                Type: SDL_ClipboardDataCallback
#                Value: null
#                Mode: null
#              - Name: cleanup
#                Type: SDL_ClipboardCleanupCallback
#                Value: null
#                Mode: null
#              - Name: user_data
#                Type: *UserData
#                Value: null
#                Mode: null
#              - Name: mime_types
#                Type: "[]string"
#                Value: null
#                Mode: null
#              - Name: num_mime_types
#                Type: usize
#                Value: mime_types.len
#                Mode: null
      - SdlName: SDL_ClearClipboardData
        ZigName: clearData
        Comment: "Clear the clipboard data."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments: []
      - SdlName: SDL_GetClipboardData
        ZigName: getData
        Comment: "Get the data from clipboard for a given mime type. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: "?*anyopaque"
          Zig: "![]const u8"
          Convert: .{ .ptr = @ptrCast(ret.?), .len = @intCast(size) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: mime_type
            Type: string
            Value: null
            Mode: null
          - Name: size
            Type: usize
            Value: &size
            Mode: out
      - SdlName: SDL_HasClipboardData
        ZigName: hasData
        Comment: "Query whether there is data in the clipboard for the provided mime type."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: mime_type
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetClipboardMimeTypes
        ZigName: getMimeTypes
        Comment: "Retrieve the list of mime types available in the clipboard. Result needs to be freed with `sdl3.free`."
        Return:
          Sdl: "[]string"
          Zig: "[]const [:0]const u8"
          Convert: .{ .ptr = std.span(ret), .len = @intCast(num_mime_types) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: num_mime_types
            Type: usize
            Value: &num_mime_types
            Mode: out
    CustomFunctions:
      - Code: |
          /// Create user data for the set clipboard data callback function.
          pub fn SetDataUserData(comptime UserData: type) type {
              return struct {
                  user_data: *UserData,
                  callback: *const fn (
                      user_data: *UserData,
                      mime_type: ?[]const u8,
                  ) []const u8,
                  cleanup: *const fn (
                      user_data: *UserData,
                  ) anyerror!void,
              };
          }
      - Code: |
          /// Callback for setting data wrapper.
          fn dataCallback(
              user_data: ?*anyopaque,
              mime_type: [*c]const u8,
              size: *usize,
          ) callconv(.C) []const u8 {
              const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
              const ret = cb_data.callback(cb_data.user_data, if (mime_type == null) null else std.mem.span(mime_type));
              size.* = ret.len;
              return ret.ptr;
          }
      - Code: |
          /// Callback for cleaning data wrapper.
          fn cleanupCallback(
              user_data: ?*anyopaque,
          ) callconv(.C) bool {
              const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
              cb_data.cleanup(cb_data.user_data) catch return false;
              return true;
          }
      - Code: |
          /// Set data for the given mime types.
          pub fn setData(
              comptime UserData: type,
              user_data: *SetDataUserData(UserData),
              mime_types: []const [:0]const u8,
          ) !void {
              const ret = C.SDL_SetClipboardData(
                  dataCallback,
                  cleanupCallback,
                  user_data,
                  @ptrCast(mime_types.ptr),
                  mime_types.len,
              );
              if (!ret)
                  return error.SdlError;
          }
    Typedefs: []
    Tests: []
  - Name: errors
    Callbacks: []
    Enums: []
    Errors:
      - Name: Error
        Comment: "An SDL error."
        Values:
          - SdlError
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_SetError
        ZigName: set
        Comment: "Set the current SDL error."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: fmt
            Type: null
            Value: |
              "%s"
            Mode: null
          - Name: err
            Type: stringptr
            Value: null
            Mode: null
      - SdlName: SDL_OutOfMemory
        ZigName: signalOutOfMemory
        Comment: "Set an error indicating that memory allocation failed."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetError
        ZigName: get
        Comment: "Get the last error message if it exists. Note that lack of an error does not indicate succees, and an error being present does not indicate failure."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Method: ReturnNullIfEqStr
              ComparisonVal: |
                ""
        Arguments: []
      - SdlName: SDL_ClearError
        ZigName: clear
        Comment: "Clear the last error message."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
    CustomFunctions: []
    Typedefs: []
    Tests:
      - Name: Error
        Comment: "Make sure error getting and setting works properly."
        Code: |
          clear();
          try std.testing.expect(get() == null);
          signalOutOfMemory();
          try std.testing.expect(std.mem.eql(u8, get().?, "Out of memory"));
          set("Hello world");
          try std.testing.expect(std.mem.eql(u8, get().?, "Hello world"));
          clear();
          try std.testing.expect(get() == null);;
  - Name: guid
    Callbacks: []
    Enums: []
    Errors: []
    Values:
      - SdlName: SDL_GUID
        ZigName: GUID
        Type: $SDL.SDL_GUID
        IsOpaque: false
        Comment: "A 128-bit identifier for an input device that identifies that device across runs of SDL programs on the same platform."
        Presets: []
        Functions:
          - SdlName: SDL_GUIDToString
            ZigName: toString
            Comment: "Get an ASCII string representation for a given SDL_GUID. Returned memory must be freed."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_GUID
                Value: null
                Mode: null
              - Name: str
                Type: "[32:0]u8"
                Value: str.ptr
                Mode: verbatim
              - Name: buf_len
                Type: null
                Value: "@intCast(str.len)"
                Mode: null
          - SdlName: SDL_StringToGUID
            ZigName: fromString
            Comment: "Convert a GUID string into a SDL_GUID structure. TODO, Determine if this copies properly!"
            Return:
              Sdl: SDL_GUID
              Zig: GUID
              Convert: null
              Checks: []
            Arguments:
              - Name: buf
                Type: string
                Value: null
                Mode: null
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: hints
    Callbacks:
      - SdlName: SDL_HintCallback
        ZigName: Callback
        Comment: "A callback used to send notifications of hint value changes."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: user_data
            Type: *UserData
            Value: null
            Mode: null
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
          - Name: old_value
            Type: string
            Value: null
            Mode: null
          - Name: new_value
            Type: string
            Value: null
            Mode: null
    Enums:
      - SdlType: SDL_HintPriority
        Name: Priority
        InternalType: c_uint
        Comment: "An enumeration of hint priorities."
        Values:
          - ZigValue: Default
            SdlValue: $SDL.SDL_HINT_DEFAULT
            Comment: null
          - ZigValue: Normal
            SdlValue: $SDL.SDL_HINT_NORMAL
            Comment: null
          - ZigValue: Override
            SdlValue: $SDL.SDL_HINT_OVERRIDE
            Comment: null
        Functions: []
    Errors: []
    Values: []
    Flags: []
    StringMap:
      - SdlName: SDL_Hint
        ZigName: Type
        Comment: "Configuration hints for the library. May or may not be useful depending on the platform."
        Values:
          - ZigValue: AllowAltTabWhileGrabbed
            SdlValue: SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED
            Comment: "0 - Sdl does not handle Alt+Tab, 1 - Sdl will minimize window on Alt+Tab (default)."
# TODO: REST OF HINTS!!!
    Structs: []
    Functions:
      - SdlName: SDL_SetHintWithPriority
        ZigName: setWithPriority
        Comment: "Set a hint with a specific priority. Will only set if the hint was previously set with a lower priority."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
          - Name: value
            Type: string
            Value: null
            Mode: null
          - Name: priority
            Type: SDL_HintPriority
            Value: null
            Mode: null
      - SdlName: SDL_SetHint
        ZigName: set
        Comment: "Set a hint with normal priority."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
          - Name: value
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_ResetHint
        ZigName: reset
        Comment: "Reset a hint to its default value."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
      - SdlName: SDL_ResetHints
        ZigName: resetAll
        Comment: "Reset all hints."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetHint
        ZigName: get
        Comment: "Get a hint's value, or null if the hint is not set."
        Return:
          Sdl: string
          Zig: ?[]const u8
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
      - SdlName: SDL_GetHintBoolean
        ZigName: getBoolean
        Comment: "Get a hint's boolean value."
        Return:
          Sdl: bool
          Zig: ?bool
          Convert: null
          Checks:
            - Method: Custom
              ComparisonVal: if (get(hint) == null) return null;
        Arguments:
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
      - SdlName: SDL_AddHintCallback
        ZigName: addCallback
        Comment: "Add a function to watch a particular hint."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
          - Name: callback_data
            Type: SDL_HintCallback
            Value: null
            Mode: callback
      - SdlName: SDL_RemoveHintCallback
        ZigName: removeCallback
        Comment: "Remove a function to watch a particular hint."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: hint
            Type: SDL_Hint
            Value: null
            Mode: null
          - Name: callback_data
            Type: SDL_HintCallback
            Value: null
            Mode: callback
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: init
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags:
      - Name: Flags
        Type: SDL_InitFlags
        Comment: "Used for initializing a subsystem."
        Values:
          - Name: audio
            Type: SDL_INIT_AUDIO
            Value: false
            Comment: null
          - Name: video
            Type: SDL_INIT_VIDEO
            Value: false
            Comment: null
          - Name: joystick
            Type: SDL_INIT_JOYSTICK
            Value: false
            Comment: null
          - Name: haptic
            Type: SDL_INIT_HAPTIC
            Value: false
            Comment: null
          - Name: gamepad
            Type: SDL_INIT_GAMEPAD
            Value: false
            Comment: null
          - Name: events
            Type: SDL_INIT_EVENTS
            Value: false
            Comment: null
          - Name: sensor
            Type: SDL_INIT_SENSOR
            Value: false
            Comment: null
          - Name: camera
            Type: SDL_INIT_CAMERA
            Value: false
            Comment: null
        Presets:
          - Name: everything
            Comment: "Initializes all subsystems."
            Values:
              - Name: audio
                Value: true
              - Name: video
                Value: true
              - Name: joystick
                Value: true
              - Name: haptic
                Value: true
              - Name: gamepad
                Value: true
              - Name: events
                Value: true
              - Name: sensor
                Value: true
              - Name: camera
                Value: true
    StringMap:
      - SdlName: SDL_AppMetadataProperty
        ZigName: AppMetadataProperty
        Comment: "An app's metadata property to get or set."
        Values:
          - ZigValue: Name
            SdlValue: SDL_PROP_APP_METADATA_NAME_STRING
            Comment: null
          - ZigValue: Version
            SdlValue: SDL_PROP_APP_METADATA_VERSION_STRING
            Comment: null
          - ZigValue: Identifier
            SdlValue: SDL_PROP_APP_METADATA_IDENTIFIER_STRING
            Comment: null
          - ZigValue: Creator
            SdlValue: SDL_PROP_APP_METADATA_CREATOR_STRING
            Comment: null
          - ZigValue: Copyright
            SdlValue: SDL_PROP_APP_METADATA_COPYRIGHT_STRING
            Comment: null
          - ZigValue: Url
            SdlValue: SDL_PROP_APP_METADATA_URL_STRING
            Comment: null
          - ZigValue: Type
            SdlValue: SDL_PROP_APP_METADATA_TYPE_STRING
            Comment: null
    Structs: []
    Functions:
      - SdlName: SDL_Init
        ZigName: init
        Comment: "Initialize the SDL systems. Each system is ref-counted so init and quit each one, then call shutdown."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
            Mode: null
      - SdlName: SDL_QuitSubSystem
        ZigName: quit
        Comment: "Quit SDL systems. Note that shutdown is still needed after all systems have been quit."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
            Mode: null
      - SdlName: SDL_Quit
        ZigName: shutdown
        Comment: "Shutdown SDL. This is needed. Each system is ref-counted so init and quit each one, then call this."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_WasInit
        ZigName: wasInit
        Comment: "Get which given systems have been initialized."
        Return:
          Sdl: SDL_InitFlags
          Zig: Flags
          Convert: null
          Checks: []
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
            Mode: null
      - SdlName: SDL_SetAppMetadata
        ZigName: setAppMetadata
        Comment: "Get which given systems have been initialized."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: app_name
            Type: "?string"
            Value: null
            Mode: null
          - Name: app_version
            Type: "?string"
            Value: null
            Mode: null
          - Name: app_identifier
            Type: "?string"
            Value: null
            Mode: null
      - SdlName: SDL_SetAppMetadataProperty
        ZigName: setAppMetadataProperty
        Comment: "Set a metadata property for the app. Note that the value can be null to clear it."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: property
            Type: SDL_AppMetadataProperty
            Value: null
            Mode: null
          - Name: value
            Type: "?string"
            Value: null
            Mode: null
      - SdlName: SDL_GetAppMetadataProperty
        ZigName: getAppMetadataProperty
        Comment: "Get a metadata property for the app."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: property
            Type: SDL_AppMetadataProperty
            Value: null
            Mode: null
    CustomFunctions: []
    Typedefs: []
    Tests:
      - Name: Init
        Comment: Ensure initialization and shutdown works as expected. Also app properties for some reason.
        Code: |
            defer shutdown();
            const flags = Flags{
                .video = true,
                .events = true,
                .camera = true,
            };
            try setAppMetadata("SDL3 Test", null, "!Testing");
            try init(flags);
            defer quit(flags);
            try std.testing.expect(std.meta.eql(flags, wasInit(flags)));
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Name).?, "SDL3 Test"));
            try std.testing.expect(getAppMetadataProperty(.Version) == null);
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Identifier).?, "!Testing"));
            try setAppMetadataProperty(.Creator, "Gota7");
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Creator).?, "Gota7"));
            try setAppMetadataProperty(.Creator, null);
            try std.testing.expect(getAppMetadataProperty(.Creator) == null);
            try std.testing.expect(getAppMetadataProperty(.Url) == null);;
  - Name: loadso
    Callbacks: []
    Enums: []
    Errors: []
    Values:
      - SdlName: SDL_SharedObject
        ZigName: SharedObject
        Type: $SDL.SDL_SharedObject
        IsOpaque: true
        Comment: A shared object binary.
        Presets: []
        Functions:
          - SdlName: SDL_LoadObject
            ZigName: load
            Comment: Load a shared object.
            Return:
              Sdl: SDL_SharedObject
              Zig: "!SharedObject"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: name
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_LoadFunction
            ZigName: loadFunction
            Comment: "Get a function pointer to an exported function in the object file. Result may be null."
            Return:
              Sdl: "*void"
              Zig: "?*anyopaque"
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_SharedObject
                Value: null
                Mode: null
              - Name: name
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_UnloadObject
            ZigName: unload
            Comment: Unload the shared object.
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_SharedObject
                Value: null
                Mode: null
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: locale
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs:
      - Name: Locale
        Type: SDL_Locale
        Comment: "Locale data."
        Members:
          - ZigName: language
            SdlName: language
            Type: string
            Value: null
            Comment: "Language in the ISO-639 spec."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: country
            SdlName: country
            Type: ??string
            Value: null
            Comment: "Country code in the ISO-3166 spec."
            FromSdlCustom: null
            ToSdlCustom: null
        Functions: []
        CustomFunctions:
          - Code: |
              /// Get preferred locals. Result must be freed.
                  pub fn getPreferred(allocator: std.mem.Allocator) ![]Locale {
                      var cnt: c_int = undefined;
                      const ret = C.SDL_GetPreferredLocales(&cnt);
                      var converted_ret = try allocator.alloc(Locale, @intCast(cnt));
                      for (0..cnt) |ind| {
                          const sdl = ret[ind].*;
                          var zig = &converted_ret[ind];
                          zig.language = try allocator.allocSentinel(u8, std.mem.len(sdl.language), 0);
                          @memcpy(zig.language, sdl.language);
                          if (sdl.country == null) {
                              zig.country = null;
                          } else {
                              zig.country = try allocator.allocSentinel(u8, std.mem.len(sdl.country), 0);
                              @memcpy(zig.country, sdl.country);
                          }
                      }
                      C.SDL_free(ret);
                      return converted_ret;
                  }
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: message_box
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags:
      - Name: ButtonFlags
        Type: SDL_MessageBoxButtonFlags
        Comment: "Message box button flags."
        Values:
          - Name: mark_default_with_return_key
            Type: SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
            Value: false
            Comment: null
          - Name: mark_default_with_escape_key
            Type: SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT
            Value: false
            Comment: null
        Presets: []
      - Name: BoxFlags
        Type: SDL_MessageBoxFlags
        Comment: "Message box flags."
        Values:
          - Name: error_dialog
            Type: SDL_MESSAGEBOX_ERROR
            Value: false
            Comment: null
          - Name: warning_dialog
            Type: SDL_MESSAGEBOX_WARNING
            Value: false
            Comment: null
          - Name: information_dialog
            Type: SDL_MESSAGEBOX_INFORMATION
            Value: false
            Comment: null
          - Name: buttons_left_to_right
            Type: SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT
            Value: false
            Comment: null
          - Name: buttons_right_to_left
            Type: SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT
            Value: false
            Comment: null
        Presets: []
    StringMap: []
    Structs:
      - Name: Button
        Type: SDL_MessageBoxButtonData
        Comment: "Message box button."
        Members:
          - ZigName: flags
            SdlName: flags
            Type: SDL_MessageBoxFlags
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: value
            SdlName: buttonID
            Type: int
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: text
            SdlName: text
            Type: string
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
        Functions: []
        CustomFunctions: []
      - Name: Color
        Type: SDL_MessageBoxColor
        Comment: Message box color. Simple RGB.
        Members:
          - ZigName: r
            SdlName: r
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: g
            SdlName: g
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: b
            SdlName: b
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
        Functions: []
        CustomFunctions:
          - Code: |
              /// Create a color from a hex code.
                  pub fn fromHex(hex_code: *const [6:0]u8) !Color {
                      return .{
                          .r = try std.fmt.parseInt(u8, hex_code[0..2], 16),
                          .g = try std.fmt.parseInt(u8, hex_code[2..4], 16),
                          .b = try std.fmt.parseInt(u8, hex_code[4..6], 16),
                      };
                  }
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: misc
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_OpenURL
        ZigName: openURL
        Comment: "Open a URL in the browser of the platform. Can also do local files with `file:///path/to/file` if supported."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: url
            Type: string
            Value: null
            Mode: null
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: pen
    Callbacks: []
    Enums:
      - SdlType: SDL_PenAxis
        ZigType: Axis
        InternalType: c_uint
        Comment: "Pen axis indices."
        Values:
          - ZigValue: Pressure
            SdlValue: $SDL.SDL_PEN_AXIS_PRESSURE
            Comment: "Pen pressure. Unidirectional 0 to 1.0"
          - ZigValue: XTilt
            SdlValue: $SDL.SDL_PEN_AXIS_XTILT
            Comment: "Pen horizontal tilt angle. Bidirectional -90.0 to 90.0 (left-to-right)."
          - ZigValue: YTilt
            SdlValue: $SDL.SDL_PEN_AXIS_YTILT
            Comment: "Pen vertical tilt angle. Bidirectional -90.0 to 90.0 (top-to-down)."
          - ZigValue: Distance
            SdlValue: $SDL.SDL_PEN_AXIS_DISTANCE
            Comment: "Pen distance to drawing surface. Unidirectional 0.0 to 1.0."
          - ZigValue: Rotation
            SdlValue: $SDL.SDL_PEN_AXIS_ROTATION
            Comment: "Pen barrel rotation. Bidirectional -180 to 179.9 (clockwise, 0 is facing up, -180.0 is facing down)."
          - ZigValue: Slider
            SdlValue: $SDL.SDL_PEN_AXIS_SLIDER
            Comment: "Pen finger wheel or slider (e.g., Airbrush Pen). Unidirectional 0 to 1.0."
          - ZigValue: TangentialPressure
            SdlValue: $SDL.SDL_PEN_AXIS_TANGENTIAL_PRESSURE
            Comment: "Pressure from squeezing the pen (barrel pressure)."
        Functions: []
    Errors: []
    Values:
      - SdlName: SDL_PenID
        ZigName: Pen
        Type: $SDL.SDL_PenID
        IsOpaque: false
        Comment: "A pen instance."
        Presets: []
        Functions: []
        CustomFunctions: []
    Flags:
      - Name: InputFlags
        Type: SDL_PenInputFlags
        Comment: "Pen input flags, as reported by various pen events."
        Values:
          - Name: Down
            Type: SDL_PEN_INPUT_DOWN
            Value: false
            Comment: "Pen is pressed down."
          - Name: Button1
            Type: SDL_PEN_INPUT_BUTTON_1
            Value: false
            Comment: "Pen button 1 is pressed down."
          - Name: Button2
            Type: SDL_PEN_INPUT_BUTTON_2
            Value: false
            Comment: "Pen button 2 is pressed down."
          - Name: Button3
            Type: SDL_PEN_INPUT_BUTTON_3
            Value: false
            Comment: "Pen button 3 is pressed down."
          - Name: Button4
            Type: SDL_PEN_INPUT_BUTTON_4
            Value: false
            Comment: "Pen button 4 is pressed down."
          - Name: Button5
            Type: SDL_PEN_INPUT_BUTTON_5
            Value: false
            Comment: "Pen button 5 is pressed down."
          - Name: EraserTip
            Type: SDL_PEN_INPUT_ERASER_TIP
            Value: false
            Comment: "Eraser tip is pressed down."
        Presets: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: pixels
    Callbacks: []
    Enums:
      - SdlType: SDL_PixelType
        ZigType: Type
        InternalType: c_uint
        Comment: "Pixel type."
        Values:
          - ZigValue: Index1
            SdlValue: $SDL.SDL_PIXELTYPE_INDEX1
            Comment: null
          - ZigValue: Index2
            SdlValue: $SDL.SDL_PIXELTYPE_INDEX2
            Comment: null
          - ZigValue: Index4
            SdlValue: $SDL.SDL_PIXELTYPE_INDEX4
            Comment: null
          - ZigValue: Index8
            SdlValue: $SDL.SDL_PIXELTYPE_INDEX8
            Comment: null
          - ZigValue: Packed8
            SdlValue: $SDL.SDL_PIXELTYPE_PACKED8
            Comment: null
          - ZigValue: Packed16
            SdlValue: $SDL.SDL_PIXELTYPE_PACKED16
            Comment: null
          - ZigValue: Packed32
            SdlValue: $SDL.SDL_PIXELTYPE_PACKED32
            Comment: null
          - ZigValue: ArrayU8
            SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU8
            Comment: null
          - ZigValue: ArrayU16
            SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU16
            Comment: null
          - ZigValue: ArrayU32
            SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU32
            Comment: null
          - ZigValue: ArrayF16
            SdlValue: $SDL.SDL_PIXELTYPE_ARRAYF16
            Comment: null
          - ZigValue: ArrayF32
            SdlValue: $SDL.SDL_PIXELTYPE_ARRAYF32
            Comment: null
        Functions: []
      - SdlType: SDL_BitmapOrder
        ZigType: IndexOrder
        InternalType: c_uint
        Comment: "Bitmap pixel order, high bit -> low bit."
        Values:
          - ZigValue: None
            SdlValue: $SDL.SDL_BITMAPORDER_NONE
            Comment: null
          - ZigValue: HighToLow
            SdlValue: $SDL.SDL_BITMAPORDER_4321
            Comment: null
          - ZigValue: LowToHigh
            SdlValue: $SDL.SDL_BITMAPORDER_1234
            Comment: null
        Functions: []
      - SdlType: SDL_PackedOrder
        ZigType: PackedOrder
        InternalType: c_uint
        Comment: "Packed component order, high bit -> low bit."
        Values:
          - ZigValue: None
            SdlValue: $SDL.SDL_PACKEDORDER_NONE
            Comment: null
          - ZigValue: Xrgb
            SdlValue: $SDL.SDL_PACKEDORDER_XRGB
            Comment: null
          - ZigValue: Rgbx
            SdlValue: $SDL.SDL_PACKEDORDER_RGBX
            Comment: null
          - ZigValue: Argb
            SdlValue: $SDL.SDL_PACKEDORDER_ARGB
            Comment: null
          - ZigValue: Rgba
            SdlValue: $SDL.SDL_PACKEDORDER_RGBA
            Comment: null
          - ZigValue: Xbgr
            SdlValue: $SDL.SDL_PACKEDORDER_XBGR
            Comment: null
          - ZigValue: Bgrx
            SdlValue: $SDL.SDL_PACKEDORDER_BGRX
            Comment: null
          - ZigValue: Abgr
            SdlValue: $SDL.SDL_PACKEDORDER_ABGR
            Comment: null
          - ZigValue: Bgra
            SdlValue: $SDL.SDL_PACKEDORDER_BGRA
            Comment: null
        Functions: []
      - SdlType: SDL_ArrayOrder
        ZigType: ArrayOrder
        InternalType: c_uint
        Comment: "Array component order, low byte -> high byte."
        Values:
          - ZigValue: None
            SdlValue: $SDL.SDL_ARRAYORDER_NONE
            Comment: null
          - ZigValue: Rgb
            SdlValue: $SDL.SDL_ARRAYORDER_RGB
            Comment: null
          - ZigValue: Rgba
            SdlValue: $SDL.SDL_ARRAYORDER_RGBA
            Comment: null
          - ZigValue: Argb
            SdlValue: $SDL.SDL_ARRAYORDER_ARGB
            Comment: null
          - ZigValue: Bgr
            SdlValue: $SDL.SDL_ARRAYORDER_BGR
            Comment: null
          - ZigValue: Bgra
            SdlValue: $SDL.SDL_ARRAYORDER_BGRA
            Comment: null
          - ZigValue: Abgr
            SdlValue: $SDL.SDL_ARRAYORDER_ABGR
            Comment: null
        Functions: []
      - SdlType: SDL_PackedLayout
        ZigType: Layout
        InternalType: c_uint
        Comment: "Packed component layout."
        Values:
          - ZigValue: None
            SdlValue: $SDL.SDL_PACKEDLAYOUT_NONE
            Comment: null
          - ZigValue: Bit_3_3_2
            SdlValue: $SDL.SDL_PACKEDLAYOUT_332
            Comment: null
          - ZigValue: Bit_4_4_4_4
            SdlValue: $SDL.SDL_PACKEDLAYOUT_4444
            Comment: null
          - ZigValue: Bit_1_5_5_5
            SdlValue: $SDL.SDL_PACKEDLAYOUT_1555
            Comment: null
          - ZigValue: Bit_5_5_5_1
            SdlValue: $SDL.SDL_PACKEDLAYOUT_5551
            Comment: null
          - ZigValue: Bit_5_6_5
            SdlValue: $SDL.SDL_PACKEDLAYOUT_565
            Comment: null
          - ZigValue: Bit_8_8_8_8
            SdlValue: $SDL.SDL_PACKEDLAYOUT_8888
            Comment: null
          - ZigValue: Bit_2_10_10_10
            SdlValue: $SDL.SDL_PACKEDLAYOUT_2101010
            Comment: null
          - ZigValue: Bit_10_10_10_2
            SdlValue: $SDL.SDL_PACKEDLAYOUT_1010102
            Comment: null
        Functions: []
      - SdlType: SDL_ColorType
        ZigType: ColorType
        InternalType: c_uint
        Comment: "Colorspace color type."
        Values:
          - ZigValue: Rgb
            SdlValue: $SDL.SDL_COLOR_TYPE_RGB
            Comment: null
          - ZigValue: Ycbcr
            SdlValue: $SDL.SDL_COLOR_TYPE_YCBCR
            Comment: null
        Functions: []
      - SdlType: SDL_ColorRange
        ZigType: ColorRange
        InternalType: c_uint
        Comment: "Colorspace color range, as described by https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en."
        Values:
          - ZigValue: Limited
            SdlValue: $SDL.SDL_COLOR_RANGE_LIMITED
            Comment: null
          - ZigValue: Full
            SdlValue: $SDL.SDL_COLOR_RANGE_FULL
            Comment: null
        Functions: []
      - SdlType: SDL_ColorPrimaries
        ZigType: ColorPrimaries
        InternalType: c_uint
        Comment: "Colorspace color primaries, as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en."
        Values:
          - ZigValue: BT709
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT709
            Comment: "ITU-R BT.709-6."
          - ZigValue: UNSPECIFIED
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_UNSPECIFIED
            Comment: null
          - ZigValue: BT470M
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT470M
            Comment: "ITU-R BT.470-6 System M."
          - ZigValue: BT470BG
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT470BG
            Comment: "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625."
          - ZigValue: BT601
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT601
            Comment: "ITU-R BT.601-7 525, SMPTE 170M."
          - ZigValue: SMPTE240
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE240
            Comment: "SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601."
          - ZigValue: GENERIC_FILM
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_GENERIC_FILM
            Comment: "Generic film (color filters using Illuminant C)."
          - ZigValue: BT2020
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT2020
            Comment: "ITU-R BT.2020-2 / ITU-R BT.2100-0"
          - ZigValue: XYZ
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_XYZ
            Comment: "SMPTE ST 428-1SMPTE ST 428-1."
          - ZigValue: SMPTE431
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE431
            Comment: "SMPTE RP 431-2."
          - ZigValue: SMPTE432
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE432
            Comment: "SMPTE EG 432-1 / DCI P3."
          - ZigValue: EBU3213
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_EBU3213
            Comment: "EBU Tech. 3213-E."
          - ZigValue: Custom
            SdlValue: $SDL.SDL_COLOR_PRIMARIES_CUSTOM
            Comment: "null"
        Functions: []
      - SdlType: SDL_TransferCharacteristics
        ZigType: TransferCharacteristics
        InternalType: c_uint
        Comment: "Colorspace transfer characteristics."
        Values:
          - ZigValue: BT709
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT709
            Comment: "Rec. ITU-R BT.709-6 / ITU-R BT1361."
          - ZigValue: Unspecified
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED
            Comment: null
          - ZigValue: Gamma22
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_GAMMA22
            Comment: "ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM."
          - ZigValue: Gamma28
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_GAMMA28
            Comment: "ITU-R BT.470-6 System B, G."
          - ZigValue: BT601
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT601
            Comment: "SMPTE ST 170M / ITU-R BT.601-7 525 or 625."
          - ZigValue: SMPTE240
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SMPTE240
            Comment: "SMPTE ST 240M."
          - ZigValue: Linear
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LINEAR
            Comment: null
          - ZigValue: Log100
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LOG100
            Comment: null
          - ZigValue: Sqrt10
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10
            Comment: null
          - ZigValue: IEC61966
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_IEC61966
            Comment: "IEC 61966-2-4."
          - ZigValue: BT1361
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT1361
            Comment: "ITU-R BT1361 Extended Colour Gamut."
          - ZigValue: Srgb
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SRGB
            Comment: "IEC 61966-2-1 (sRGB or sYCC)."
          - ZigValue: BT2020_10Bit
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT
            Comment: "ITU-R BT2020 for 10-bit system."
          - ZigValue: Bt2020_12Bit
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT
            Comment: "ITU-R BT2020 for 12-bit system."
          - ZigValue: PQ
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_PQ
            Comment: "SMPTE ST 2084 for 10-, 12-, 14- and 16-bit system."
          - ZigValue: SMPTE428
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SMPTE428
            Comment: "SMPTE ST 428-1."
          - ZigValue: HLG
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_HLG
            Comment: "ARIB STD-B67, known as hybrid log-gamma (HLG)."
          - ZigValue: Custom
            SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_CUSTOM
            Comment: null
        Functions: []
      - SdlType: SDL_MatrixCoefficients
        ZigType: MatrixCoefficients
        InternalType: c_uint
        Comment: "Colorspace matrix coefficients."
        Values:
          - ZigValue: Identity
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_IDENTITY
            Comment: null
          - ZigValue: BT709
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT709
            Comment: "ITU-R BT.709-6."
          - ZigValue: Unspecified
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_UNSPECIFIED
            Comment: null
          - ZigValue: FCC
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_FCC
            Comment: "US FCC Title 47."
          - ZigValue: BT470BG
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT470BG
            Comment: "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601."
          - ZigValue: BT601
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT601
            Comment: "ITU-R BT.601-7 525."
          - ZigValue: SMPTE240
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_SMPTE240
            Comment: "SMPTE 240M."
          - ZigValue: YCGCO
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_YCGCO
            Comment: null
          - ZigValue: BT2020_NCL
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT2020_NCL
            Comment: "ITU-R BT.2020-2 non-constant luminance."
          - ZigValue: BT2020_CL
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT2020_CL
            Comment: "ITU-R BT.2020-2 constant luminance."
          - ZigValue: SMPTE2085
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_SMPTE2085
            Comment: null
          - ZigValue: ChromaDerivedNCL
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL
            Comment: null
          - ZigValue: ChromaDerivedCL
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL
            Comment: null
          - ZigValue: ICTCP
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_ICTCP
            Comment: "ITU-R BT.2100-0 ICTCP."
          - ZigValue: Custom
            SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CUSTOM
            Comment: null
        Functions: []
      - SdlType: SDL_ChromaLocation
        ZigType: ChromaLocation
        InternalType: c_uint
        Comment: "Colorspace chroma sample location."
        Values:
          - ZigValue: Left
            SdlValue: $SDL.SDL_CHROMA_LOCATION_LEFT
            Comment: "In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically."
          - ZigValue: Center
            SdlValue: $SDL.SDL_CHROMA_LOCATION_CENTER
            Comment: "In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel."
          - ZigValue: TopLeft
            SdlValue: $SDL.SDL_CHROMA_LOCATION_TOPLEFT
            Comment: "In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (co-sited, co-located)."
        Functions: []
    Errors: []
    Values:
      - SdlName: SDL_PixelFormat
        ZigName: Format
        Type: c_uint
        IsOpaque: false
        Comment: "Pixel format."
        Presets:
          - ZigValue: Index_1_lsb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX1LSB
            Comment: null
          - ZigValue: index_1_msb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX1MSB
            Comment: null
          - ZigValue: index_2_lsb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX2LSB
            Comment: null
          - ZigValue: index_2_msb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX2MSB
            Comment: null
          - ZigValue: index_4_lsb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX4LSB
            Comment: null
          - ZigValue: index_4_msb
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX4MSB
            Comment: null
          - ZigValue: index_8
            SdlValue: $SDL.SDL_PIXELFORMAT_INDEX8
            Comment: null
          - ZigValue: packed_rgb_3_3_2
            SdlValue: $SDL.SDL_PIXELFORMAT_RGB332
            Comment: null
          - ZigValue: packed_xrgb_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_XRGB4444
            Comment: null
          - ZigValue: packed_xbgr_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_XBGR4444
            Comment: null
          - ZigValue: packed_xrgb_1_5_5_5
            SdlValue: $SDL.SDL_PIXELFORMAT_XRGB1555
            Comment: null
          - ZigValue: packed_xbgr_1_5_5_5
            SdlValue: $SDL.SDL_PIXELFORMAT_XBGR1555
            Comment: null
          - ZigValue: packed_argb_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB4444
            Comment: null
          - ZigValue: packed_rgba_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA4444
            Comment: null
          - ZigValue: packed_abgr_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR4444
            Comment: null
          - ZigValue: packed_bgra_4_4_4_4
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA4444
            Comment: null
          - ZigValue: packed_argb_1_5_5_5
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB1555
            Comment: null
          - ZigValue: packed_rgba_5_5_5_1
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA5551
            Comment: null
          - ZigValue: packed_abgr_1_5_5_5
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR1555
            Comment: null
          - ZigValue: packed_bgra_5_5_5_1
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA5551
            Comment: null
          - ZigValue: packed_rgb_5_6_5
            SdlValue: $SDL.SDL_PIXELFORMAT_RGB565
            Comment: null
          - ZigValue: packed_bgr_5_6_5
            SdlValue: $SDL.SDL_PIXELFORMAT_BGR565
            Comment: null
          - ZigValue: arr_rgb_24
            SdlValue: $SDL.SDL_PIXELFORMAT_RGB24
            Comment: null
          - ZigValue: arr_bgr_24
            SdlValue: $SDL.SDL_PIXELFORMAT_BGR24
            Comment: null
          - ZigValue: packed_xrgb_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_XRGB8888
            Comment: null
          - ZigValue: packed_rgbx_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBX8888
            Comment: null
          - ZigValue: packed_xbgr_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_XBGR8888
            Comment: null
          - ZigValue: packed_bgrx_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRX8888
            Comment: null
          - ZigValue: packed_argb_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB8888
            Comment: null
          - ZigValue: packed_rgba_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA8888
            Comment: null
          - ZigValue: packed_abgr_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR8888
            Comment: null
          - ZigValue: packed_bgra_8_8_8_8
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA8888
            Comment: null
          - ZigValue: packed_xrgb_2_10_10_10
            SdlValue: $SDL.SDL_PIXELFORMAT_XRGB2101010
            Comment: null
          - ZigValue: packed_xbgr_2_10_10_10
            SdlValue: $SDL.SDL_PIXELFORMAT_XBGR2101010
            Comment: null
          - ZigValue: packed_argb_2_10_10_10
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB2101010
            Comment: null
          - ZigValue: packed_abgr_2_10_10_10
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR2101010
            Comment: null
          - ZigValue: array_rgb_48
            SdlValue: $SDL.SDL_PIXELFORMAT_RGB48
            Comment: null
          - ZigValue: array_bgr_48
            SdlValue: $SDL.SDL_PIXELFORMAT_BGR48
            Comment: null
          - ZigValue: array_rgba_64
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA64
            Comment: null
          - ZigValue: array_argb_64
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB64
            Comment: null
          - ZigValue: array_bgra_64
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA64
            Comment: null
          - ZigValue: array_abgr_64
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR64
            Comment: null
          - ZigValue: array_rgb_48_float
            SdlValue: $SDL.SDL_PIXELFORMAT_RGB48_FLOAT
            Comment: null
          - ZigValue: array_bgr_48_float
            SdlValue: $SDL.SDL_PIXELFORMAT_BGR48_FLOAT
            Comment: null
          - ZigValue: array_rgba_64_float
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA64_FLOAT
            Comment: null
          - ZigValue: array_argb_64_float
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB64_FLOAT
            Comment: null
          - ZigValue: array_bgra_64_float
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA64_FLOAT
            Comment: null
          - ZigValue: array_abgr_64_float
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR64_FLOAT
            Comment: null
          - ZigValue: fourcc_yv12
            SdlValue: $SDL.SDL_PIXELFORMAT_YV12
            Comment: null
          - ZigValue: fourcc_iyuv
            SdlValue: $SDL.SDL_PIXELFORMAT_IYUV
            Comment: null
          - ZigValue: fourcc_yuy2
            SdlValue: $SDL.SDL_PIXELFORMAT_YUY2
            Comment: null
          - ZigValue: fourcc_uyvy
            SdlValue: $SDL.SDL_PIXELFORMAT_UYVY
            Comment: null
          - ZigValue: fourcc_yvyu
            SdlValue: $SDL.SDL_PIXELFORMAT_YVYU
            Comment: null
          - ZigValue: fourcc_nv12
            SdlValue: $SDL.SDL_PIXELFORMAT_NV12
            Comment: null
          - ZigValue: fourcc_nv21
            SdlValue: $SDL.SDL_PIXELFORMAT_NV21
            Comment: null
          - ZigValue: fourcc_p010
            SdlValue: $SDL.SDL_PIXELFORMAT_P010
            Comment: null
          - ZigValue: fourcc_oes
            SdlValue: $SDL.SDL_PIXELFORMAT_EXTERNAL_OES
            Comment: null
          - ZigValue: array_rgba_32
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBA32
            Comment: null
          - ZigValue: array_argb_32
            SdlValue: $SDL.SDL_PIXELFORMAT_ARGB32
            Comment: null
          - ZigValue: array_bgra_32
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRA32
            Comment: null
          - ZigValue: array_abgr_32
            SdlValue: $SDL.SDL_PIXELFORMAT_ABGR32
            Comment: null
          - ZigValue: array_rgbx_32
            SdlValue: $SDL.SDL_PIXELFORMAT_RGBX32
            Comment: null
          - ZigValue: array_xrgb_32
            SdlValue: $SDL.SDL_PIXELFORMAT_XRGB32
            Comment: null
          - ZigValue: array_bgrx_32
            SdlValue: $SDL.SDL_PIXELFORMAT_BGRX32
            Comment: null
          - ZigValue: array_xbgr_32
            SdlValue: $SDL.SDL_PIXELFORMAT_XBGR32
            Comment: null
        Functions:
          - SdlName: SDL_DEFINE_PIXELFOURCC
            ZigName: define4CC
            Comment: |
              Define a format using 4 characters (Ex: YV12).
            Return:
              Sdl: SDL_PixelFormat
              Zig: Format
              Convert: null
              Checks: []
            Arguments:
              - Name: a
                Type: u8
                Value: null
                Mode: null
              - Name: b
                Type: u8
                Value: null
                Mode: null
              - Name: c
                Type: u8
                Value: null
                Mode: null
              - Name: d
                Type: u8
                Value: null
                Mode: null
          - SdlName: SDL_DEFINE_PIXELFORMAT
            ZigName: define
            Comment: "Define a pixel format."
            Return:
              Sdl: SDL_PixelFormat
              Zig: Format
              Convert: null
              Checks: []
            Arguments:
              - Name: pixel_type
                Type: SDL_PixelType
                Value: null
                Mode: null
              - Name: order
                Type: OrderType(pixel_type)
                Value: "@intFromEnum(order)"
                Mode: verbatim
              - Name: layout
                Type: SDL_PackedLayout
                Value: null
                Mode: null
              - Name: bits
                Type: u8
                Value: null
                Mode: null
              - Name: bytes
                Type: u8
                Value: null
                Mode: null
          - SdlName: SDL_PIXELFLAG
            ZigName: getFlag
            Comment: "If format was created by `define` rather than `define4CC`."
            Return:
              Sdl: int
              Zig: bool
              Convert: ret != 0
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_PIXELTYPE
            ZigName: getType
            Comment: "Get the type component of the format."
            Return:
              Sdl: SDL_PixelType
              Zig: ?Type
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_PIXELTYPE_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_PIXELORDER
            ZigName: getOrder
            Comment: "Get the order component of the format."
            Return:
              Sdl: int
              Zig: c_int
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_PIXELORDER
            ZigName: getOrderTyped
            Comment: "Get the typed order component of the format. Do not run this on formats with an invalid type!"
            Return:
              Sdl: int
              Zig: OrderType(self.getType().?)
              Convert: "@enumFromInt(ret)"
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_PACKEDLAYOUT
            ZigName: getLayout
            Comment: "Get the layout component of the format."
            Return:
              Sdl: SDL_PackedLayout
              Zig: Layout
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_BITSPERPIXEL
            ZigName: getBitsPerPixel
            Comment: "Get the bits per pixel of the format."
            Return:
              Sdl: u8
              Zig: u8
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_BYTESPERPIXEL
            ZigName: getBytesPerPixel
            Comment: "Get the bytes per pixel of the format."
            Return:
              Sdl: u8
              Zig: u8
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_INDEXED
            ZigName: isIndexed
            Comment: "If the format is indexed."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_PACKED
            ZigName: isPacked
            Comment: "If the format is packed."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_ARRAY
            ZigName: isArray
            Comment: "If the format is array."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_ALPHA
            ZigName: hasAlpha
            Comment: "If the format has alpha."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_10BIT
            ZigName: is10Bit
            Comment: "If the format is 10-bit."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_FLOAT
            ZigName: isFloat
            Comment: "If the format is floating point."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_ISPIXELFORMAT_FOURCC
            ZigName: is4CC
            Comment: "If the format is 4CC."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_GetPixelFormatName
            ZigName: getName
            Comment: "Get the human readable name of a pixel format."
            Return:
              Sdl: string
              Zig: ?[]const u8
              Convert: null
              Checks:
                - Method: ReturnNullIfEqStr
                  ComparisonVal: |
                    "SDL_PIXELFORMAT_UNKNOWN"
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_GetMasksForPixelFormat
            ZigName: getMasks
            Comment: "Convert one of the enumerated pixel formats to a bpp value and RGBA masks."
            Return:
              Sdl: bool
              Zig: |
                !struct { bpp: u8, r_mask: u32, g_mask: u32, b_mask: u32, a_mask: u32 }
              Convert: .{ .bpp = @intCast(bpp), .r_mask = r_mask, .g_mask = g_mask, .b_mask = b_mask, .a_mask = a_mask }
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
              - Name: bpp
                Type: c_int
                Value: &bpp
                Mode: out
              - Name: r_mask
                Type: u32
                Value: &r_mask
                Mode: out
              - Name: g_mask
                Type: u32
                Value: &g_mask
                Mode: out
              - Name: b_mask
                Type: u32
                Value: &b_mask
                Mode: out
              - Name: a_mask
                Type: u32
                Value: &a_mask
                Mode: out
          - SdlName: SDL_GetPixelFormatForMasks
            ZigName: fromMasks
            Comment: "Convert a bpp value and RGBA masks to an enumerated pixel format."
            Return:
              Sdl: SDL_PixelFormat
              Zig: ?Format
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_PIXELFORMAT_UNKNOWN
            Arguments:
              - Name: bpp
                Type: u8
                Value: "@intCast(bpp)"
                Mode: null
              - Name: r_mask
                Type: u32
                Value: null
                Mode: null
              - Name: g_mask
                Type: u32
                Value: null
                Mode: null
              - Name: b_mask
                Type: u32
                Value: null
                Mode: null
              - Name: a_mask
                Type: u32
                Value: null
                Mode: null
          - SdlName: SDL_GetPixelFormatDetails
            ZigName: getDetails
            Comment: "Create an SDL_PixelFormatDetails structure corresponding to a pixel format."
            Return:
              Sdl: SDL_PixelFormatDetails
              Zig: "!FormatDetails"
              Convert: FormatDetails.fromSdl(ret.*)
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_PixelFormat
                Value: null
                Mode: null
        CustomFunctions: []
      - SdlName: SDL_Palette
        ZigName: Palette
        Type: *$SDL.SDL_Palette
        IsOpaque: false
        Comment: "A set of indexed colors representing a palette."
        Presets: []
        Functions:
          - SdlName: SDL_CreatePalette
            ZigName: init
            Comment: "Create a palette structure with the specified number of color entries."
            Return:
              Sdl: *SDL_Palette
              Zig: "!Palette"
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: null
            Arguments:
              - Name: num_colors
                Type: u32
                Value: "@intCast(num_colors)"
                Mode: null
          - SdlName: SDL_SetPaletteColors
            ZigName: setColors
            Comment: "Set a range of colors in a palette."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: *SDL_Palette
                Value: self.value
                Mode: null
              - Name: colors
                Type: "[]const Color"
                Value: colors.ptr
                Mode: verbatim
              - Name: first_color
                Type: usize
                Value: null
                Mode: null
              - Name: num_colors
                Type: null
                Value: "@intCast(colors.len)"
                Mode: null
          - SdlName: SDL_DestroyPalette
            ZigName: deinit
            Comment: "Free a palette created earlier."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: *SDL_Palette
                Value: self.value
                Mode: null
        CustomFunctions: []
      - SdlName: SDL_Colorspace
        ZigName: Colorspace
        Type: u32
        IsOpaque: false
        Comment: "Colorspace definitions."
        Presets:
          - ZigValue: Srgb
            SdlValue: $SDL.SDL_COLORSPACE_SRGB
            Comment: "sRGB is a gamma corrected colorspace, and the default colorspace for SDL rendering and 8-bit RGB surfaces."
          - ZigValue: Linear
            SdlValue: $SDL.SDL_COLORSPACE_SRGB_LINEAR
            Comment: "This is a linear colorspace and the default colorspace for floating point surfaces. On Windows this is the scRGB colorspace, and on Apple platforms this is kCGColorSpaceExtendedLinearSRGB for EDR content."
          - ZigValue: Hdr10
            SdlValue: $SDL.SDL_COLORSPACE_HDR10
            Comment: "HDR10 is a non-linear HDR colorspace and the default colorspace for 10-bit surfaces."
          - ZigValue: Jpeg
            SdlValue: $SDL.SDL_COLORSPACE_JPEG
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601."
          - ZigValue: BT601Limited
            SdlValue: $SDL.SDL_COLORSPACE_BT601_LIMITED
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601."
          - ZigValue: BT601Full
            SdlValue: $SDL.SDL_COLORSPACE_BT601_FULL
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601."
          - ZigValue: BT709Limited
            SdlValue: $SDL.SDL_COLORSPACE_BT709_LIMITED
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709."
          - ZigValue: BT709Full
            SdlValue: $SDL.SDL_COLORSPACE_BT709_FULL
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709."
          - ZigValue: BT2020Limited
            SdlValue: $SDL.SDL_COLORSPACE_BT2020_LIMITED
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020."
          - ZigValue: BT2020Full
            SdlValue: $SDL.SDL_COLORSPACE_BT2020_FULL
            Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020."
          - ZigValue: RgbDefault
            SdlValue: $SDL.SDL_COLORSPACE_RGB_DEFAULT
            Comment: "The default colorspace for RGB surfaces if no colorspace is specified."
          - ZigValue: YuvDefault
            SdlValue: $SDL.SDL_COLORSPACE_YUV_DEFAULT
            Comment: "The default colorspace for YUV surfaces if no colorspace is specified."
        Functions:
          - SdlName: SDL_DEFINE_COLORSPACE
            ZigName: define
            Comment: "Create a colorspace."
            Return:
              Sdl: SDL_Colorspace
              Zig: Colorspace
              Convert: null
              Checks: []
            Arguments:
              - Name: color_type
                Type: SDL_ColorType
                Value: null
                Mode: null
              - Name: range
                Type: SDL_ColorRange
                Value: null
                Mode: null
              - Name: primaries
                Type: SDL_ColorPrimaries
                Value: null
                Mode: null
              - Name: transfer
                Type: SDL_TransferCharacteristics
                Value: null
                Mode: null
              - Name: matrix
                Type: SDL_MatrixCoefficients
                Value: null
                Mode: null
              - Name: chroma
                Type: ?SDL_ChromaLocation
                Value: if (chroma == null) C.SDL_CHROMA_LOCATION_NONE else @intFromEnum(chroma)
                Mode: null
          - SdlName: SDL_COLORSPACETYPE
            ZigName: getType
            Comment: "Get the color space type."
            Return:
              Sdl: SDL_ColorType
              Zig: ?ColorType
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_COLOR_TYPE_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_COLORSPACERANGE
            ZigName: getRange
            Comment: "Get the color space range."
            Return:
              Sdl: SDL_ColorRange
              Zig: ?ColorRange
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_COLOR_RANGE_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_COLORSPACECHROMA
            ZigName: getChromaLocation
            Comment: "Get the color space chroma."
            Return:
              Sdl: SDL_ChromaLocation
              Zig: ?ChromaLocation
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_CHROMA_LOCATION_NONE
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_COLORSPACEPRIMARIES
            ZigName: getColorPrimaries
            Comment: "Get the color space primaries."
            Return:
              Sdl: SDL_ColorPrimaries
              Zig: ?ColorPrimaries
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_COLOR_PRIMARIES_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_COLORSPACETRANSFER
            ZigName: getTransferCharacteristics
            Comment: "Get the color space transfer characteristics."
            Return:
              Sdl: SDL_TransferCharacteristics
              Zig: ?TransferCharacteristics
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_TRANSFER_CHARACTERISTICS_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_COLORSPACEMATRIX
            ZigName: getMatrix
            Comment: "Get the color space matrix."
            Return:
              Sdl: SDL_MatrixCoefficients
              Zig: MatrixCoefficients
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_ISCOLORSPACE_MATRIX_BT601
            ZigName: isMatrixBT601
            Comment: "If the matrix is BT601."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_ISCOLORSPACE_MATRIX_BT709
            ZigName: isMatrixBT709
            Comment: "If the matrix is BT709."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_ISCOLORSPACE_MATRIX_BT2020_NCL
            ZigName: isMatrixBT2020_NCL
            Comment: "If the matrix is BT2020 NCL."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_ISCOLORSPACE_LIMITED_RANGE
            ZigName: isLimitedRange
            Comment: "If the color space is limited range."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_ISCOLORSPACE_FULL_RANGE
            ZigName: isFullRange
            Comment: "If the color space is full range."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Colorspace
                Value: null
                Mode: null
        CustomFunctions: []
      - SdlName: SDL_Pixel
        ZigName: Pixel
        Type: u32
        IsOpaque: false
        Comment: "Raw pixel value."
        Presets: []
        Functions: []
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs:
      - Name: FormatDetails
        Type: SDL_PixelFormatDetails
        Comment: "Details about the format of a pixel."
        Members:
          - ZigName: format
            SdlName: format
            Type: ?SDL_PixelFormat
            Value: null
            Comment: null
            FromSdlCustom: if (data.format == C.SDL_PIXELFORMAT_UNKNOWN) null else Format{ .value = data.format }
            ToSdlCustom: if (self.format == null) C.SDL_PIXELFORMAT_UNKNOWN else self.format
          - ZigName: bits_per_pixel
            SdlName: bits_per_pixel
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: bytes_per_pixel
            SdlName: bytes_per_pixel
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: r_mask
            SdlName: Rmask
            Type: u32
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: g_mask
            SdlName: Gmask
            Type: u32
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: b_mask
            SdlName: Bmask
            Type: u32
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: r_bits
            SdlName: Rbits
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: g_bits
            SdlName: Gbits
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: b_bits
            SdlName: Bbits
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: a_bits
            SdlName: Abits
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: r_shift
            SdlName: Rshift
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: g_shift
            SdlName: Gshift
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: b_shift
            SdlName: Bshift
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: a_shift
            SdlName: Ashift
            Type: u8
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
        Functions:
          - SdlName: SDL_MapRGB
            ZigName: mapRgb
            Comment: "Map an RGB triple to an opaque pixel value for a given pixel format."
            Return:
              Sdl: SDL_Pixel
              Zig: Pixel
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormatDetails
                Value: null
                Mode: convertSdlConst
              - Name: palette
                Type: ?SDL_Palette
                Value: null
                Mode: null
              - Name: r
                Type: u8
                Value: null
                Mode: null
              - Name: g
                Type: u8
                Value: null
                Mode: null
              - Name: b
                Type: u8
                Value: null
                Mode: null
          - SdlName: SDL_MapRGBA
            ZigName: mapRgba
            Comment: "Map an RGBA quadruple to a transparent pixel value for a given pixel format."
            Return:
              Sdl: SDL_Pixel
              Zig: Pixel
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormatDetails
                Value: null
                Mode: convertSdlConst
              - Name: palette
                Type: ?SDL_Palette
                Value: null
                Mode: null
              - Name: r
                Type: u8
                Value: null
                Mode: null
              - Name: g
                Type: u8
                Value: null
                Mode: null
              - Name: b
                Type: u8
                Value: null
                Mode: null
              - Name: a
                Type: u8
                Value: null
                Mode: null
          - SdlName: SDL_GetRGB
            ZigName: getRgb
            Comment: "Get RGB values from a pixel in the specified format."
            Return:
              Sdl: void
              Zig: |
                struct { r: u8, g: u8, b: u8 }
              Convert: .{ .r = r, .g = g, .b = b }
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormatDetails
                Value: "@intCast(pixel.value)"
                Mode: convertSdlConst
              - Name: pixel
                Type: SDL_Pixel
                Value: "&self_sdl"
                Mode: null
              - Name: palette
                Type: ?SDL_Palette
                Value: null
                Mode: null
              - Name: r
                Type: u8
                Value: &r
                Mode: out
              - Name: g
                Type: u8
                Value: &g
                Mode: out
              - Name: b
                Type: u8
                Value: &b
                Mode: out
          - SdlName: SDL_GetRGBA
            ZigName: getRgba
            Comment: "Get RGBA values from a pixel in the specified format."
            Return:
              Sdl: void
              Zig: |
                struct { r: u8, g: u8, b: u8, a: u8 }
              Convert: .{ .r = r, .g = g, .b = b, .a = a }
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PixelFormatDetails
                Value: "@intCast(pixel.value)"
                Mode: convertSdlConst
              - Name: pixel
                Type: SDL_Pixel
                Value: "&self_sdl"
                Mode: null
              - Name: palette
                Type: ?SDL_Palette
                Value: null
                Mode: null
              - Name: r
                Type: u8
                Value: &r
                Mode: out
              - Name: g
                Type: u8
                Value: &g
                Mode: out
              - Name: b
                Type: u8
                Value: &b
                Mode: out
              - Name: a
                Type: u8
                Value: &a
                Mode: out
        CustomFunctions: []
    Functions: []
    CustomFunctions:
      - Code: |
          /// Get the order type of a pixel type.
          fn OrderType(pixel_type: Type) type {
              return switch (pixel_type) {
                  .Index1, .Index2, .Index4, .Index8 => IndexOrder,
                  .Packed8, .Packed16, .Packed32 => PackedOrder,
                  .ArrayU8, .ArrayU16, .ArrayU32, .ArrayF16, .ArrayF32 => ArrayOrder,
              };
          }
      - Code: |
          /// A fully opaque 8-bit alpha value.
          pub const alpha_opaque: u8 = 255;
      - Code: |
          /// A fully transparent 8-bit alpha value.
          pub const alpha_transparent: u8 = 0;
      - Code: |
          /// A fully opaque float alpha value.
          pub const alpha_opaque_float: f32 = 1;
      - Code: |
          /// A fully transparent float alpha value.
          pub const alpha_transparent_float: f32 = 0;
    Typedefs:
      - SdlName: SDL_Color
        ZigName: Color
        Comment: "A structure that represents a color as RGBA components."
      - SdlName: SDL_FColor
        ZigName: FColor
        Comment: "The bits of this structure can be directly reinterpreted as a float-packed."
    Tests: []
  - Name: power
    Callbacks: []
    Enums:
      - SdlType: SDL_PowerState
        ZigType: PowerState
        InternalType: c_int
        Comment: "The basic state for the system's power supply."
        Values:
          - ZigValue: Unknown
            SdlValue: $SDL.SDL_POWERSTATE_UNKNOWN
            Comment: "Can not determine power status."
          - ZigValue: OnBattery
            SdlValue: $SDL.SDL_POWERSTATE_ON_BATTERY
            Comment: "Not plugged in, running on battery."
          - ZigValue: NoBattery
            SdlValue: $SDL.SDL_POWERSTATE_NO_BATTERY
            Comment: "Plugged in, no battery available."
          - ZigValue: Charging
            SdlValue: $SDL.SDL_POWERSTATE_CHARGING
            Comment: "Plugged in, battery charging."
          - ZigValue: Charged
            SdlValue: $SDL.SDL_POWERSTATE_CHARGED
            Comment: "Plugged in, battery charged."
        Functions:
          - SdlName: SDL_GetPowerInfo
            ZigName: get
            Comment: "Get the current power supply details."
            Return:
              Sdl: SDL_PowerState
              Zig: |
                !struct { state: PowerState, seconds_left: ?u32, percent: ?u7 }
              Convert: .{ .state = ret, .seconds_left = if (seconds_left == -1) null else @intCast(seconds_left), .percent = if (percent == -1) null else @intCast(percent) }
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: $SDL.SDL_POWERSTATE_ERROR
            Arguments:
              - Name: seconds_left
                Type: c_int
                Value: &seconds_left
                Mode: out
              - Name: percent
                Type: c_int
                Value: &percent
                Mode: out
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: properties
    Callbacks: []
    Enums:
      - SdlType: SDL_PropertyType
        ZigType: Type
        InternalType: c_uint
        Comment: "Properties type enum."
        Values:
          - ZigValue: Pointer
            SdlValue: $SDL.SDL_PROPERTY_TYPE_POINTER
            Comment: null
          - ZigValue: String
            SdlValue: $SDL.SDL_PROPERTY_TYPE_STRING
            Comment: null
          - ZigValue: Number
            SdlValue: $SDL.SDL_PROPERTY_TYPE_NUMBER
            Comment: null
          - ZigValue: Float
            SdlValue: $SDL.SDL_PROPERTY_TYPE_FLOAT
            Comment: null
          - ZigValue: Boolean
            SdlValue: $SDL.SDL_PROPERTY_TYPE_BOOLEAN
            Comment: null
        Functions: []
    Errors: []
    Values:
      SdlName: SDL_PropertiesID
      ZigName: Group
      Type: $SDL.SDL_PropertiesID
      IsOpaque: false
      Comment: "SDL properties group. Properties can be added or removed at runtime."
      Presets: []
      Functions:
          - SdlName: SDL_GetGlobalProperties
            ZigName: getGlobal
            Comment: "Get the global SDL properties."
            Return:
              Sdl: SDL_PropertiesID
              Zig: "!Group"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: 0
            Arguments: []
          - SdlName: SDL_CreateProperties
            ZigName: init
            Comment: "Create a group of properties."
            Return:
              Sdl: SDL_PropertiesID
              Zig: "!Group"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: 0
            Arguments: []
          - SdlName: SDL_CopyProperties
            ZigName: copyTo
            Comment: "Copy and replace all properties in destination with ones in this one. Will not copy properties that require cleanup."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
              - Name: dest
                Type: SDL_PropertiesID
                Value: null
                Mode: null
          - SdlName: SDL_LockProperties
            ZigName: lock
            Comment: "Lock a group of properties."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
          - SdlName: SDL_UnlockProperties
            ZigName: unlock
            Comment: "Unlock a group of properties."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
          - SdlName: SDL_SetPointerPropertyWithCleanup
            ZigName: setPointerPropertyWithCleanup
            Comment: "Set a pointer property in a group of properties with a cleanup function that is called when the property is deleted."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
              - Name: ValueType
                Type: type
                Value: null
                Mode: generic
              - Name: UserData
                Type: type
                Value: null
                Mode: generic
              - Name: name
                Type: string
                Value: null
                Mode: null
              - Name: value
                Type: ?*ValueType
                Value: null
                Mode: null
              - Name: cb
                Type: |
                  ?*const fn (user_data: *UserData, value: *ValueType) callconv(.C) void
                Value: if (cb) |val| @ptrCast(val) else null
                Mode: verbatim
              - Name: user_data
                Type: *UserData
                Value: null
                Mode: null
          - SdlName: SDL_HasProperty
            ZigName: has
            Comment: "If the property group has a property."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
              Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
              - Name: name
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_GetPropertyType
            ZigName: getType
            Comment: "Get the type of property."
            Return:
              Sdl: SDL_PropertyType
              Zig: ?Type
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_PROPERTY_TYPE_INVALID
              Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
              - Name: name
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_ClearProperty
            ZigName: clear
            Comment: "Clear a property from the group."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
              - Name: name
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_DestroyProperties
            ZigName: deinit
            Comment: "Destroy the group of properties."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
                Mode: null
      CustomFunctions:
          - Code: |
              /// Set a property.
                  pub fn set(
                      self: Group,
                      name: [:0]const u8,
                      value: Property,
                  ) !void {
                      const ret = switch (value) {
                          .Pointer => |pt| C.SDL_SetPointerProperty(self.value, name, pt),
                          .String => |str| C.SDL_SetStringProperty(self.value, name, str),
                          .Number => |num| C.SDL_SetNumberProperty(self.value, name, num),
                          .Float => |num| C.SDL_SetFloatProperty(self.value, name, num),
                          .Boolean => |val| C.SDL_SetBooleanProperty(self.value, name, val),
                      };
                      if (!ret)
                          return error.SdlError;
                  }
          - Code: |
              /// Get a property.
                  pub fn get(
                      self: Group,
                      name: [:0]const u8,
                  ) ?Property {
                      return switch (self.getPropertyType(name)) {
                          C.SDL_PROPERTY_TYPE_INVALID => null,
                          C.SDL_PROPERTY_TYPE_POINTER => Property{ .Pointer = C.SDL_GetPointerProperty(self.value, name, null) },
                          C.SDL_PROPERTY_TYPE_STRING => Property{ .String = C.SDL_GetStringProperty(self.value, name, "") },
                          C.SDL_PROPERTY_TYPE_NUMBER => Property{ .Number = C.SDL_GetNumberProperty(self.value, name, 0) },
                          C.SDL_PROPERTY_TYPE_FLOAT => Property{ .Float = C.SDL_GetFloatProperty(self.value, name, 0) },
                          C.SDL_PROPERTY_TYPE_BOOLEAN => Property{ .Boolean = C.SDL_GetBooleanProperty(self.value, name, false) },
                      };
                  }
          - Code: |
              /// Get all properties in the group. Returned map is owned.
                  pub fn getAll(
                      self: Group,
                      allocator: std.mem.Allocator,
                  ) !std.StringHashMap(Property) {
                      var ret = std.StringArrayHashMap(Property).init(allocator);
                      if (!C.SDL_EnumerateProperties(self.value, propertiesEnumerateCallback, &ret))
                          return error.SdlError;
                      return ret;
                  }
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions:
      - Code: |
          /// Property.
          pub const Property = union(Type) {
              Pointer: ?*anyopaque,
              String: [:0]const u8,
              Number: i64,
              Float: f32,
              Boolean: bool,
          };
      - Code: |
          /// Used for adding properties to a list.
          fn propertiesEnumerateCallback(user_data: *std.StringHashMap(Property), id: C.SDL_PropertiesID, name: [*c]const u8) callconv(.C) void {
              const group = Group{ .value = id };
              if (group.get(name)) |val|
                  user_data.put(name, val) catch {};
          }
    Typedefs: []
    Tests: []
  - Name: surface
    Callbacks: []
    Enums:
      - SdlType: SDL_ScaleMode
        ZigType: ScaleMode
        InternalType: c_uint
        Comment: "The scaling mode."
        Values:
          - ZigValue: Nearest
            SdlValue: $SDL.SDL_SCALEMODE_NEAREST
            Comment: "Nearest pixel sampling."
          - ZigValue: Linear
            SdlValue: $SDL.SDL_SCALEMODE_LINEAR
            Comment: "Linear pixel sampling."
        Functions: []
      - SdlType: SDL_FlipMode
        ZigType: FlipMode
        InternalType: c_uint
        Comment: "The flipping mode."
        Values:
          - ZigValue: Horizontal
            SdlValue: $SDL.SDL_FLIP_HORIZONTAL
            Comment: "Flip horizontally."
          - ZigValue: Vertical
            SdlValue: $SDL.SDL_FLIP_VERTICAL
            Comment: "Flip vertically."
        Functions: []
    Errors: []
    Values:
      - SdlName: SDL_Surface
        ZigName: Surface
        Type: *$SDL.SDL_Surface
        IsOpaque: false
        Comment: "A collection of pixels used in software blitting."
        Presets: []
        Functions:
          - SdlName: SDL_CreateSurface
            ZigName: init
            Comment: "Allocate a new surface with a specific pixel format."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: width
                Type: u31
                Value: null
                Mode: null
              - Name: height
                Type: u31
                Value: null
                Mode: null
              - Name: format
                Type: SDL_PixelFormat
                Value: null
                Mode: null
          - SdlName: SDL_CreateSurfaceFrom
            ZigName: initFrom
            Comment: "Allocate a new surface with a specific pixel format and data in the format."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: width
                Type: u31
                Value: null
                Mode: null
              - Name: height
                Type: u31
                Value: null
                Mode: null
              - Name: format
                Type: SDL_PixelFormat
                Value: null
                Mode: null
              - Name: pixel_data
                Type: "[]const u8"
                Value: pixel_data.ptr
                Mode: verbatim
              - Name: pitch
                Type: null
                Value: "@intCast(pixel_data.len / height)"
                Mode: null
          - SdlName: SDL_DestroySurface
            ZigName: deinit
            Comment: "Free a surface."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfaceProperties
            ZigName: getProperties
            Comment: "Get the properties associated with a surface."
            Return:
              Sdl: SDL_PropertiesID
              Zig: "!properties.Group"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: 0
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
# TODO: GETTERS AND SETTERS FOR EACH PROPERTY!
          - SdlName: SDL_SetSurfaceColorspace
            ZigName: setColorspace
            Comment: "Set the colorspace used by a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: colorspace
                Type: SDL_Colorspace
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfaceColorspace
            ZigName: getColorspace
            Comment: "Get the colorspace used by a surface."
            Return:
              Sdl: SDL_Colorspace
              Zig: "?pixels.Colorspace"
              Convert: null
              Checks:
                - Mode: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_COLORSPACE_UNKNOWN
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_CreateSurfacePalette
            ZigName: createPalette
            Comment: "Create a palette and associate it with a surface. Returned palette does not need to be freed."
            Return:
              Sdl: SDL_Palette
              Zig: "!pixels.Palette"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_SetSurfacePalette
            ZigName: setPalette
            Comment: "Set the palette used by a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: palette
                Type: SDL_Palette
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfacePalette
            ZigName: getPalette
            Comment: "Get the palette used by a surface."
            Return:
              Sdl: SDL_Palette
              Zig: "?pixels.Palette"
              Convert: null
              Checks:
                - Mode: ReturnNullIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_AddSurfaceAlternateImage
            ZigName: addAlternateImage
            Comment: "Add an alternate version of a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: image
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_SurfaceHasAlternateImages
            ZigName: hasAlternateImage
            Comment: "Return whether a surface has alternate versions available."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_RemoveSurfaceAlternateImages
            ZigName: removeAlternateImages
            Comment: "Remove all alternate versions of a surface."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_LockSurface
            ZigName: lock
            Comment: "Set up a surface for directly accessing the pixels. Not all surfaces need locking."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_UnlockSurface
            ZigName: unlock
            Comment: "Release a surface after directly accessing the pixels."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_LoadBMP_IO
            ZigName: initFromBmpIo
            Comment: "Create a surface from a BMP image from a seekable stream."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: stream
                Type: SDL_IOStream
                Value: null
                Mode: null
              - Name: close_stream_after
                Type: bool
                Value: null
                Mode: null
          - SdlName: SDL_LoadBMP
            ZigName: initFromBmpFile
            Comment: "Load a BMP image from a file."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: file
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_SaveBMP_IO
            ZigName: saveBmpIo
            Comment: "Save a surface to a seekable SDL data stream in BMP format."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: stream
                Type: SDL_IOStream
                Value: null
                Mode: null
              - Name: close_stream_after
                Type: bool
                Value: null
                Mode: null
          - SdlName: SDL_SaveBMP
            ZigName: saveBmpFile
            Comment: "Save a surface to a file."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: file
                Type: string
                Value: null
                Mode: null
          - SdlName: SDL_SetSurfaceRLE
            ZigName: setRLE
            Comment: "Set the RLE acceleration hint for a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: enabled
                Type: bool
                Value: null
                Mode: null
          - SdlName: SDL_SurfaceHasRLE
            ZigName: hasRLE
            Comment: "Returns whether the surface is RLE enabled."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_SetSurfaceColorKey
            ZigName: setColorKey
            Comment: "Set the color key (transparent pixel) in a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: enabled
                Type: null
                Value: pixel != null
                Mode: null
              - Name: pixel
                Type: "?pixels.Pixel"
                Value: "if (pixel == null) 0 else pixel.?.value"
                Mode: verbatim
          - SdlName: SDL_SurfaceHasColorKey
            ZigName: hasColorKey
            Comment: "Returns whether the surface has a color key."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfaceColorKey
            ZigName: getColorKey
            Comment: "Get the color key (transparent pixel) for a surface."
            Return:
              Sdl: bool
              Zig: "!pixels.Pixel"
              Convert: "pixels.Pixel{ .value = ret }"
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: key
                Type: u32
                Value: "&key"
                Mode: out
          - SdlName: SDL_SetSurfaceColorMod
            ZigName: setColorMod
            Comment: "Set an additional color value multiplied into blit operations."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: color
                Type: SDL_Color
                Value: color.r
                Mode: null
              - Name: g
                Type: null
                Value: color.g
                Mode: null
              - Name: b
                Type: null
                Value: color.b
                Mode: null
          - SdlName: SDL_GetSurfaceColorMod
            ZigName: getColorMod
            Comment: "Get the additional color value multiplied into blit operations."
            Return:
              Sdl: bool
              Zig: "!pixels.Color"
              Convert: "pixels.Color{ .r = r, .g = g, .b = b }"
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: r
                Type: u8
                Value: "&r"
                Mode: out
              - Name: g
                Type: u8
                Value: "&g"
                Mode: out
              - Name: b
                Type: u8
                Value: "&b"
                Mode: out
          - SdlName: SDL_SetSurfaceAlphaMod
            ZigName: setAlphaMod
            Comment: "Set an additional alpha value used in blit operations."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: alpha
                Type: u8
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfaceAlphaMod
            ZigName: getAlphaMod
            Comment: "Get the additional alpha value used in blit operations."
            Return:
              Sdl: bool
              Zig: "u8"
              Convert: "alpha"
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: alpha
                Type: u8
                Value: "&alpha"
                Mode: out
          - SdlName: SDL_SetSurfaceBlendMode
            ZigName: setBlendMode
            Comment: "Set the blend mode used for blit operations."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: mode
                Type: SDL_BlendMode
                Value: null
                Mode: null
          - SdlName: SDL_GetSurfaceBlendMode
            ZigName: getBlendMode
            Comment: "Get the blend mode used for blit operations."
            Return:
              Sdl: bool
              Zig: "!blend_mode.Mode"
              Convert: "mode"
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: mode
                Type: SDL_BlendMode
                Value: "&mode"
                Mode: out
          - SdlName: SDL_SetSurfaceClipRect
            ZigName: setClipRect
            Comment: "Set the clipping rectangle for a surface."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: val
                Type: SDL_Rect
                Value: null
                Mode: convertSdlConstNullable
          - SdlName: SDL_GetSurfaceClipRect
            ZigName: getClipRect
            Comment: "Get the clipping rectangle for a surface."
            Return:
              Sdl: bool
              Zig: "!rect.IRect"
              Convert: rect.IRect.fromSdl(val)
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: val
                Type: SDL_Rect
                Value: "&val"
                Mode: out
          - SdlName: SDL_FlipSurface
            ZigName: flip
            Comment: "Flip a surface vertically or horizontally."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: flip_mode
                Type: ?FlipMode
                Value: if (flip_mode == null) C.SDL_FLIP_NONE else @intFromEnum(flip_mode.?)
                Mode: verbatim
          - SdlName: SDL_DuplicateSurface
            ZigName: duplicate
            Comment: "Creates a new surface identical to the existing surface."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
          - SdlName: SDL_ScaleSurface
            ZigName: scale
            Comment: "Creates a new surface identical to the existing surface, scaled to the desired size."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: width
                Type: u31
                Value: null
                Mode: null
              - Name: height
                Type: u31
                Value: null
                Mode: null
              - Name: scale_mode
                Type: SDL_ScaleMode
                Value: null
                Mode: null
          - SdlName: SDL_ConvertSurface
            ZigName: convert
            Comment: "Copy an existing surface to a new surface of the specified format."
            Return:
              Sdl: SDL_Surface
              Zig: "!Surface"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: self
                Type: SDL_Surface
                Value: null
                Mode: null
              - Name: format
                Type: SDL_PixelFormat
                Value: null
                Mode: null
        CustomFunctions:
          - Code: |
              /// Get the surface flags.
                  pub fn getFlags(
                      self: Surface,
                  ) Flags {
                      return Flags.fromSdl(self.value.flags);
                  }
          - Code: |
              /// Get the surface format.
                  pub fn getFormat(
                      self: Surface,
                  ) ?pixels.Format {
                      if (self.value.format == C.SDL_PIXELFORMAT_UNKNOWN)
                          return null;
                      return pixels.Format.fromSdl(self.value.format);
                  }
          - Code: |
              /// Get the surface width.
                  pub fn getWidth(
                      self: Surface,
                  ) u32 {
                      return @intCast(self.value.w);
                  }
          - Code: |
              /// Get the surface height.
                  pub fn getHeight(
                      self: Surface,
                  ) u32 {
                      return @intCast(self.value.h);
                  }
          - Code: |
              /// Get the byte distance between rows of pixels.
                  pub fn getPitch(
                      self: Surface,
                  ) u32 {
                      return @intCast(self.value.pitch);
                  }
          - Code: |
              /// Get a slice to writable pixels. If the pixels are not writeable, null is returned.
                  pub fn getPixels(
                      self: Surface,
                  ) ?[]u8 {
                      if (self.value.pixels) |pixel|
                          return .{ .ptr = @ptrCast(pixel), .len = @intCast(self.value.h * self.value.pitch) };
                      return null;
                  }
          - Code: |
              /// Get a slice including all versions of a surface. Result is to be freed.
                  pub fn getImages(
                      self: Surface,
                      allocator: std.mem.Allocator,
                  ) ![]Surface {
                      var num: c_int = undefined;
                      const ret = C.SDL_GetSurfaceImages(self.value, &num);
                      if (ret == null)
                          return error.SdlError;
                      defer C.SDL_free(ret);
                      const converted_ret = try allocator.alloc(Surface, @intCast(num));
                      for (converted_ret, 0..num) |surface, index| {
                          surface.value = ret[index];
                      }
                      return converted_ret;
                  }
    Flags:
      - Name: Flags
        Type: SDL_SurfaceFlags
        Comment: "The flags on an SDL Surface."
        Values:
          - Name: preallocated
            Type: SDL_SURFACE_PREALLOCATED
            Value: null
            Comment: "Surface uses preallocated pixel memory."
          - Name: lock_needed
            Type: SDL_SURFACE_LOCK_NEEDED
            Value: null
            Comment: "Surface needs to be locked to access pixels."
          - Name: locked
            Type: SDL_SURFACE_LOCKED
            Value: null
            Comment: "Surface is currently locked."
          - Name: simd_aligned
            Type: SDL_SURFACE_SIMD_ALIGNED
            Value: null
            Comment: "Surface uses pixel memory allocated with aligned allocator."
        Presets: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
  - Name: time
    Callbacks: []
    Enums:
      - SdlType: SDL_Day
        ZigType: Day
        InternalType: c_int
        Comment: "Day of the week."
        Values:
          - ZigValue: Sunday
            SdlValue: 0
            Comment: null
          - ZigValue: Monday
            SdlValue: 1
            Comment: null
          - ZigValue: Tuesday
            SdlValue: 2
            Comment: null
          - ZigValue: Wednesday
            SdlValue: 3
            Comment: null
          - ZigValue: Thursday
            SdlValue: 4
            Comment: null
          - ZigValue: Friday
            SdlValue: 5
            Comment: null
          - ZigValue: Saturday
            SdlValue: 6
            Comment: null
        Functions: []
      - SdlType: SDL_Month
        ZigType: Month
        InternalType: c_int
        Comment: "Month of the year."
        Values:
          - ZigValue: January
            SdlValue: 1
            Comment: null
          - ZigValue: February
            SdlValue: 2
            Comment: null
          - ZigValue: March
            SdlValue: 3
            Comment: null
          - ZigValue: April
            SdlValue: 4
            Comment: null
          - ZigValue: May
            SdlValue: 5
            Comment: null
          - ZigValue: June
            SdlValue: 6
            Comment: null
          - ZigValue: July
            SdlValue: 7
            Comment: null
          - ZigValue: August
            SdlValue: 8
            Comment: null
          - ZigValue: September
            SdlValue: 9
            Comment: null
          - ZigValue: October
            SdlValue: 10
            Comment: null
          - ZigValue: November
            SdlValue: 11
            Comment: null
          - ZigValue: December
            SdlValue: 12
            Comment: null
        Functions: []
      - SdlType: SDL_DateFormat
        ZigType: DateFormat
        InternalType: c_uint
        Comment: "The preferred date format of the current system locale."
        Values:
          - ZigValue: YearMonthDay
            SdlValue: $SDL.SDL_DATE_FORMAT_YYYYMMDD
            Comment: null
          - ZigValue: DayMonthYear
            SdlValue: $SDL.SDL_DATE_FORMAT_DDMMYYYY
            Comment: null
          - ZigValue: MonthDayYear
            SdlValue: $SDL.SDL_DATE_FORMAT_MMDDYYYY
            Comment: null
        Functions: []
      - SdlType: SDL_TimeFormat
        ZigType: TimeFormat
        InternalType: c_uint
        Comment: "The preferred time format of the current system locale."
        Values:
          - ZigValue: TwentyFourHour
            SdlValue: $SDL.SDL_TIME_FORMAT_24HR
            Comment: null
          - ZigValue: TwelveHour
            SdlValue: $SDL.SDL_TIME_FORMAT_12HR
            Comment: null
        Functions: []
    Errors: []
    Values:
      - SdlName: SDL_Time
        ZigName: Time
        Type: $SDL.SDL_Time
        IsOpaque: false
        Comment: "Nanoseconds since the unix epoch."
        Presets: []
        Functions:
          - SdlName: SDL_GetCurrentTime
            ZigName: getCurrent
            Comment: "Gets the current value of the system realtime clock in nanoseconds since Jan 1, 1970 in Universal Coordinated Time (UTC)."
            Return:
              Sdl: bool
              Zig: "!Time"
              Convert: Time{ .value = time }
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: time
                Type: SDL_Time
                Value: &time
                Mode: out
          - SdlName: SDL_GetDateTimeLocalePreferences
            ZigName: getLocalePreferences
            Comment: "Gets the current preferred date and time format for the system locale. This is a *slow* call and should only be used once ideally."
            Return:
              Sdl: bool
              Zig: |
                !struct { dateFormat: DateFormat, timeFormat: TimeFormat }
              Convert: .{ .dateFormat = @enumFromInt(dateFormat), .timeFormat = @enumFromInt(timeFormat) }
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_Time
                Value: null
                Mode: null
              - Name: dateFormat
                Type: SDL_DateFormat
                Value: &dateFormat
                Mode: out
              - Name: timeFormat
                Type: SDL_TimeFormat
                Value: &timeFormat
                Mode: out
          - SdlName: SDL_DateTimeToTime
            ZigName: fromDateTime
            Comment: "Converts a calendar time to an SDL_Time in nanoseconds since the epoch."
            Return:
              Sdl: bool
              Zig: "!Time"
              Convert: Time{ .value = time }
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: date_time
                Type: SDL_DateTime
                Value: null
                Mode: convertSdlConst
              - Name: time
                Type: SDL_Time
                Value: &time
                Mode: out
          - SdlName: SDL_TimeToWindows
            ZigName: toWindows
            Comment: "Converts an SDL time to a windows FILETIME."
            Return:
              Sdl: void
              Zig: |
                struct { lowDateTime: u32, highDateTime: u32 }
              Convert: .{ .lowDateTime = lowDateTime, .highDateTime = highDateTime }
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Time
                Value: null
                Mode: null
              - Name: lowDateTime
                Type: u32
                Value: &lowDateTime
                Mode: out
              - Name: highDateTime
                Type: u32
                Value: &highDateTime
                Mode: out
          - SdlName: SDL_TimeFromWindows
            ZigName: fromWindows
            Comment: "Converts a windows FILETIME to an SDL time."
            Return:
              Sdl: SDL_Time
              Zig: Time
              Convert: null
              Checks: []
            Arguments:
              - Name: lowDateTime
                Type: u32
                Value: null
                Mode: null
              - Name: highDateTime
                Type: u32
                Value: null
                Mode: null
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs:
      - Name: DateTime
        Type: SDL_DateTime
        Comment: "A structure holding a calendar date and time broken down into it's components."
        Members:
          - ZigName: year
            SdlName: year
            Type: u31
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: month
            SdlName: month
            Type: SDL_Month
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: day
            SdlName: day
            Type: u5
            Value: null
            Comment: "Range is [0-31] inclusively."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: hour
            SdlName: hour
            Type: u5
            Value: null
            Comment: "Range is [0-23] inclusively."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: minute
            SdlName: minute
            Type: u6
            Value: null
            Comment: "Range is [0-59] inclusively."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: second
            SdlName: second
            Type: u6
            Value: null
            Comment: "Range is [0-59] inclusively."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: nanosecond
            SdlName: nanosecond
            Type: u31
            Value: null
            Comment: "Range is [0-999999999] inclusively."
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: day_of_week
            SdlName: day_of_week
            Type: SDL_Day
            Value: null
            Comment: null
            FromSdlCustom: null
            ToSdlCustom: null
          - ZigName: utc_offset
            SdlName: utc_offset
            Type: int
            Value: null
            Comment: "Seconds east of UTC."
            FromSdlCustom: null
            ToSdlCustom: null
        Functions:
          - SdlName: SDL_TimeToDateTime
            ZigName: fromTime
            Comment: "Converts an SDL time in nanoseconds since the epoch to a calendar time in the SDL date time format."
            Return:
              Sdl: bool
              Zig: "!DateTime"
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: time
                Type: SDL_Time
                Value: null
                Mode: null
              - Name: date_time
                Type: SDL_DateTime
                Value: &date_time
                Mode: out
              - Name: local_instead_of_utc
                Type: bool
                Value: null
                Mode: null
        CustomFunctions: []
    Functions:
      - SdlName: SDL_GetDaysInMonth
        ZigName: getDaysInMonth
        Comment: "Get the number of days in a month for a given year."
        Return:
          Sdl: int
          Zig: "!u5"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: year
            Type: u31
            Value: null
            Mode: null
          - Name: month
            Type: SDL_Month
            Value: null
            Mode: null
      - SdlName: SDL_GetDayOfYear
        ZigName: getDayOfYear
        Comment: "Get the day of a given year with value [0-365]."
        Return:
          Sdl: int
          Zig: "!u9"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: year
            Type: u31
            Value: null
            Mode: null
          - Name: month
            Type: SDL_Month
            Value: null
            Mode: null
          - Name: day
            Type: u5
            Value: null
            Mode: null
      - SdlName: SDL_GetDayOfWeek
        ZigName: getDayOfWeek
        Comment: "Get the day of a given week."
        Return:
          Sdl: SDL_Day
          Zig: "!Day"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: year
            Type: u31
            Value: null
            Mode: null
          - Name: month
            Type: SDL_Month
            Value: null
            Mode: null
          - Name: day
            Type: u5
            Value: null
            Mode: null
    CustomFunctions: []
    Typedefs: []
    Tests:
      - Name: Dates
        Comment: "Ensure time and date recognition works."
        Code: |
          try std.testing.expect(try getDaysInMonth(2018, Month.February) == 28);
          try std.testing.expect(try getDaysInMonth(2020, Month.February) == 29);
          try std.testing.expect(try getDaysInMonth(2014, Month.October) == 31);

          try std.testing.expect(try getDayOfYear(1972, Month.June, 13) == 164);
          try std.testing.expect(try getDayOfYear(2057, Month.March, 12) == 70);
          try std.testing.expect(try getDayOfYear(2018, Month.September, 27) == 269);
          try std.testing.expectError(error.SdlError, getDayOfYear(2020, Month.February, 31));

          try std.testing.expect(try getDayOfWeek(2001, Month.November, 2) == Day.Friday);
          try std.testing.expect(try getDayOfWeek(1984, Month.January, 11) == Day.Wednesday);
          try std.testing.expect(try getDayOfWeek(2024, Month.October, 9) == Day.Wednesday);
          try std.testing.expectError(error.SdlError, getDayOfWeek(2020, Month.February, 31));;
  - Name: timer
    Callbacks:
      - SdlName: SDL_TimerCallback
        ZigName: MillisecondsTimerCallback
        Comment: "Call a callback function at a future time. Has the current callback time interval, returns the new one with 0 to disable."
        Return:
          Sdl: u32
          Zig: u32
          Convert: null
          Checks: []
        Arguments:
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: user_data
            Type: *UserData
            Value: null
            Mode: null
          - Name: timer
            Type: SDL_TimerID
            Value: null
            Mode: null
          - Name: millsecond_interval
            Type: u32
            Value: null
            Mode: null
      - SdlName: SDL_NSTimerCallback
        ZigName: NanosecondsTimerCallback
        Comment: "Call a callback function at a future time. Has the current callback time interval, returns the new one with 0 to disable."
        Return:
          Sdl: u32
          Zig: u32
          Convert: null
          Checks: []
        Arguments:
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: user_data
            Type: *UserData
            Value: null
            Mode: null
          - Name: timer
            Type: SDL_TimerID
            Value: null
            Mode: null
          - Name: nanosecond_interval
            Type: u64
            Value: null
            Mode: null
    Enums: []
    Errors: []
    Values:
      - SdlName: SDL_TimerID
        ZigName: Timer
        Type: $SDL.SDL_TimerID
        IsOpaque: false
        Comment: "For triggering timed callbacks."
        Presets: []
        Functions:
          - SdlName: SDL_AddTimer
            ZigName: initMilliseconds
            Comment: "Call a callback function at a future time in milliseconds."
            Return:
              Sdl: SDL_TimerID
              Zig: "!Timer"
              Convert: null
              Checks:
                - Mode: ReturnNullIfEq
                  ComparisonVal: 0
            Arguments:
              - Name: UserData
                Type: type
                Value: null
                Mode: generic
              - Name: interval_milliseconds
                Type: u32
                Value: null
                Mode: null
              - Name: callback_data
                Type: SDL_TimerCallback
                Value: null
                Mode: callback
          - SdlName: SDL_AddTimerNS
            ZigName: initNanoseconds
            Comment: "Call a callback function at a future time in nanoseconds."
            Return:
              Sdl: SDL_TimerID
              Zig: "!Timer"
              Convert: null
              Checks:
                - Mode: ReturnNullIfEq
                  ComparisonVal: 0
            Arguments:
              - Name: UserData
                Type: type
                Value: null
                Mode: generic
              - Name: interval_nanoseconds
                Type: u64
                Value: null
                Mode: null
              - Name: callback_data
                Type: SDL_NSTimerCallback
                Value: null
                Mode: callback
          - SdlName: SDL_RemoveTimer
            ZigName: deinit
            Comment: "Remove a created timer."
            Return:
              Sdl: bool
              Zig: "!void"
              Convert: null
              Checks:
                - Mode: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_TimerID
                Value: null
                Mode: null
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_SECONDS_TO_NS
        ZigName: secondsToNanoseconds
        Comment: "Convert seconds into nanoseconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: seconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_NS_TO_SECONDS
        ZigName: nanosecondsToSeconds
        Comment: "Convert nanoseconds into seconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: nanoseconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_MS_TO_NS
        ZigName: millisecondsToNanoseconds
        Comment: "Convert millseconds into nanoseconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: millseconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_NS_TO_MS
        ZigName: nanosecondsToMilliseconds
        Comment: "Convert nanoseconds into millseconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: nanoseconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_US_TO_NS
        ZigName: microsecondsToNanoseconds
        Comment: "Convert microseconds into nanoseconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: microseconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_NS_TO_US
        ZigName: nanosecondsToMicroseconds
        Comment: "Convert nanoseconds into microseconds."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments:
          - Name: nanoseconds
            Type: u64
            Value: null
            Mode: null
      - SdlName: SDL_GetTicks
        ZigName: getMillisecondsSinceInit
        Comment: "Get the number of milliseconds since SDL library initialization."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetTicksNS
        ZigName: getNanosecondsSinceInit
        Comment: "Get the number of nanoseconds since SDL library initialization."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetPerformanceCounter
        ZigName: getPerformanceCounter
        Comment: "Get the current value of the high resolution counter."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetPerformanceFrequency
        ZigName: getPerformanceFrequency
        Comment: "Get the count per second of the high resolution counter."
        Return:
          Sdl: u64
          Zig: u64
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_Delay
        ZigName: delayMilliseconds
        Comment: "Wait a specified number of milliseconds before returning."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: milliseconds
            Type: u32
            Value: null
            Mode: null
      - SdlName: SDL_DelayNS
        ZigName: delayNanoseconds
        Comment: "Wait a specified number of nanoseconds before returning."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: nanoseconds
            Type: u64
            Value: null
            Mode: null
    CustomFunctions: []
    Typedefs:
      - SdlName: SDL_MS_PER_SECOND
        ZigName: milliseconds_per_second
        Comment: null
      - SdlName: SDL_US_PER_SECOND
        ZigName: microseconds_per_second
        Comment: null
      - SdlName: SDL_NS_PER_SECOND
        ZigName: nanoseconds_per_second
        Comment: null
      - SdlName: SDL_NS_PER_MS
        ZigName: nanoseconds_per_millisecond
        Comment: null
      - SdlName: SDL_NS_PER_US
        ZigName: nanoseconds_per_microsecond
        Comment: null
    Tests: []
  - Name: version
    Callbacks: []
    Enums: []
    Errors: []
    Values:
      - SdlName: SDL_Version
        ZigName: Version
        Type: c_int
        IsOpaque: false
        Comment: "SDL version information."
        Presets:
          - ZigValue: compiled_against
            SdlValue: $SDL.SDL_VERSION
            Comment: "SDL version compiled against."
        Functions:
          - SdlName: SDL_VERSIONNUM
            ZigName: make
            Comment: "Create an SDL version number."
            Return:
              Sdl: SDL_Version
              Zig: Version
              Convert: null
              Checks: []
            Arguments:
              - Name: major
                Type: u32
                Value: null
                Mode: null
              - Name: minor
                Type: u32
                Value: null
                Mode: null
              - Name: micro
                Type: u32
                Value: null
                Mode: null
          - SdlName: SDL_VERSIONNUM_MAJOR
            ZigName: getMajor
            Comment: "Major version number."
            Return:
              Sdl: int
              Zig: u32
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Version
                Value: null
                Mode: null
          - SdlName: SDL_VERSIONNUM_MINOR
            ZigName: getMinor
            Comment: "Minor version number."
            Return:
              Sdl: int
              Zig: u32
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Version
                Value: null
                Mode: null
          - SdlName: SDL_VERSIONNUM_MICRO
            ZigName: getMicro
            Comment: "Micro version number."
            Return:
              Sdl: int
              Zig: u32
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_Version
                Value: null
                Mode: null
          - SdlName: SDL_VERSION_ATLEAST
            ZigName: atLeast
            Comment: "Check if the SDL version is at least greater than the given one."
            Return:
              Sdl: bool
              Zig: bool
              Convert: null
              Checks: []
            Arguments:
              - Name: major
                Type: u32
                Value: null
                Mode: null
              - Name: minor
                Type: u32
                Value: null
                Mode: null
              - Name: micro
                Type: u32
                Value: null
                Mode: null
          - SdlName: SDL_GetVersion
            ZigName: get
            Comment: "Get the version of SDL that is linked against your program. Possibly different than the compiled against version."
            Return:
              Sdl: SDL_Version
              Zig: Version
              Convert: null
              Checks: []
            Arguments: []
          - SdlName: SDL_GetRevision
            ZigName: getRevision
            Comment: "Get the code revision of SDL that is linked against your program."
            Return:
              Sdl: string
              Zig: "?[]const u8"
              Convert: null
              Checks:
                - Method: ReturnNullIfEqStr
                  ComparisonVal: |
                    ""
            Arguments: []
        CustomFunctions: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Typedefs: []
    Tests: []
Files:
  - Name: rect
    Exports:
      - SdlName: SDL_FPoint
        ZigName: FPoint
        Kind: struct
        Extra: []
      - SdlName: SDL_Point
        ZigName: IPoint
        Kind: struct
        Extra: []
      - SdlName: SDL_FRect
        ZigName: FRect
        Kind: struct
        Extra: []
      - SdlName: SDL_Rect
        ZigName: IRect
        Kind: struct
        Extra: []
  - Name: io_stream
    Exports:
      - SdlName: SDL_IOStream
        ZigName: Stream
        Kind: value
        Extra:
          - Arg: true
