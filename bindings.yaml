Subsystems:
  - Name: blend
    Callbacks: []
    Enums:
      - SdlType: SDL_BlendFactor
        ZigType: Factor
        Comment: "Factor to use for a blend operation."
        Values:
          - ZigValue: Zero
            SdlValue: SDL_BLENDFACTOR_ZERO
            Comment: "(0, 0, 0, 0)"
          - ZigValue: One
            SdlValue: SDL_BLENDFACTOR_ONE
            Comment: "(1, 1, 1, 1)"
          - ZigValue: SrcColor
            SdlValue: SDL_BLENDFACTOR_SRC_COLOR
            Comment: "(r, g, b, a)"
          - ZigValue: OneMinusSrcColor
            SdlValue: SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR
            Comment: "(1-r, 1-g, 1-b, 1-a)"
          - ZigValue: SrcAlpha
            SdlValue: SDL_BLENDFACTOR_SRC_ALPHA
            Comment: "(a, a, a, a)"
          - ZigValue: OneMinusSrcAlpha
            SdlValue: SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
            Comment: "(1-a, 1-a, 1-a, 1-a)"
          - ZigValue: DstColor
            SdlValue: SDL_BLENDFACTOR_DST_COLOR
            Comment: "(r, g, b, a)"
          - ZigValue: OneMinusDstColor
            SdlValue: SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR
            Comment: "(1-r, 1-g, 1-b, 1-a)"
          - ZigValue: DstAlpha
            SdlValue: SDL_BLENDFACTOR_DST_ALPHA
            Comment: "(a, a, a, a)"
          - ZigValue: OneMinusDstAlpha
            SdlValue: SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA
            Comment: "(1-a, 1-a, 1-a, 1-a)"
      - SdlType: SDL_BlendOperation
        ZigType: Operation
        Comment: "Blend operation."
        Values:
          - ZigValue: Add
            SdlValue: SDL_BLENDOPERATION_ADD
            Comment: "Dst + Src."
          - ZigValue: Sub
            SdlValue: SDL_BLENDOPERATION_SUBTRACT
            Comment: "Src - Dst."
          - ZigValue: RevSub
            SdlValue: SDL_BLENDOPERATION_REV_SUBTRACT
            Comment: "Dst - Src."
          - ZigValue: Min
            SdlValue: SDL_BLENDOPERATION_MINIMUM
            Comment: "Min(Dst, Src)."
          - ZigValue: Max
            SdlValue: SDL_BLENDOPERATION_MAXIMUM
            Comment: "Max(Dst, Src)."
    Errors: []
    Values:
      - Type: SDL_BlendMode
        Name: Mode
        IsOpaque: false
        Comment: "Mode for blending colors."
        Presets:
          - ZigValue: None
            SdlValue: $SDL.SDL_BLENDMODE_NONE
            Comment: "Dst = Src."
          - ZigValue: Blend
            SdlValue: $SDL.SDL_BLENDMODE_BLEND
            Comment: "DstRGB = (SrcRGB * SrcA) + (DstRGB * (1-SrcA)), DstA = SrcA + (DstA * (1-SrcA))."
          - ZigValue: BlendPremultiplied
            SdlValue: $SDL.SDL_BLENDMODE_BLEND_PREMULTIPLIED
            Comment: "DstRGBA = SrcRGBA + (DstRGBA * (1-SrcA))."
          - ZigValue: Add
            SdlValue: $SDL.SDL_BLENDMODE_ADD
            Comment: "DstRGB = (SrcRGB * SrcA) + DstRGB, DstA = DstA."
          - ZigValue: AddPremultiplied
            SdlValue: $SDL.SDL_BLENDMODE_ADD_PREMULTIPLIED
            Comment: "DstRGB = SrcRGB + DstRGB, DstA = DstA."
          - ZigValue: Mod
            SdlValue: $SDL.SDL_BLENDMODE_MOD
            Comment: "DstRGB = SrcRGB * DstRGB, DstA = DstA."
          - ZigValue: Mul
            SdlValue: $SDL.SDL_BLENDMODE_MUL
            Comment: "DstRGB = (SrcRGB * DstRGB) + (DstRGB * (1-SrcA)), DstA = DstA."
        Functions:
          - SdlName: SDL_ComposeCustomBlendMode
            ZigName: custom
            Comment: "Create a custom blend mode. The source is the pixels we are writing to the destination render target."
            Return:
              Sdl: SDL_BlendMode
              Zig: "?Mode"
              Convert: null
              Checks:
                - Method: ReturnNullIfEq
                  ComparisonVal: $SDL.SDL_BLENDMODE_INVALID
            Arguments:
              - Name: srcRgb
                Type: SDL_BlendFactor
                Value: null
              - Name: dstRgb
                Type: SDL_BlendFactor
                Value: null
              - Name: rgbOp
                Type: SDL_BlendOperation
                Value: null
              - Name: srcAlpha
                Type: SDL_BlendFactor
                Value: null
              - Name: dstAlpha
                Type: SDL_BlendFactor
                Value: null
              - Name: alphaOp
                Type: SDL_BlendOperation
                Value: null
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Tests: []
  - Name: clipboard
    Callbacks: []
#    Callbacks:
#      - SdlName: SDL_ClipboardDataCallback
#        ZigName: DataCallback
#        Comment: "Called when data for a given MIME type is request by the OS."
#        Return:
#          Sdl: "*void"
#          Zig: "[]const u8"
#          Convert: ret.ptr
#          Checks:
#            - Method: Custom
#              ComparisonVal: size.* = ret.len;
#        Arguments:
#          - Name: UserData
#            Type: type
#            Value: null
#          - Name: user_data
#            Type: *UserData
#            Value: null
#          - Name: mime_type
#            Type: ?zigstring
#            Value: null
#          - Name: size
#            Type: *usize
#            Value: *size
#      - SdlName: SDL_ClipboardCleanupCallback
#        ZigName: CleanupCallback
#        Comment: "Callback function that will be called when the clipboard is cleared, or new data is set."
#        Return:
#          Sdl: void
#          Zig: void
#          Convert: null
#          Checks: []
#        Arguments:
#          - Name: UserData
#            Type: type
#            Value: null
#          - Name: user_data
#            Type: *UserData
#            Value: null
    Enums: []
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_SetClipboardText
        ZigName: setText
        Comment: "Put UTF-8 text into the clipboard."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: text
            Type: string
            Value: null
      - SdlName: SDL_GetClipboardText
        ZigName: getText
        Comment: "Get UTF-8 text from the clipboard. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: string
          Zig: ![]const u8
          Convert: null
          Checks:
            - Method: ReturnErrIfEqStr
              ComparisonVal: """"
        Arguments: []
      - SdlName: SDL_HasClipboardText
        ZigName: hasText
        Comment: "Query whether the clipboard exists and contains a non-empty text string."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_SetPrimarySelectionText
        ZigName: setPrimarySelectionText
        Comment: "Put UTF-8 text into the primary selection."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: text
            Type: string
            Value: null
      - SdlName: SDL_GetPrimarySelectionText
        ZigName: getPrimarySelectionText
        Comment: "Get UTF-8 text from the primary selection. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: string
          Zig: ![]const u8
          Convert: null
          Checks:
            - Method: ReturnErrIfEqStr
              ComparisonVal: """"
        Arguments: []
      - SdlName: SDL_HasPrimarySelectionText
        ZigName: hasPrimarySelectionText
        Comment: "Query whether the primary selection exists and contains a non-empty text string."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
#      - SdlName: SDL_SetClipboardData
#        ZigName: setData
#        Comment: "Tell the system that data is available for the given MIME types. When requested, the set and clear callbacks will be called."
#        Return:
#          Sdl: bool
#          Zig: !void
#          Convert: null
#          Checks:
#            - Method: ReturnErrIfEq
#              ComparisonVal: false
#          Arguments:
#              - Name: UserData
#                Type: type
#                Value: null
#              - Name: callback
#                Type: SDL_ClipboardDataCallback
#                Value: null
#              - Name: cleanup
#                Type: SDL_ClipboardCleanupCallback
#                Value: null
#              - Name: user_data
#                Type: *UserData
#                Value: null
#              - Name: mime_types
#                Type: "[]string"
#                Value: null
#              - Name: num_mime_types
#                Type: usize
#                Value: mime_types.len
      - SdlName: SDL_ClearClipboardData
        ZigName: clearData
        Comment: "Clear the clipboard data."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments: []
      - SdlName: SDL_GetClipboardData
        ZigName: getData
        Comment: "Get the data from clipboard for a given mime type. Note that `sdl3.free` should be called on the return value."
        Return:
          Sdl: "?*anyopaque"
          Zig: ![]const u8
          Convert: .{ .ptr = @ptrCast(ret.?), .len = @intCast(size) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: mime_type
            Type: string
            Value: null
          - Name: size
            Type: usize
            Value: &size
      - SdlName: SDL_HasClipboardData
        ZigName: hasData
        Comment: "Query whether there is data in the clipboard for the provided mime type."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: mime_type
            Type: string
            Value: null
      - SdlName: SDL_GetClipboardMimeTypes
        ZigName: getMimeTypes
        Comment: "Retrieve the list of mime types available in the clipboard. Result needs to be freed with `sdl3.free`."
        Return:
          Sdl: "[]string"
          Zig: "[]const [:0]const u8"
          Convert: .{ .ptr = std.span(ret), .len = @intCast(num_mime_types) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: num_mime_types
            Type: usize
            Value: &num_mime_types
    CustomFunctions:
      - Code: |
          /// Create user data for the set clipboard data callback function.
          pub fn SetDataUserData(comptime UserData: type) type {
              return struct {
                  user_data: *UserData,
                  callback: *const fn (
                      user_data: *UserData,
                      mime_type: ?[]const u8,
                  ) []const u8,
                  cleanup: *const fn (
                      user_data: *UserData,
                  ) anyerror!void,
              };
          }
      - Code: |
          /// Callback for setting data wrapper.
          fn dataCallback(
              user_data: ?*anyopaque,
              mime_type: [*c]const u8,
              size: *usize,
          ) callconv(.C) []const u8 {
              const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
              const ret = cb_data.callback(cb_data.user_data, if (mime_type == null) null else std.mem.span(mime_type));
              size.* = ret.len;
              return ret.ptr;
          }
      - Code: |
          /// Callback for cleaning data wrapper.
          fn cleanupCallback(
              user_data: ?*anyopaque,
          ) callconv(.C) bool {
              const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
              cb_data.cleanup(cb_data.user_data) catch return false;
              return true;
          }
      - Code: |
          /// Set data for the given mime types.
          pub fn setData(
              comptime UserData: type,
              user_data: *SetDataUserData(UserData),
              mime_types: []const [:0]const u8,
          ) !void {
              const ret = C.SDL_SetClipboardData(
                  dataCallback,
                  cleanupCallback,
                  user_data,
                  @ptrCast(mime_types.ptr),
                  mime_types.len,
              );
              if (!ret)
                  return error.SDLError;
          }
    Tests: []
  - Name: errors
    Callbacks: []
    Enums: []
    Errors:
      - Name: Error
        Comment: "An SDL error."
        Values:
          - SDLError
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
      - SdlName: SDL_SetError
        ZigName: set
        Comment: "Set the current SDL error."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: fmt
            Type: string
            Value: ""%s""
          - Name: err
            Type: stringptr
            Value: null
      - SdlName: SDL_OutOfMemory
        ZigName: signalOutOfMemory
        Comment: "Set an error indicating that memory allocation failed."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetError
        ZigName: get
        Comment: "Get the last error message if it exists. Note that lack of an error does not indicate succees, and an error being present does not indicate failure."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Method: ReturnNullIfEqStr
              ComparisonVal: """"
        Arguments: []
      - SdlName: SDL_ClearError
        ZigName: clear
        Comment: "Clear the last error message."
        Return:
          Sdl: bool
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
    CustomFunctions: []
    Tests:
      - Name: Error
        Comment: "Make sure error getting and setting works properly."
        Code: |
          clear();
          try std.testing.expect(get() == null);
          signalOutOfMemory();
          try std.testing.expect(std.mem.eql(u8, get().?, "Out of memory"));
          set("Hello world");
          try std.testing.expect(std.mem.eql(u8, get().?, "Hello world"));
          clear();
          try std.testing.expect(get() == null);;
  - Name: init
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags:
      - Name: Flags
        Type: SDL_InitFlags
        Comment: "Used for initializing a subsystem."
        Values:
          - Name: audio
            Type: SDL_INIT_AUDIO
            Value: false
            Comment: null
          - Name: video
            Type: SDL_INIT_VIDEO
            Value: false
            Comment: null
          - Name: joystick
            Type: SDL_INIT_JOYSTICK
            Value: false
            Comment: null
          - Name: haptic
            Type: SDL_INIT_HAPTIC
            Value: false
            Comment: null
          - Name: gamepad
            Type: SDL_INIT_GAMEPAD
            Value: false
            Comment: null
          - Name: events
            Type: SDL_INIT_EVENTS
            Value: false
            Comment: null
          - Name: sensor
            Type: SDL_INIT_SENSOR
            Value: false
            Comment: null
          - Name: camera
            Type: SDL_INIT_CAMERA
            Value: false
            Comment: null
        Presets:
          - Name: everything
            Comment: "Initializes all subsystems."
            Values:
              - Name: audio
                Value: true
              - Name: video
                Value: true
              - Name: joystick
                Value: true
              - Name: haptic
                Value: true
              - Name: gamepad
                Value: true
              - Name: events
                Value: true
              - Name: sensor
                Value: true
              - Name: camera
                Value: true
    StringMap:
      - Name: AppMetadataProperty
        Comment: "An app's metadata property to get or set."
        Values:
          - ZigValue: Name
            SdlValue: SDL_PROP_APP_METADATA_NAME_STRING
            Comment: null
          - ZigValue: Version
            SdlValue: SDL_PROP_APP_METADATA_VERSION_STRING
            Comment: null
          - ZigValue: Identifier
            SdlValue: SDL_PROP_APP_METADATA_IDENTIFIER_STRING
            Comment: null
          - ZigValue: Creator
            SdlValue: SDL_PROP_APP_METADATA_CREATOR_STRING
            Comment: null
          - ZigValue: Copyright
            SdlValue: SDL_PROP_APP_METADATA_COPYRIGHT_STRING
            Comment: null
          - ZigValue: Url
            SdlValue: SDL_PROP_APP_METADATA_URL_STRING
            Comment: null
          - ZigValue: Type
            SdlValue: SDL_PROP_APP_METADATA_TYPE_STRING
            Comment: null
    Structs: []
    Functions:
      - SdlName: SDL_Init
        ZigName: init
        Comment: "Initialize the SDL systems. Each system is ref-counted so init and quit each one, then call shutdown."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
      - SdlName: SDL_QuitSubSystem
        ZigName: quit
        Comment: "Quit SDL systems. Note that shutdown is still needed after all systems have been quit."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
      - SdlName: SDL_Quit
        ZigName: shutdown
        Comment: "Shutdown SDL. This is needed. Each system is ref-counted so init and quit each one, then call this."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_WasInit
        ZigName: wasInit
        Comment: "Get which given systems have been initialized."
        Return:
          Sdl: SDL_InitFlags
          Zig: Flags
          Convert: null
          Checks: []
        Arguments:
          - Name: flags
            Type: SDL_InitFlags
            Value: null
      - SdlName: SDL_SetAppMetadata
        ZigName: setAppMetadata
        Comment: "Get which given systems have been initialized."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: app_name
            Type: "?string"
            Value: null
          - Name: app_version
            Type: "?string"
            Value: null
          - Name: app_identifier
            Type: "?string"
            Value: null
      - SdlName: SDL_SetAppMetadataProperty
        ZigName: setAppMetadataProperty
        Comment: "Set a metadata property for the app. Note that the value can be null to clear it."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: property
            Type: AppMetadataProperty
            Value: null
          - Name: value
            Type: "?string"
            Value: null
      - SdlName: SDL_GetAppMetadataProperty
        ZigName: getAppMetadataProperty
        Comment: "Get a metadata property for the app."
        Return:
          Sdl: AppMetadataProperty
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: property
            Type: AppMetadataProperty
            Value: null
    CustomFunctions: []
    Tests:
      - Name: Init
        Comment: Ensure initialization and shutdown works as expected. Also app properties for some reason.
        Code: |
            defer shutdown();
            const flags = Flags{
                .video = true,
                .events = true,
                .camera = true,
            };
            try setAppMetadata("SDL3 Test", null, "!Testing");
            try init(flags);
            defer quit(flags);
            try std.testing.expect(std.meta.eql(flags, wasInit(flags)));
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Name).?, "SDL3 Test"));
            try std.testing.expect(getAppMetadataProperty(.Version) == null);
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Identifier).?, "!Testing"));
            try setAppMetadataProperty(.Creator, "Gota7");
            try std.testing.expect(std.mem.eql(u8, getAppMetadataProperty(.Creator).?, "Gota7"));
            try setAppMetadataProperty(.Creator, null);
            try std.testing.expect(getAppMetadataProperty(.Creator) == null);
            try std.testing.expect(getAppMetadataProperty(.Url) == null);;
  - Name: loadso
    Callbacks: []
    Enums: []
    Errors: []
    Values:
      - Type: SDL_SharedObject
        Name: SharedObject
        IsOpaque: true
        Comment: A shared object binary.
        Presets: []
        Functions:
          - SdlName: SDL_LoadObject
            ZigName: load
            Comment: Load a shared object.
            Return:
              Sdl: SDL_SharedObject
              Zig: !SharedObject
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: null
            Arguments:
              - Name: name
                Type: string
                Value: null
          - SdlName: SDL_LoadFunction
            ZigName: loadFunction
            Comment: Get a function pointer to an exported function in the object file.
            Return:
              Sdl: "*void"
              Zig: "?*anyopaque"
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_SharedObject
                Value: null
              - Name: name
                Type: string
                Value: null
          - SdlName: SDL_UnloadObject
            ZigName: unload
            Comment: Unload the shared object.
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_SharedObject
                Value: null
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Tests: []
  - Name: message_box
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags:
      - Name: ButtonFlags
        Type: SDL_MessageBoxButtonFlags
        Comment: "Message box button flags."
        Values:
          - Name: mark_default_with_return_key
            Type: SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
            Value: false
            Comment: null
          - Name: mark_default_with_escape_key
            Type: SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT
            Value: false
            Comment: null
        Presets: []
      - Name: BoxFlags
        Type: SDL_MessageBoxFlags
        Comment: "Message box flags."
        Values:
          - Name: error_dialog
            Type: SDL_MESSAGEBOX_ERROR
            Value: false
            Comment: null
          - Name: warning_dialog
            Type: SDL_MESSAGEBOX_WARNING
            Value: false
            Comment: null
          - Name: information_dialog
            Type: SDL_MESSAGEBOX_INFORMATION
            Value: false
            Comment: null
          - Name: buttons_left_to_right
            Type: SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT
            Value: false
            Comment: null
          - Name: buttons_right_to_left
            Type: SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT
            Value: false
            Comment: null
        Presets: []
    StringMap: []
    Structs:
      - Name: Button
        Type: SDL_MessageBoxButtonData
        Comment: "Message box button."
        Members:
          - ZigName: flags
            SdlName: flags
            Type: SDL_MessageBoxFlags
            Value: null
            Comment: null
          - ZigName: value
            SdlName: buttonID
            Type: int
            Value: null
            Comment: null
          - ZigName: text
            SdlName: text
            Type: string
            Value: null
            Comment: null
        Functions: []
        CustomFunctions: []
      - Name: Color
        Type: SDL_MessageBoxColor
        Comment: Message box color. Simple RGB.
        Members:
          - ZigName: r
            SdlName: r
            Type: u8
            Value: null
            Comment: null
          - ZigName: g
            SdlName: g
            Type: u8
            Value: null
            Comment: null
          - ZigName: b
            SdlName: b
            Type: u8
            Value: null
            Comment: null
        Functions: []
        CustomFunctions:
          - Code: |
              /// Create a color from a hex code.
                  pub fn fromHex(hex_code: *const [6:0]u8) !Color {
                      return .{
                          .r = try std.fmt.parseInt(u8, hex_code[0..2], 16),
                          .g = try std.fmt.parseInt(u8, hex_code[2..4], 16),
                          .b = try std.fmt.parseInt(u8, hex_code[4..6], 16),
                      };
                  }
    Functions: []
    CustomFunctions: []
    Tests: []
  - Name: misc
    Callbacks: []
    Enums: []
    Errors: []
    Values: []
    Flags: []
    StringMap: []
    Structs: []
    Functions:
      - SdlName: SDL_OpenURL
        ZigName: openURL
        Comment: "Open a URL in the browser of the platform. Can also do local files with `file:///path/to/file` if supported."
        Return:
          Sdl: bool
          Zig: !void
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: url
            Type: string
            Value: null
    CustomFunctions: []
    Tests: []
# TODO!!!
  - Name: properties
    Callbacks: []
    Enums:
      - SdlType: SDL_PropertyType
        ZigType: Type
        Comment: "Properties type enum."
        Values:
          - ZigValue: Invalid
            SdlValue: SDL_PROPERTY_TYPE_INVALID
            Comment: null
          - ZigValue: Pointer
            SdlValue: SDL_PROPERTY_TYPE_POINTER
            Comment: null
          - ZigValue: String
            SdlValue: SDL_PROPERTY_TYPE_STRING
            Comment: null
          - ZigValue: Number
            SdlValue: SDL_PROPERTY_TYPE_NUMBER
            Comment: null
          - ZigValue: Float
            SdlValue: SDL_PROPERTY_TYPE_FLOAT
            Comment: null
          - ZigValue: Boolean
            SdlValue: SDL_PROPERTY_TYPE_BOOLEAN
            Comment: null
    Errors: []
    Values:
      Type: SDL_PropertiesID
      Name: Group
      IsOpaque: false
      Comment: "SDL properties group. Properties can be added or removed at runtime."
      Presets: []
      Functions:
          - SdlName: SDL_CopyProperties
            ZigName: copyTo
            Comment: "Copy and replace all properties in destination with ones in this one. Will not copy properties that require cleanup."
            Return:
              Sdl: bool
              Zig: !void
              Convert: null
              Checks:
                - Method: ReturnErrIfEq
                  ComparisonVal: false
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
              - Name: dest
                Type: SDL_PropertiesID
                Value: null
          - SdlName: SDL_DestroyProperties
            ZigName: deinit
            Comment: "Destroy the group of properties."
            Return:
              Sdl: void
              Zig: void
              Convert: null
              Checks: []
            Arguments:
              - Name: self
                Type: SDL_PropertiesID
                Value: null
    Flags: []
    StringMap: []
    Structs: []
    Functions: []
    CustomFunctions: []
    Tests: []