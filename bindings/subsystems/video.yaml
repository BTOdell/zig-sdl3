# TODO: REST OF FLAGS!!!
Name: video
Callbacks: []
Enums:
  - SdlType: SDL_SystemTheme
    ZigType: SystemTheme
    InternalType: c_uint
    Comment: "System theme."
    Values:
      - ZigValue: Light
        SdlValue: $SDL.SDL_SYSTEM_THEME_LIGHT
        Comment: null
      - ZigValue: Dark
        SdlValue: $SDL.SDL_SYSTEM_THEME_DARK
        Comment: null
    Functions: []
  - SdlType: SDL_DisplayOrientation
    ZigType: DisplayOrientation
    InternalType: c_uint
    Comment: "Display orientation values; the way a display is rotated."
    Values:
      - ZigValue: Landscape
        SdlValue: $SDL.SDL_ORIENTATION_LANDSCAPE
        Comment: "The display is in landscape mode, with the right side up, relative to portrait mode."
      - ZigValue: LandscapeFlipped
        SdlValue: $SDL.SDL_ORIENTATION_LANDSCAPE_FLIPPED
        Comment: "The display is in landscape mode, with the left side up, relative to portrait mode."
      - ZigValue: Portrait
        SdlValue: $SDL.SDL_ORIENTATION_PORTRAIT
        Comment: "The display is in portrait mode."
      - ZigValue: PortraitFlipped
        SdlValue: $SDL.SDL_ORIENTATION_PORTRAIT_FLIPPED
        Comment: "The display is in portrait mode, upside down."
    Functions: []
Errors: []
Values:
  - SdlName: SDL_DisplayID
    ZigName: Display
    Type: $SDL.SDL_DisplayID
    IsOpaque: false
    Comment: "A display."
    Presets: []
    Functions:
      - SdlName: SDL_GetPrimaryDisplay
        ZigName: getPrimaryDisplay
        Comment: "Return the primary display."
        Return:
          Sdl: SDL_DisplayID
          Zig: "!Display"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments: []
      - SdlName: SDL_GetDisplayName
        ZigName: getName
        Comment: "Get the name of a display in UTF-8 encoding."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
      - SdlName: SDL_GetDisplayBounds
        ZigName: getBounds
        Comment: "Get the desktop area represented by a display."
        Return:
          Sdl: bool
          Zig: "!rect.IRect"
          Convert: "ret.fromSdl()"
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
          - Name: area
            Type: SDL_Rect
            Value: "&area"
            Mode: out
      - SdlName: SDL_GetDisplayUsableBounds
        ZigName: getUsableBounds
        Comment: "Get the usable desktop area represented by a display, in screen coordinates."
        Return:
          Sdl: bool
          Zig: "!rect.IRect"
          Convert: "ret.fromSdl()"
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
          - Name: area
            Type: SDL_Rect
            Value: "&area"
            Mode: out
      - SdlName: SDL_GetNaturalDisplayOrientation
        ZigName: getNaturalOrientation
        Comment: "Get the orientation of a display when it is unrotated."
        Return:
          Sdl: SDL_DisplayOrientation
          Zig: "?DisplayOrientation"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_ORIENTATION_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
      - SdlName: SDL_GetCurrentDisplayOrientation
        ZigName: getCurrentOrientation
        Comment: "Get the orientation of a display."
        Return:
          Sdl: SDL_DisplayOrientation
          Zig: "?DisplayOrientation"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_ORIENTATION_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
      - SdlName: SDL_GetDisplayContentScale
        ZigName: getContentScale
        Comment: "Get the content scale of a display."
        Return:
          Sdl: f32
          Zig: "!f32"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0.0
        Arguments:
          - Name: self
            Type: SDL_DisplayID
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get a list of currently connected displays.
              pub fn getAll(allocator: std.mem.Allocator) ![]Display {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetDisplays(&count);
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  const converted_ret = try allocator.alloc(Display, @intCast(count));
                  for (0..count) |index| {
                      converted_ret[index].value = ret[index];
                  }
                  return converted_ret;
              }
  - SdlName: SDL_Window
    ZigName: Window
    Type: $SDL.SDL_Window
    IsOpaque: true
    Comment: "Create a window with the specified dimensions and flags."
    Presets: []
    Functions:
      - SdlName: SDL_CreateWindow
        ZigName: init
        Comment: "Create a window with the specified dimensions and flags."
        Return:
          Sdl: SDL_Window
          Zig: "!Window"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: title
            Type: string
            Value: null
            Mode: null
          - Name: width
            Type: u32
            Value: null
            Mode: null
          - Name: height
            Type: u32
            Value: null
            Mode: null
          - Name: flags
            Type: SDL_WindowFlags
            Value: null
            Mode: null
      - SdlName: SDL_GetWindowSurface
        ZigName: getSurface
        Comment: "Get the SDL surface associated with the window."
        Return:
          Sdl: SDL_Surface
          Zig: "!surface.Surface"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_UpdateWindowSurface
        ZigName: updateSurface
        Comment: "Copy the window surface to the screen."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_SetWindowMouseRect
        ZigName: setMouseRect
        Comment: "Confines the cursor to the specified area of a window."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Window
            Value: null
            Mode: null
          - Name: area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_DestroyWindow
        ZigName: deinit
        Comment: "Destroy a window."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Window
            Value: null
            Mode: null
    CustomFunctions: []
Flags:
  - Name: WindowFlags
    Type: SDL_WindowFlags
    Comment: "The flags on a window."
    Values:
      - Name: Fullscreen
        Type: SDL_WINDOW_FULLSCREEN
        Value: false
        Comment: "Window is in fullscreen mode."
      - Name: OpenGL
        Type: SDL_WINDOW_OPENGL
        Value: false
        Comment: "Window usable with OpenGL context."
      - Name: Occluded
        Type: SDL_WINDOW_OCCLUDED
        Value: false
        Comment: "Window is occluded."
      - Name: Hidden
        Type: SDL_WINDOW_HIDDEN
        Value: false
        Comment: "Window is neither mapped onto the desktop nor shown in the taskbar/dock/window list. The `show` function must be called for the window."
      - Name: Borderless
        Type: SDL_WINDOW_BORDERLESS
        Value: false
        Comment: "No window decoration."
    Presets: []
    Functions: []
    CustomFunctions: []
StringMap: []
Structs: []
Functions:
  - SdlName: SDL_GetNumVideoDrivers
    ZigName: getNumDrivers
    Comment: "Get the number of video drivers compiled into SDL."
    Return:
      Sdl: int
      Zig: u31
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_GetVideoDriver
    ZigName: getDriverName
    Comment: "Get the name of a built in video driver."
    Return:
      Sdl: ?string
      Zig: ?[]const u8
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments:
      - Name: index
        Type: u31
        Value: null
        Mode: null
  - SdlName: SDL_GetCurrentVideoDriver
    ZigName: getCurrentDriverName
    Comment: "Get the name of the currently initialized video driver."
    Return:
      Sdl: ?string
      Zig: ?[]const u8
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments: []
  - SdlName: SDL_GetSystemTheme
    ZigName: getSystemTheme
    Comment: "Get the current system theme."
    Return:
      Sdl: SDL_SystemTheme
      Zig: ?SystemTheme
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: $SDL.SDL_SYSTEM_THEME_UNKNOWN
    Arguments: []
CustomFunctions: []
Typedefs: []
Tests: []
