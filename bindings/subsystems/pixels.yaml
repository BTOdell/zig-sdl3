Name: pixels
Callbacks: []
Enums:
  - SdlType: SDL_PixelType
    ZigType: Type
    InternalType: c_uint
    Comment: "Pixel type."
    Values:
      - ZigValue: Index1
        SdlValue: $SDL.SDL_PIXELTYPE_INDEX1
        Comment: null
      - ZigValue: Index2
        SdlValue: $SDL.SDL_PIXELTYPE_INDEX2
        Comment: null
      - ZigValue: Index4
        SdlValue: $SDL.SDL_PIXELTYPE_INDEX4
        Comment: null
      - ZigValue: Index8
        SdlValue: $SDL.SDL_PIXELTYPE_INDEX8
        Comment: null
      - ZigValue: Packed8
        SdlValue: $SDL.SDL_PIXELTYPE_PACKED8
        Comment: null
      - ZigValue: Packed16
        SdlValue: $SDL.SDL_PIXELTYPE_PACKED16
        Comment: null
      - ZigValue: Packed32
        SdlValue: $SDL.SDL_PIXELTYPE_PACKED32
        Comment: null
      - ZigValue: ArrayU8
        SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU8
        Comment: null
      - ZigValue: ArrayU16
        SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU16
        Comment: null
      - ZigValue: ArrayU32
        SdlValue: $SDL.SDL_PIXELTYPE_ARRAYU32
        Comment: null
      - ZigValue: ArrayF16
        SdlValue: $SDL.SDL_PIXELTYPE_ARRAYF16
        Comment: null
      - ZigValue: ArrayF32
        SdlValue: $SDL.SDL_PIXELTYPE_ARRAYF32
        Comment: null
    Functions: []
  - SdlType: SDL_BitmapOrder
    ZigType: IndexOrder
    InternalType: c_uint
    Comment: "Bitmap pixel order, high bit -> low bit."
    Values:
      - ZigValue: None
        SdlValue: $SDL.SDL_BITMAPORDER_NONE
        Comment: null
      - ZigValue: HighToLow
        SdlValue: $SDL.SDL_BITMAPORDER_4321
        Comment: null
      - ZigValue: LowToHigh
        SdlValue: $SDL.SDL_BITMAPORDER_1234
        Comment: null
    Functions: []
  - SdlType: SDL_PackedOrder
    ZigType: PackedOrder
    InternalType: c_uint
    Comment: "Packed component order, high bit -> low bit."
    Values:
      - ZigValue: None
        SdlValue: $SDL.SDL_PACKEDORDER_NONE
        Comment: null
      - ZigValue: Xrgb
        SdlValue: $SDL.SDL_PACKEDORDER_XRGB
        Comment: null
      - ZigValue: Rgbx
        SdlValue: $SDL.SDL_PACKEDORDER_RGBX
        Comment: null
      - ZigValue: Argb
        SdlValue: $SDL.SDL_PACKEDORDER_ARGB
        Comment: null
      - ZigValue: Rgba
        SdlValue: $SDL.SDL_PACKEDORDER_RGBA
        Comment: null
      - ZigValue: Xbgr
        SdlValue: $SDL.SDL_PACKEDORDER_XBGR
        Comment: null
      - ZigValue: Bgrx
        SdlValue: $SDL.SDL_PACKEDORDER_BGRX
        Comment: null
      - ZigValue: Abgr
        SdlValue: $SDL.SDL_PACKEDORDER_ABGR
        Comment: null
      - ZigValue: Bgra
        SdlValue: $SDL.SDL_PACKEDORDER_BGRA
        Comment: null
    Functions: []
  - SdlType: SDL_ArrayOrder
    ZigType: ArrayOrder
    InternalType: c_uint
    Comment: "Array component order, low byte -> high byte."
    Values:
      - ZigValue: None
        SdlValue: $SDL.SDL_ARRAYORDER_NONE
        Comment: null
      - ZigValue: Rgb
        SdlValue: $SDL.SDL_ARRAYORDER_RGB
        Comment: null
      - ZigValue: Rgba
        SdlValue: $SDL.SDL_ARRAYORDER_RGBA
        Comment: null
      - ZigValue: Argb
        SdlValue: $SDL.SDL_ARRAYORDER_ARGB
        Comment: null
      - ZigValue: Bgr
        SdlValue: $SDL.SDL_ARRAYORDER_BGR
        Comment: null
      - ZigValue: Bgra
        SdlValue: $SDL.SDL_ARRAYORDER_BGRA
        Comment: null
      - ZigValue: Abgr
        SdlValue: $SDL.SDL_ARRAYORDER_ABGR
        Comment: null
    Functions: []
  - SdlType: SDL_PackedLayout
    ZigType: Layout
    InternalType: c_uint
    Comment: "Packed component layout."
    Values:
      - ZigValue: None
        SdlValue: $SDL.SDL_PACKEDLAYOUT_NONE
        Comment: null
      - ZigValue: Bit_3_3_2
        SdlValue: $SDL.SDL_PACKEDLAYOUT_332
        Comment: null
      - ZigValue: Bit_4_4_4_4
        SdlValue: $SDL.SDL_PACKEDLAYOUT_4444
        Comment: null
      - ZigValue: Bit_1_5_5_5
        SdlValue: $SDL.SDL_PACKEDLAYOUT_1555
        Comment: null
      - ZigValue: Bit_5_5_5_1
        SdlValue: $SDL.SDL_PACKEDLAYOUT_5551
        Comment: null
      - ZigValue: Bit_5_6_5
        SdlValue: $SDL.SDL_PACKEDLAYOUT_565
        Comment: null
      - ZigValue: Bit_8_8_8_8
        SdlValue: $SDL.SDL_PACKEDLAYOUT_8888
        Comment: null
      - ZigValue: Bit_2_10_10_10
        SdlValue: $SDL.SDL_PACKEDLAYOUT_2101010
        Comment: null
      - ZigValue: Bit_10_10_10_2
        SdlValue: $SDL.SDL_PACKEDLAYOUT_1010102
        Comment: null
    Functions: []
  - SdlType: SDL_ColorType
    ZigType: ColorType
    InternalType: c_uint
    Comment: "Colorspace color type."
    Values:
      - ZigValue: Rgb
        SdlValue: $SDL.SDL_COLOR_TYPE_RGB
        Comment: null
      - ZigValue: Ycbcr
        SdlValue: $SDL.SDL_COLOR_TYPE_YCBCR
        Comment: null
    Functions: []
  - SdlType: SDL_ColorRange
    ZigType: ColorRange
    InternalType: c_uint
    Comment: "Colorspace color range, as described by https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en."
    Values:
      - ZigValue: Limited
        SdlValue: $SDL.SDL_COLOR_RANGE_LIMITED
        Comment: null
      - ZigValue: Full
        SdlValue: $SDL.SDL_COLOR_RANGE_FULL
        Comment: null
    Functions: []
  - SdlType: SDL_ColorPrimaries
    ZigType: ColorPrimaries
    InternalType: c_uint
    Comment: "Colorspace color primaries, as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en."
    Values:
      - ZigValue: BT709
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT709
        Comment: "ITU-R BT.709-6."
      - ZigValue: UNSPECIFIED
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_UNSPECIFIED
        Comment: null
      - ZigValue: BT470M
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT470M
        Comment: "ITU-R BT.470-6 System M."
      - ZigValue: BT470BG
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT470BG
        Comment: "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625."
      - ZigValue: BT601
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT601
        Comment: "ITU-R BT.601-7 525, SMPTE 170M."
      - ZigValue: SMPTE240
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE240
        Comment: "SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601."
      - ZigValue: GENERIC_FILM
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_GENERIC_FILM
        Comment: "Generic film (color filters using Illuminant C)."
      - ZigValue: BT2020
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_BT2020
        Comment: "ITU-R BT.2020-2 / ITU-R BT.2100-0"
      - ZigValue: XYZ
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_XYZ
        Comment: "SMPTE ST 428-1SMPTE ST 428-1."
      - ZigValue: SMPTE431
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE431
        Comment: "SMPTE RP 431-2."
      - ZigValue: SMPTE432
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_SMPTE432
        Comment: "SMPTE EG 432-1 / DCI P3."
      - ZigValue: EBU3213
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_EBU3213
        Comment: "EBU Tech. 3213-E."
      - ZigValue: Custom
        SdlValue: $SDL.SDL_COLOR_PRIMARIES_CUSTOM
        Comment: "null"
    Functions: []
  - SdlType: SDL_TransferCharacteristics
    ZigType: TransferCharacteristics
    InternalType: c_uint
    Comment: "Colorspace transfer characteristics."
    Values:
      - ZigValue: BT709
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT709
        Comment: "Rec. ITU-R BT.709-6 / ITU-R BT1361."
      - ZigValue: Unspecified
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED
        Comment: null
      - ZigValue: Gamma22
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_GAMMA22
        Comment: "ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM."
      - ZigValue: Gamma28
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_GAMMA28
        Comment: "ITU-R BT.470-6 System B, G."
      - ZigValue: BT601
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT601
        Comment: "SMPTE ST 170M / ITU-R BT.601-7 525 or 625."
      - ZigValue: SMPTE240
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SMPTE240
        Comment: "SMPTE ST 240M."
      - ZigValue: Linear
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LINEAR
        Comment: null
      - ZigValue: Log100
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LOG100
        Comment: null
      - ZigValue: Sqrt10
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10
        Comment: null
      - ZigValue: IEC61966
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_IEC61966
        Comment: "IEC 61966-2-4."
      - ZigValue: BT1361
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT1361
        Comment: "ITU-R BT1361 Extended Colour Gamut."
      - ZigValue: Srgb
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SRGB
        Comment: "IEC 61966-2-1 (sRGB or sYCC)."
      - ZigValue: BT2020_10Bit
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT
        Comment: "ITU-R BT2020 for 10-bit system."
      - ZigValue: Bt2020_12Bit
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT
        Comment: "ITU-R BT2020 for 12-bit system."
      - ZigValue: PQ
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_PQ
        Comment: "SMPTE ST 2084 for 10-, 12-, 14- and 16-bit system."
      - ZigValue: SMPTE428
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_SMPTE428
        Comment: "SMPTE ST 428-1."
      - ZigValue: HLG
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_HLG
        Comment: "ARIB STD-B67, known as hybrid log-gamma (HLG)."
      - ZigValue: Custom
        SdlValue: $SDL.SDL_TRANSFER_CHARACTERISTICS_CUSTOM
        Comment: null
    Functions: []
  - SdlType: SDL_MatrixCoefficients
    ZigType: MatrixCoefficients
    InternalType: c_uint
    Comment: "Colorspace matrix coefficients."
    Values:
      - ZigValue: Identity
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_IDENTITY
        Comment: null
      - ZigValue: BT709
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT709
        Comment: "ITU-R BT.709-6."
      - ZigValue: Unspecified
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_UNSPECIFIED
        Comment: null
      - ZigValue: FCC
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_FCC
        Comment: "US FCC Title 47."
      - ZigValue: BT470BG
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT470BG
        Comment: "ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601."
      - ZigValue: BT601
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT601
        Comment: "ITU-R BT.601-7 525."
      - ZigValue: SMPTE240
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_SMPTE240
        Comment: "SMPTE 240M."
      - ZigValue: YCGCO
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_YCGCO
        Comment: null
      - ZigValue: BT2020_NCL
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT2020_NCL
        Comment: "ITU-R BT.2020-2 non-constant luminance."
      - ZigValue: BT2020_CL
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_BT2020_CL
        Comment: "ITU-R BT.2020-2 constant luminance."
      - ZigValue: SMPTE2085
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_SMPTE2085
        Comment: null
      - ZigValue: ChromaDerivedNCL
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL
        Comment: null
      - ZigValue: ChromaDerivedCL
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL
        Comment: null
      - ZigValue: ICTCP
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_ICTCP
        Comment: "ITU-R BT.2100-0 ICTCP."
      - ZigValue: Custom
        SdlValue: $SDL.SDL_MATRIX_COEFFICIENTS_CUSTOM
        Comment: null
    Functions: []
  - SdlType: SDL_ChromaLocation
    ZigType: ChromaLocation
    InternalType: c_uint
    Comment: "Colorspace chroma sample location."
    Values:
      - ZigValue: Left
        SdlValue: $SDL.SDL_CHROMA_LOCATION_LEFT
        Comment: "In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically."
      - ZigValue: Center
        SdlValue: $SDL.SDL_CHROMA_LOCATION_CENTER
        Comment: "In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel."
      - ZigValue: TopLeft
        SdlValue: $SDL.SDL_CHROMA_LOCATION_TOPLEFT
        Comment: "In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (co-sited, co-located)."
    Functions: []
Errors: []
Values:
  - SdlName: SDL_PixelFormat
    ZigName: Format
    Type: c_uint
    IsOpaque: false
    Comment: "Pixel format."
    Presets:
      - ZigValue: Index_1_lsb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX1LSB
        Comment: null
      - ZigValue: index_1_msb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX1MSB
        Comment: null
      - ZigValue: index_2_lsb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX2LSB
        Comment: null
      - ZigValue: index_2_msb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX2MSB
        Comment: null
      - ZigValue: index_4_lsb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX4LSB
        Comment: null
      - ZigValue: index_4_msb
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX4MSB
        Comment: null
      - ZigValue: index_8
        SdlValue: $SDL.SDL_PIXELFORMAT_INDEX8
        Comment: null
      - ZigValue: packed_rgb_3_3_2
        SdlValue: $SDL.SDL_PIXELFORMAT_RGB332
        Comment: null
      - ZigValue: packed_xrgb_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_XRGB4444
        Comment: null
      - ZigValue: packed_xbgr_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_XBGR4444
        Comment: null
      - ZigValue: packed_xrgb_1_5_5_5
        SdlValue: $SDL.SDL_PIXELFORMAT_XRGB1555
        Comment: null
      - ZigValue: packed_xbgr_1_5_5_5
        SdlValue: $SDL.SDL_PIXELFORMAT_XBGR1555
        Comment: null
      - ZigValue: packed_argb_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB4444
        Comment: null
      - ZigValue: packed_rgba_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA4444
        Comment: null
      - ZigValue: packed_abgr_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR4444
        Comment: null
      - ZigValue: packed_bgra_4_4_4_4
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA4444
        Comment: null
      - ZigValue: packed_argb_1_5_5_5
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB1555
        Comment: null
      - ZigValue: packed_rgba_5_5_5_1
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA5551
        Comment: null
      - ZigValue: packed_abgr_1_5_5_5
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR1555
        Comment: null
      - ZigValue: packed_bgra_5_5_5_1
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA5551
        Comment: null
      - ZigValue: packed_rgb_5_6_5
        SdlValue: $SDL.SDL_PIXELFORMAT_RGB565
        Comment: null
      - ZigValue: packed_bgr_5_6_5
        SdlValue: $SDL.SDL_PIXELFORMAT_BGR565
        Comment: null
      - ZigValue: arr_rgb_24
        SdlValue: $SDL.SDL_PIXELFORMAT_RGB24
        Comment: null
      - ZigValue: arr_bgr_24
        SdlValue: $SDL.SDL_PIXELFORMAT_BGR24
        Comment: null
      - ZigValue: packed_xrgb_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_XRGB8888
        Comment: null
      - ZigValue: packed_rgbx_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBX8888
        Comment: null
      - ZigValue: packed_xbgr_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_XBGR8888
        Comment: null
      - ZigValue: packed_bgrx_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRX8888
        Comment: null
      - ZigValue: packed_argb_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB8888
        Comment: null
      - ZigValue: packed_rgba_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA8888
        Comment: null
      - ZigValue: packed_abgr_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR8888
        Comment: null
      - ZigValue: packed_bgra_8_8_8_8
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA8888
        Comment: null
      - ZigValue: packed_xrgb_2_10_10_10
        SdlValue: $SDL.SDL_PIXELFORMAT_XRGB2101010
        Comment: null
      - ZigValue: packed_xbgr_2_10_10_10
        SdlValue: $SDL.SDL_PIXELFORMAT_XBGR2101010
        Comment: null
      - ZigValue: packed_argb_2_10_10_10
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB2101010
        Comment: null
      - ZigValue: packed_abgr_2_10_10_10
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR2101010
        Comment: null
      - ZigValue: array_rgb_48
        SdlValue: $SDL.SDL_PIXELFORMAT_RGB48
        Comment: null
      - ZigValue: array_bgr_48
        SdlValue: $SDL.SDL_PIXELFORMAT_BGR48
        Comment: null
      - ZigValue: array_rgba_64
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA64
        Comment: null
      - ZigValue: array_argb_64
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB64
        Comment: null
      - ZigValue: array_bgra_64
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA64
        Comment: null
      - ZigValue: array_abgr_64
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR64
        Comment: null
      - ZigValue: array_rgb_48_float
        SdlValue: $SDL.SDL_PIXELFORMAT_RGB48_FLOAT
        Comment: null
      - ZigValue: array_bgr_48_float
        SdlValue: $SDL.SDL_PIXELFORMAT_BGR48_FLOAT
        Comment: null
      - ZigValue: array_rgba_64_float
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA64_FLOAT
        Comment: null
      - ZigValue: array_argb_64_float
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB64_FLOAT
        Comment: null
      - ZigValue: array_bgra_64_float
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA64_FLOAT
        Comment: null
      - ZigValue: array_abgr_64_float
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR64_FLOAT
        Comment: null
      - ZigValue: fourcc_yv12
        SdlValue: $SDL.SDL_PIXELFORMAT_YV12
        Comment: null
      - ZigValue: fourcc_iyuv
        SdlValue: $SDL.SDL_PIXELFORMAT_IYUV
        Comment: null
      - ZigValue: fourcc_yuy2
        SdlValue: $SDL.SDL_PIXELFORMAT_YUY2
        Comment: null
      - ZigValue: fourcc_uyvy
        SdlValue: $SDL.SDL_PIXELFORMAT_UYVY
        Comment: null
      - ZigValue: fourcc_yvyu
        SdlValue: $SDL.SDL_PIXELFORMAT_YVYU
        Comment: null
      - ZigValue: fourcc_nv12
        SdlValue: $SDL.SDL_PIXELFORMAT_NV12
        Comment: null
      - ZigValue: fourcc_nv21
        SdlValue: $SDL.SDL_PIXELFORMAT_NV21
        Comment: null
      - ZigValue: fourcc_p010
        SdlValue: $SDL.SDL_PIXELFORMAT_P010
        Comment: null
      - ZigValue: fourcc_oes
        SdlValue: $SDL.SDL_PIXELFORMAT_EXTERNAL_OES
        Comment: null
      - ZigValue: array_rgba_32
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBA32
        Comment: null
      - ZigValue: array_argb_32
        SdlValue: $SDL.SDL_PIXELFORMAT_ARGB32
        Comment: null
      - ZigValue: array_bgra_32
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRA32
        Comment: null
      - ZigValue: array_abgr_32
        SdlValue: $SDL.SDL_PIXELFORMAT_ABGR32
        Comment: null
      - ZigValue: array_rgbx_32
        SdlValue: $SDL.SDL_PIXELFORMAT_RGBX32
        Comment: null
      - ZigValue: array_xrgb_32
        SdlValue: $SDL.SDL_PIXELFORMAT_XRGB32
        Comment: null
      - ZigValue: array_bgrx_32
        SdlValue: $SDL.SDL_PIXELFORMAT_BGRX32
        Comment: null
      - ZigValue: array_xbgr_32
        SdlValue: $SDL.SDL_PIXELFORMAT_XBGR32
        Comment: null
    Functions:
      - SdlName: SDL_DEFINE_PIXELFOURCC
        ZigName: define4CC
        Comment: |
          Define a format using 4 characters (Ex: YV12).
        Return:
          Sdl: SDL_PixelFormat
          Zig: Format
          Convert: null
          Checks: []
        Arguments:
          - Name: a
            Type: u8
            Value: null
            Mode: null
          - Name: b
            Type: u8
            Value: null
            Mode: null
          - Name: c
            Type: u8
            Value: null
            Mode: null
          - Name: d
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_DEFINE_PIXELFORMAT
        ZigName: define
        Comment: "Define a pixel format."
        Return:
          Sdl: SDL_PixelFormat
          Zig: Format
          Convert: null
          Checks: []
        Arguments:
          - Name: pixel_type
            Type: SDL_PixelType
            Value: null
            Mode: null
          - Name: order
            Type: OrderType(pixel_type)
            Value: "@intFromEnum(order)"
            Mode: verbatim
          - Name: layout
            Type: SDL_PackedLayout
            Value: null
            Mode: null
          - Name: bits
            Type: u8
            Value: null
            Mode: null
          - Name: bytes
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_PIXELFLAG
        ZigName: getFlag
        Comment: "If format was created by `define` rather than `define4CC`."
        Return:
          Sdl: int
          Zig: bool
          Convert: ret != 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_PIXELTYPE
        ZigName: getType
        Comment: "Get the type component of the format."
        Return:
          Sdl: SDL_PixelType
          Zig: ?Type
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_PIXELTYPE_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_PIXELORDER
        ZigName: getOrder
        Comment: "Get the order component of the format."
        Return:
          Sdl: int
          Zig: c_int
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_PIXELORDER
        ZigName: getOrderTyped
        Comment: "Get the typed order component of the format. Do not run this on formats with an invalid type!"
        Return:
          Sdl: int
          Zig: OrderType(self.getType().?)
          Convert: "@enumFromInt(ret)"
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_PACKEDLAYOUT
        ZigName: getLayout
        Comment: "Get the layout component of the format."
        Return:
          Sdl: SDL_PackedLayout
          Zig: Layout
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_BITSPERPIXEL
        ZigName: getBitsPerPixel
        Comment: "Get the bits per pixel of the format."
        Return:
          Sdl: u8
          Zig: u8
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_BYTESPERPIXEL
        ZigName: getBytesPerPixel
        Comment: "Get the bytes per pixel of the format."
        Return:
          Sdl: u8
          Zig: u8
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_INDEXED
        ZigName: isIndexed
        Comment: "If the format is indexed."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_PACKED
        ZigName: isPacked
        Comment: "If the format is packed."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_ARRAY
        ZigName: isArray
        Comment: "If the format is array."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_ALPHA
        ZigName: hasAlpha
        Comment: "If the format has alpha."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_10BIT
        ZigName: is10Bit
        Comment: "If the format is 10-bit."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_FLOAT
        ZigName: isFloat
        Comment: "If the format is floating point."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_ISPIXELFORMAT_FOURCC
        ZigName: is4CC
        Comment: "If the format is 4CC."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_GetPixelFormatName
        ZigName: getName
        Comment: "Get the human readable name of a pixel format."
        Return:
          Sdl: string
          Zig: ?[]const u8
          Convert: null
          Checks:
            - Method: ReturnNullIfEqStr
              ComparisonVal: |
                "SDL_PIXELFORMAT_UNKNOWN"
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
      - SdlName: SDL_GetMasksForPixelFormat
        ZigName: getMasks
        Comment: "Convert one of the enumerated pixel formats to a bpp value and RGBA masks."
        Return:
          Sdl: bool
          Zig: |
            !struct { bpp: u8, r_mask: u32, g_mask: u32, b_mask: u32, a_mask: u32 }
          Convert: .{ .bpp = @intCast(bpp), .r_mask = r_mask, .g_mask = g_mask, .b_mask = b_mask, .a_mask = a_mask }
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
          - Name: bpp
            Type: c_int
            Value: &bpp
            Mode: out
          - Name: r_mask
            Type: u32
            Value: &r_mask
            Mode: out
          - Name: g_mask
            Type: u32
            Value: &g_mask
            Mode: out
          - Name: b_mask
            Type: u32
            Value: &b_mask
            Mode: out
          - Name: a_mask
            Type: u32
            Value: &a_mask
            Mode: out
      - SdlName: SDL_GetPixelFormatForMasks
        ZigName: fromMasks
        Comment: "Convert a bpp value and RGBA masks to an enumerated pixel format."
        Return:
          Sdl: SDL_PixelFormat
          Zig: ?Format
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_PIXELFORMAT_UNKNOWN
        Arguments:
          - Name: bpp
            Type: u8
            Value: "@intCast(bpp)"
            Mode: null
          - Name: r_mask
            Type: u32
            Value: null
            Mode: null
          - Name: g_mask
            Type: u32
            Value: null
            Mode: null
          - Name: b_mask
            Type: u32
            Value: null
            Mode: null
          - Name: a_mask
            Type: u32
            Value: null
            Mode: null
      - SdlName: SDL_GetPixelFormatDetails
        ZigName: getDetails
        Comment: "Create an SDL_PixelFormatDetails structure corresponding to a pixel format."
        Return:
          Sdl: SDL_PixelFormatDetails
          Zig: "!FormatDetails"
          Convert: FormatDetails.fromSdl(ret.*)
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_PixelFormat
            Value: null
            Mode: null
    CustomFunctions: []
  - SdlName: SDL_Palette
    ZigName: Palette
    Type: *$SDL.SDL_Palette
    IsOpaque: false
    Comment: "A set of indexed colors representing a palette."
    Presets: []
    Functions:
      - SdlName: SDL_CreatePalette
        ZigName: init
        Comment: "Create a palette structure with the specified number of color entries."
        Return:
          Sdl: *SDL_Palette
          Zig: "!Palette"
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: num_colors
            Type: u32
            Value: "@intCast(num_colors)"
            Mode: null
      - SdlName: SDL_SetPaletteColors
        ZigName: setColors
        Comment: "Set a range of colors in a palette."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: *SDL_Palette
            Value: self.value
            Mode: null
          - Name: colors
            Type: "[]const Color"
            Value: colors.ptr
            Mode: verbatim
          - Name: first_color
            Type: usize
            Value: null
            Mode: null
          - Name: num_colors
            Type: null
            Value: "@intCast(colors.len)"
            Mode: null
      - SdlName: SDL_DestroyPalette
        ZigName: deinit
        Comment: "Free a palette created earlier."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: *SDL_Palette
            Value: self.value
            Mode: null
    CustomFunctions: []
  - SdlName: SDL_Colorspace
    ZigName: Colorspace
    Type: u32
    IsOpaque: false
    Comment: "Colorspace definitions."
    Presets:
      - ZigValue: Srgb
        SdlValue: $SDL.SDL_COLORSPACE_SRGB
        Comment: "sRGB is a gamma corrected colorspace, and the default colorspace for SDL rendering and 8-bit RGB surfaces."
      - ZigValue: Linear
        SdlValue: $SDL.SDL_COLORSPACE_SRGB_LINEAR
        Comment: "This is a linear colorspace and the default colorspace for floating point surfaces. On Windows this is the scRGB colorspace, and on Apple platforms this is kCGColorSpaceExtendedLinearSRGB for EDR content."
      - ZigValue: Hdr10
        SdlValue: $SDL.SDL_COLORSPACE_HDR10
        Comment: "HDR10 is a non-linear HDR colorspace and the default colorspace for 10-bit surfaces."
      - ZigValue: Jpeg
        SdlValue: $SDL.SDL_COLORSPACE_JPEG
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601."
      - ZigValue: BT601Limited
        SdlValue: $SDL.SDL_COLORSPACE_BT601_LIMITED
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601."
      - ZigValue: BT601Full
        SdlValue: $SDL.SDL_COLORSPACE_BT601_FULL
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601."
      - ZigValue: BT709Limited
        SdlValue: $SDL.SDL_COLORSPACE_BT709_LIMITED
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709."
      - ZigValue: BT709Full
        SdlValue: $SDL.SDL_COLORSPACE_BT709_FULL
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709."
      - ZigValue: BT2020Limited
        SdlValue: $SDL.SDL_COLORSPACE_BT2020_LIMITED
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020."
      - ZigValue: BT2020Full
        SdlValue: $SDL.SDL_COLORSPACE_BT2020_FULL
        Comment: "Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020."
      - ZigValue: RgbDefault
        SdlValue: $SDL.SDL_COLORSPACE_RGB_DEFAULT
        Comment: "The default colorspace for RGB surfaces if no colorspace is specified."
      - ZigValue: YuvDefault
        SdlValue: $SDL.SDL_COLORSPACE_YUV_DEFAULT
        Comment: "The default colorspace for YUV surfaces if no colorspace is specified."
    Functions:
      - SdlName: SDL_DEFINE_COLORSPACE
        ZigName: define
        Comment: "Create a colorspace."
        Return:
          Sdl: SDL_Colorspace
          Zig: Colorspace
          Convert: null
          Checks: []
        Arguments:
          - Name: color_type
            Type: SDL_ColorType
            Value: null
            Mode: null
          - Name: range
            Type: SDL_ColorRange
            Value: null
            Mode: null
          - Name: primaries
            Type: SDL_ColorPrimaries
            Value: null
            Mode: null
          - Name: transfer
            Type: SDL_TransferCharacteristics
            Value: null
            Mode: null
          - Name: matrix
            Type: SDL_MatrixCoefficients
            Value: null
            Mode: null
          - Name: chroma
            Type: ?SDL_ChromaLocation
            Value: if (chroma == null) C.SDL_CHROMA_LOCATION_NONE else @intFromEnum(chroma)
            Mode: null
      - SdlName: SDL_COLORSPACETYPE
        ZigName: getType
        Comment: "Get the color space type."
        Return:
          Sdl: SDL_ColorType
          Zig: ?ColorType
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_COLOR_TYPE_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_COLORSPACERANGE
        ZigName: getRange
        Comment: "Get the color space range."
        Return:
          Sdl: SDL_ColorRange
          Zig: ?ColorRange
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_COLOR_RANGE_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_COLORSPACECHROMA
        ZigName: getChromaLocation
        Comment: "Get the color space chroma."
        Return:
          Sdl: SDL_ChromaLocation
          Zig: ?ChromaLocation
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_CHROMA_LOCATION_NONE
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_COLORSPACEPRIMARIES
        ZigName: getColorPrimaries
        Comment: "Get the color space primaries."
        Return:
          Sdl: SDL_ColorPrimaries
          Zig: ?ColorPrimaries
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_COLOR_PRIMARIES_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_COLORSPACETRANSFER
        ZigName: getTransferCharacteristics
        Comment: "Get the color space transfer characteristics."
        Return:
          Sdl: SDL_TransferCharacteristics
          Zig: ?TransferCharacteristics
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_TRANSFER_CHARACTERISTICS_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_COLORSPACEMATRIX
        ZigName: getMatrix
        Comment: "Get the color space matrix."
        Return:
          Sdl: SDL_MatrixCoefficients
          Zig: MatrixCoefficients
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_ISCOLORSPACE_MATRIX_BT601
        ZigName: isMatrixBT601
        Comment: "If the matrix is BT601."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_ISCOLORSPACE_MATRIX_BT709
        ZigName: isMatrixBT709
        Comment: "If the matrix is BT709."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_ISCOLORSPACE_MATRIX_BT2020_NCL
        ZigName: isMatrixBT2020_NCL
        Comment: "If the matrix is BT2020 NCL."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_ISCOLORSPACE_LIMITED_RANGE
        ZigName: isLimitedRange
        Comment: "If the color space is limited range."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
      - SdlName: SDL_ISCOLORSPACE_FULL_RANGE
        ZigName: isFullRange
        Comment: "If the color space is full range."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Colorspace
            Value: null
            Mode: null
    CustomFunctions: []
  - SdlName: SDL_Pixel
    ZigName: Pixel
    Type: u32
    IsOpaque: false
    Comment: "Raw pixel value."
    Presets: []
    Functions: []
    CustomFunctions: []
Flags: []
StringMap: []
Structs:
  - Name: FormatDetails
    Type: SDL_PixelFormatDetails
    Comment: "Details about the format of a pixel."
    Members:
      - ZigName: format
        SdlName: format
        Type: ?SDL_PixelFormat
        Value: null
        Comment: null
        FromSdlCustom: if (data.format == C.SDL_PIXELFORMAT_UNKNOWN) null else Format{ .value = data.format }
        ToSdlCustom: if (self.format == null) C.SDL_PIXELFORMAT_UNKNOWN else self.format
      - ZigName: bits_per_pixel
        SdlName: bits_per_pixel
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: bytes_per_pixel
        SdlName: bytes_per_pixel
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: r_mask
        SdlName: Rmask
        Type: u32
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: g_mask
        SdlName: Gmask
        Type: u32
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: b_mask
        SdlName: Bmask
        Type: u32
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: r_bits
        SdlName: Rbits
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: g_bits
        SdlName: Gbits
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: b_bits
        SdlName: Bbits
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: a_bits
        SdlName: Abits
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: r_shift
        SdlName: Rshift
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: g_shift
        SdlName: Gshift
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: b_shift
        SdlName: Bshift
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: a_shift
        SdlName: Ashift
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
    Functions:
      - SdlName: SDL_MapRGB
        ZigName: mapRgb
        Comment: "Map an RGB triple to an opaque pixel value for a given pixel format."
        Return:
          Sdl: SDL_Pixel
          Zig: Pixel
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormatDetails
            Value: null
            Mode: convertSdlConst
          - Name: palette
            Type: ?SDL_Palette
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: null
            Mode: null
          - Name: g
            Type: u8
            Value: null
            Mode: null
          - Name: b
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_MapRGBA
        ZigName: mapRgba
        Comment: "Map an RGBA quadruple to a transparent pixel value for a given pixel format."
        Return:
          Sdl: SDL_Pixel
          Zig: Pixel
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormatDetails
            Value: null
            Mode: convertSdlConst
          - Name: palette
            Type: ?SDL_Palette
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: null
            Mode: null
          - Name: g
            Type: u8
            Value: null
            Mode: null
          - Name: b
            Type: u8
            Value: null
            Mode: null
          - Name: a
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_GetRGB
        ZigName: getRgb
        Comment: "Get RGB values from a pixel in the specified format."
        Return:
          Sdl: void
          Zig: |
            struct { r: u8, g: u8, b: u8 }
          Convert: .{ .r = r, .g = g, .b = b }
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormatDetails
            Value: "@intCast(pixel.value)"
            Mode: convertSdlConst
          - Name: pixel
            Type: SDL_Pixel
            Value: "&self_sdl"
            Mode: null
          - Name: palette
            Type: ?SDL_Palette
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: &r
            Mode: out
          - Name: g
            Type: u8
            Value: &g
            Mode: out
          - Name: b
            Type: u8
            Value: &b
            Mode: out
      - SdlName: SDL_GetRGBA
        ZigName: getRgba
        Comment: "Get RGBA values from a pixel in the specified format."
        Return:
          Sdl: void
          Zig: |
            struct { r: u8, g: u8, b: u8, a: u8 }
          Convert: .{ .r = r, .g = g, .b = b, .a = a }
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PixelFormatDetails
            Value: "@intCast(pixel.value)"
            Mode: convertSdlConst
          - Name: pixel
            Type: SDL_Pixel
            Value: "&self_sdl"
            Mode: null
          - Name: palette
            Type: ?SDL_Palette
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: &r
            Mode: out
          - Name: g
            Type: u8
            Value: &g
            Mode: out
          - Name: b
            Type: u8
            Value: &b
            Mode: out
          - Name: a
            Type: u8
            Value: &a
            Mode: out
    CustomFunctions: []
Functions: []
CustomFunctions:
  - Code: |
      /// Get the order type of a pixel type.
      fn OrderType(pixel_type: Type) type {
          return switch (pixel_type) {
              .Index1, .Index2, .Index4, .Index8 => IndexOrder,
              .Packed8, .Packed16, .Packed32 => PackedOrder,
              .ArrayU8, .ArrayU16, .ArrayU32, .ArrayF16, .ArrayF32 => ArrayOrder,
          };
      }
  - Code: |
      /// A fully opaque 8-bit alpha value.
      pub const alpha_opaque: u8 = 255;
  - Code: |
      /// A fully transparent 8-bit alpha value.
      pub const alpha_transparent: u8 = 0;
  - Code: |
      /// A fully opaque float alpha value.
      pub const alpha_opaque_float: f32 = 1;
  - Code: |
      /// A fully transparent float alpha value.
      pub const alpha_transparent_float: f32 = 0;
Typedefs:
  - SdlName: SDL_Color
    ZigName: Color
    Comment: "A structure that represents a color as RGBA components."
  - SdlName: SDL_FColor
    ZigName: FColor
    Comment: "The bits of this structure can be directly reinterpreted as a float-packed."
Tests: []
