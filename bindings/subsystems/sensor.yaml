Name: sensor
Callbacks: []
Enums:
  - SdlType: SDL_SensorType
    ZigType: Type
    InternalType: c_int
    Comment: "The different sensors defined by SDL."
    Values:
      - ZigValue: Unknown
        SdlValue: $SDL.SDL_SENSOR_UNKNOWN
        Comment: "Unknown sensor type."
      - ZigValue: Accelerometer
        SdlValue: $SDL.SDL_SENSOR_ACCEL
        Comment: null
      - ZigValue: Gyroscope
        SdlValue: $SDL.SDL_SENSOR_GYRO
        Comment: null
      - ZigValue: AccelerometerLeft
        SdlValue: $SDL.SDL_SENSOR_ACCEL_L
        Comment: "Accelerometer for left Joy-Con controller and Wii nunchuk."
      - ZigValue: GyroscopeLeft
        SdlValue: $SDL.SDL_SENSOR_GYRO_L
        Comment: "Gyroscope for left Joy-Con controller."
      - ZigValue: AccelerometerRight
        SdlValue: $SDL.SDL_SENSOR_ACCEL_R
        Comment: "Accelerometer for right Joy-Con controller."
      - ZigValue: GyroscopeRight
        SdlValue: $SDL.SDL_SENSOR_GYRO_R
        Comment: "Gyroscope for right Joy-Con controller."
    Functions: []
Errors: []
Values:
  - SdlName: SDL_SensorID
    ZigName: ID
    Type: $SDL.SDL_SensorID
    IsOpaque: false
    Comment: "This is a unique ID for a sensor for the time it is connected to the system, and is never reused for the lifetime of the application."
    Presets: []
    Functions:
      - SdlName: SDL_GetSensorName
        ZigName: getName
        Comment: "Get the implementation dependent name of a sensor."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_SensorID
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorType
        ZigName: getType
        Comment: "Get the type of a sensor."
        Return:
          Sdl: SDL_SensorType
          Zig: "?Type"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_SENSOR_INVALID
        Arguments:
          - Name: self
            Type: SDL_SensorID
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorNonPortableType
        ZigName: getNonPortableType
        Comment: "Get the platform dependent type of a sensor."
        Return:
          Sdl: int
          Zig: "!c_int"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: self
            Type: SDL_SensorID
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorFromID
        ZigName: getSensor
        Comment: "Return the SDL_Sensor associated with an instance ID."
        Return:
          Sdl: SDL_Sensor
          Zig: Sensor
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_SensorID
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get a list of currently connected sensors. Result must be freed.
              pub fn getAll(allocator: std.mem.Allocator) ![]ID {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetSensors(
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(ID, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind].value = ret[ind];
                  }
                  return converted_ret;
              }
  - SdlName: SDL_Sensor
    ZigName: Sensor
    Type: $SDL.SDL_Sensor
    IsOpaque: true
    Comment: "Sensor to obtain data from."
    Presets: []
    Functions:
      - SdlName: SDL_OpenSensor
        ZigName: init
        Comment: "Open a sensor for use."
        Return:
          Sdl: SDL_Sensor
          Zig: Sensor
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: id
            Type: SDL_SensorID
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorProperties
        ZigName: getProperties
        Comment: "Get the properties associated with a sensor."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "properties.Group"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorName
        ZigName: getName
        Comment: "Get the implementation dependent name of a sensor."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorType
        ZigName: getType
        Comment: "Get the type of a sensor."
        Return:
          Sdl: SDL_SensorType
          Zig: "?Type"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_SENSOR_INVALID
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorNonPortableType
        ZigName: getNonPortableType
        Comment: "Get the platform dependent type of a sensor."
        Return:
          Sdl: int
          Zig: "!c_int"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorID
        ZigName: getID
        Comment: "Get the instance ID of a sensor."
        Return:
          Sdl: SDL_SensorID
          Zig: "!ID"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_GetSensorData
        ZigName: getData
        Comment: "Get the current state of an opened sensor and writes it to the given slice."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
          - Name: data
            Type: "[]f32"
            Value: "data.ptr"
            Mode: verbatim
          - Name: count
            Type: null
            Value: "@intCast(data.len)"
            Mode: null
      - SdlName: SDL_CloseSensor
        ZigName: deinit
        Comment: "Close a sensor previously opened with `Sensor.init`."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Sensor
            Value: null
            Mode: null
      - SdlName: SDL_UpdateSensors
        ZigName: update
        Comment: "Update the current state of the open sensors."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
    CustomFunctions: []
Flags: []
StringMap: []
Structs: []
Functions: []
CustomFunctions: []
Typedefs: []
Tests: []
