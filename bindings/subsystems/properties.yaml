Name: properties
Extension: false
Callbacks: []
Enums:
  - SdlType: SDL_PropertyType
    ZigType: Type
    InternalType: c_uint
    Comment: "Properties type enum."
    Values:
      - ZigValue: Pointer
        SdlValue: $SDL.SDL_PROPERTY_TYPE_POINTER
        Comment: null
      - ZigValue: String
        SdlValue: $SDL.SDL_PROPERTY_TYPE_STRING
        Comment: null
      - ZigValue: Number
        SdlValue: $SDL.SDL_PROPERTY_TYPE_NUMBER
        Comment: null
      - ZigValue: Float
        SdlValue: $SDL.SDL_PROPERTY_TYPE_FLOAT
        Comment: null
      - ZigValue: Boolean
        SdlValue: $SDL.SDL_PROPERTY_TYPE_BOOLEAN
        Comment: null
    Functions: []
Errors: []
Values:
  SdlName: SDL_PropertiesID
  ZigName: Group
  Type: $SDL.SDL_PropertiesID
  IsOpaque: false
  Comment: "SDL properties group. Properties can be added or removed at runtime."
  Presets: []
  Functions:
      - SdlName: SDL_GetGlobalProperties
        ZigName: getGlobal
        Comment: "Get the global SDL properties."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "!Group"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: 0
        Arguments: []
      - SdlName: SDL_CreateProperties
        ZigName: init
        Comment: "Create a group of properties."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "!Group"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: 0
        Arguments: []
      - SdlName: SDL_CopyProperties
        ZigName: copyTo
        Comment: "Copy and replace all properties in destination with ones in this one. Will not copy properties that require cleanup."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
          - Name: dest
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_LockProperties
        ZigName: lock
        Comment: "Lock a group of properties."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_UnlockProperties
        ZigName: unlock
        Comment: "Unlock a group of properties."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_SetPointerPropertyWithCleanup
        ZigName: setPointerPropertyWithCleanup
        Comment: "Set a pointer property in a group of properties with a cleanup function that is called when the property is deleted."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
          - Name: ValueType
            Type: type
            Value: null
            Mode: generic
          - Name: UserData
            Type: type
            Value: null
            Mode: generic
          - Name: name
            Type: string
            Value: null
            Mode: null
          - Name: value
            Type: ?*ValueType
            Value: null
            Mode: null
          - Name: cb
            Type: |
              ?*const fn (user_data: *UserData, value: *ValueType) callconv(.C) void
            Value: if (cb) |val| @ptrCast(val) else null
            Mode: verbatim
          - Name: user_data
            Type: *UserData
            Value: null
            Mode: null
      - SdlName: SDL_HasProperty
        ZigName: has
        Comment: "If the property group has a property."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
          Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetPropertyType
        ZigName: getType
        Comment: "Get the type of property."
        Return:
          Sdl: SDL_PropertyType
          Zig: ?Type
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_PROPERTY_TYPE_INVALID
          Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_ClearProperty
        ZigName: clear
        Comment: "Clear a property from the group."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_DestroyProperties
        ZigName: deinit
        Comment: "Destroy the group of properties."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_PropertiesID
            Value: null
            Mode: null
  CustomFunctions:
      - Code: |
          /// Set a property.
              pub fn set(
                  self: Group,
                  name: [:0]const u8,
                  value: Property,
              ) !void {
                  const ret = switch (value) {
                      .Pointer => |pt| C.SDL_SetPointerProperty(self.value, name, pt),
                      .String => |str| C.SDL_SetStringProperty(self.value, name, str),
                      .Number => |num| C.SDL_SetNumberProperty(self.value, name, num),
                      .Float => |num| C.SDL_SetFloatProperty(self.value, name, num),
                      .Boolean => |val| C.SDL_SetBooleanProperty(self.value, name, val),
                  };
                  if (!ret)
                      return error.SdlError;
              }
      - Code: |
          /// Get a property.
              pub fn get(
                  self: Group,
                  name: [:0]const u8,
              ) ?Property {
                  return switch (self.getPropertyType(name)) {
                      C.SDL_PROPERTY_TYPE_INVALID => null,
                      C.SDL_PROPERTY_TYPE_POINTER => Property{ .Pointer = C.SDL_GetPointerProperty(self.value, name, null) },
                      C.SDL_PROPERTY_TYPE_STRING => Property{ .String = C.SDL_GetStringProperty(self.value, name, "") },
                      C.SDL_PROPERTY_TYPE_NUMBER => Property{ .Number = C.SDL_GetNumberProperty(self.value, name, 0) },
                      C.SDL_PROPERTY_TYPE_FLOAT => Property{ .Float = C.SDL_GetFloatProperty(self.value, name, 0) },
                      C.SDL_PROPERTY_TYPE_BOOLEAN => Property{ .Boolean = C.SDL_GetBooleanProperty(self.value, name, false) },
                  };
              }
      - Code: |
          /// Get all properties in the group. Returned map is owned.
              pub fn getAll(
                  self: Group,
                  allocator: std.mem.Allocator,
              ) !std.StringHashMap(Property) {
                  var ret = std.StringArrayHashMap(Property).init(allocator);
                  if (!C.SDL_EnumerateProperties(self.value, propertiesEnumerateCallback, &ret))
                      return error.SdlError;
                  return ret;
              }
Flags: []
StringMap: []
Structs: []
Functions: []
CustomFunctions:
  - Code: |
      /// Property.
      pub const Property = union(Type) {
          Pointer: ?*anyopaque,
          String: [:0]const u8,
          Number: i64,
          Float: f32,
          Boolean: bool,
      };
  - Code: |
      /// Used for adding properties to a list.
      fn propertiesEnumerateCallback(user_data: *std.StringHashMap(Property), id: C.SDL_PropertiesID, name: [*c]const u8) callconv(.C) void {
          const group = Group{ .value = id };
          if (group.get(name)) |val|
              user_data.put(name, val) catch {};
      }
Typedefs: []
Tests: []
