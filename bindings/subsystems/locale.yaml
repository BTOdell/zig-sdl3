Name: locale
Extension: false
Callbacks: []
Enums: []
Errors: []
Values: []
Flags: []
StringMap: []
Structs:
  - Name: Locale
    Type: SDL_Locale
    Comment: "Locale data."
    Members:
      - ZigName: language
        SdlName: language
        Type: string
        Value: null
        Comment: "Language in the ISO-639 spec."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: country
        SdlName: country
        Type: ??string
        Value: null
        Comment: "Country code in the ISO-3166 spec."
        FromSdlCustom: null
        ToSdlCustom: null
    Functions: []
    CustomFunctions:
      - Code: |
          /// Get preferred locals. Result must be freed.
              pub fn getPreferred(allocator: std.mem.Allocator) ![]Locale {
                  var cnt: c_int = undefined;
                  const ret = C.SDL_GetPreferredLocales(&cnt);
                  var converted_ret = try allocator.alloc(Locale, @intCast(cnt));
                  for (0..cnt) |ind| {
                      const sdl = ret[ind].*;
                      var zig = &converted_ret[ind];
                      zig.language = try allocator.allocSentinel(u8, std.mem.len(sdl.language), 0);
                      @memcpy(zig.language, sdl.language);
                      if (sdl.country == null) {
                          zig.country = null;
                      } else {
                          zig.country = try allocator.allocSentinel(u8, std.mem.len(sdl.country), 0);
                          @memcpy(zig.country, sdl.country);
                      }
                  }
                  C.SDL_free(ret);
                  return converted_ret;
              }
Functions: []
CustomFunctions: []
Typedefs: []
Tests: []
