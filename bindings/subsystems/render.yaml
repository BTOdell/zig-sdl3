Name: render
Extension: false
Callbacks: []
Enums:
  - SdlType: SDL_TextureAccess
    ZigType: TextureAccess
    InternalType: c_uint
    Comment: "The access pattern allowed for a texture."
    Values:
      - ZigValue: Static
        SdlValue: $SDL.SDL_TEXTUREACCESS_STATIC
        Comment: "Changes rarely, not lockable."
      - ZigValue: Streaming
        SdlValue: $SDL.SDL_TEXTUREACCESS_STREAMING
        Comment: "Changes frequently, lockable."
      - ZigValue: Target
        SdlValue: $SDL.SDL_TEXTUREACCESS_TARGET
        Comment: "Texture can be used as a render target."
    Functions: []
  - SdlType: SDL_RendererLogicalPresentation
    ZigType: LogicalPresentation
    InternalType: c_uint
    Comment: "How the logical size is mapped to the output."
    Values:
      - ZigValue: Stretch
        SdlValue: $SDL.SDL_LOGICAL_PRESENTATION_STRETCH
        Comment: "The rendered content is stretched to the output resolution."
      - ZigValue: LetterBox
        SdlValue: $SDL.SDL_LOGICAL_PRESENTATION_LETTERBOX
        Comment: "The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars."
      - ZigValue: Overscan
        SdlValue: $SDL.SDL_LOGICAL_PRESENTATION_OVERSCAN
        Comment: "The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds."
      - ZigValue: IntegerScale
        SdlValue: $SDL.SDL_LOGICAL_PRESENTATION_INTEGER_SCALE
        Comment: "The rendered content is scaled up by integer multiples to fit the output resolution."
    Functions: []
Errors: []
Values:
  - SdlName: SDL_Renderer
    ZigName: Renderer
    Type: $SDL.SDL_Renderer
    IsOpaque: true
    Comment: "A structure representing rendering state."
    Presets: []
    Functions:
      - SdlName: SDL_GetNumRenderDrivers
        ZigName: numDrivers
        Comment: "Get the number of 2D rendering drivers available for the current display."
        Return:
          Sdl: int
          Zig: usize
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetRenderDriver
        ZigName: getDriverName
        Comment: "Use this function to get the name of a built in 2D rendering driver."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonValue: null
        Arguments:
          - Name: index
            Type: usize
            Value: null
            Mode: null
      - SdlName: SDL_CreateWindowAndRenderer
        ZigName: initWithWindow
        Comment: "Create a window and default renderer."
        Return:
          Sdl: bool
          Zig: |
            !struct { window: video.Window, renderer: Renderer }
          Convert: .{ .window = .{ .value = window orelse return error.SdlError }, .renderer = .{ .value = renderer orelse return error.SdlError } }
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonValue: false
        Arguments:
          - Name: title
            Type: string
            Value: null
            Mode: null
          - Name: width
            Type: usize
            Value: null
            Mode: null
          - Name: height
            Type: usize
            Value: null
            Mode: null
          - Name: window_flags
            Type: SDL_WindowFlags
            Value: null
            Mode: null
          - Name: window
            Type: "?*C.SDL_Window"
            Value: "&window"
            Mode: out
          - Name: renderer
            Type: "?*C.SDL_Renderer"
            Value: "&renderer"
            Mode: out
      - SdlName: SDL_CreateRenderer
        ZigName: init
        Comment: "Create a 2D rendering context for a window."
        Return:
          Sdl: SDL_Renderer
          Zig: "!Renderer"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
          - Name: renderer_name
            Type: "?string"
            Value: null
            Mode: null
      - SdlName: SDL_CreateRendererWithProperties
        ZigName: initWithProperties
        Comment: "Create a 2D rendering context for a window, with the specified properties."
        Return:
          Sdl: SDL_Renderer
          Zig: "!Renderer"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: props
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_CreateSoftwareRenderer
        ZigName: initSoftwareRenderer
        Comment: "Create a 2D software rendering context for a surface."
        Return:
          Sdl: SDL_Renderer
          Zig: "!Renderer"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: target_surface
            Type: SDL_Surface
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderer
        ZigName: getRenderer
        Comment: "Get the renderer associated with a window."
        Return:
          Sdl: SDL_Renderer
          Zig: "!Renderer"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderWindow
        ZigName: getWindow
        Comment: "Get the window associated with a renderer."
        Return:
          Sdl: SDL_Window
          Zig: "!video.Window"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRendererName
        ZigName: getName
        Comment: "Get the name of a renderer."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRendererProperties
        ZigName: getProperties
        Comment: "Get the properties associated with a renderer."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "![]properties.Group"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderOutputSize
        ZigName: getOutputSize
        Comment: "Get the output size in pixels of a rendering context."
        Return:
          Sdl: bool
          Zig: |
            !struct { width: usize, height: usize }
          Convert: .{ .width = @intCast(w), .height = @intCast(h) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: w
            Type: c_int
            Value: "&w"
            Mode: out
          - Name: h
            Type: c_int
            Value: "&h"
            Mode: out
      - SdlName: SDL_GetCurrentRenderOutputSize
        ZigName: getCurrentOutputSize
        Comment: "Get the current output size in pixels of a rendering context."
        Return:
          Sdl: bool
          Zig: |
            !struct { width: usize, height: usize }
          Convert: .{ .width = @intCast(w), .height = @intCast(h) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: w
            Type: c_int
            Value: "&w"
            Mode: out
          - Name: h
            Type: c_int
            Value: "&h"
            Mode: out
      - SdlName: SDL_CreateTexture
        ZigName: createTexture
        Comment: "Create a texture for a rendering context."
        Return:
          Sdl: SDL_Texture
          Zig: "!Texture"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: format
            Type: SDL_PixelFormat
            Value: null
            Mode: null
          - Name: texture_access
            Type: SDL_TextureAccess
            Value: null
            Mode: null
          - Name: width
            Type: usize
            Value: null
            Mode: null
          - Name: height
            Type: usize
            Value: null
            Mode: null
      - SdlName: SDL_CreateTextureFromSurface
        ZigName: createTextureFromSurface
        Comment: "Create a texture from an existing surface."
        Return:
          Sdl: SDL_Texture
          Zig: "!Texture"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: surface_to_copy
            Type: SDL_Surface
            Value: null
            Mode: null
      - SdlName: SDL_CreateTextureWithProperties
        ZigName: createTextureWithProperties
        Comment: "Create a texture for a rendering context with the specified properties."
        Return:
          Sdl: SDL_Texture
          Zig: "!Texture"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: props
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_SetRenderTarget
        ZigName: setTarget
        Comment: "Set a texture as the current rendering target."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: target
            Type: ?SDL_Texture
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderTarget
        ZigName: getTarget
        Comment: "Get the current render target."
        Return:
          Sdl: SDL_Texture
          Zig: "?Texture"
          Convert: null
          Checks:
            - Method: ReturnNullIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_SetRenderLogicalPresentation
        ZigName: setLogicalPresentation
        Comment: "Set a device independent resolution and presentation mode for rendering."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: width
            Type: usize
            Value: null
            Mode: null
          - Name: height
            Type: usize
            Value: null
            Mode: null
          - Name: presentation_mode
            Type: ?SDL_RendererLogicalPresentation
            Value: if (presentation_mode) |val| @intFromEnum(val) else C.SDL_LOGICAL_PRESENTATION_DISABLED
            Mode: null
      - SdlName: SDL_GetRenderLogicalPresentation
        ZigName: getLogicalPresentation
        Comment: "Get device independent resolution and presentation mode for rendering."
        Return:
          Sdl: bool
          Zig: |
            !struct { width: usize, height: usize, presentation_mode: ?LogicalPresentation }
          Convert: .{ .width = @intCast(w), .height = @intCast(h), .presentation_mode = if (presentation_mode == C.SDL_LOGICAL_PRESENTATION_DISABLED) null else @enumFromInt(presentation_mode) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: w
            Type: c_int
            Value: "&w"
            Mode: out
          - Name: h
            Type: c_int
            Value: "&h"
            Mode: out
          - Name: presentation_mode
            Type: SDL_RendererLogicalPresentation
            Value: "&presentation_mode"
            Mode: out
      - SdlName: SDL_GetRenderLogicalPresentationRect
        ZigName: getLogicalPresentationRect
        Comment: "Get the final presentation rectangle for rendering."
        Return:
          Sdl: bool
          Zig: "!rect.FRect"
          Convert: rect.FRect.fromSdl(presentation_rect)
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: presentation_rect
            Type: SDL_FRect
            Value: "&presentation_rect"
            Mode: out
      - SdlName: SDL_RenderCoordinatesFromWindow
        ZigName: renderCoordinatesFromWindowCoordinates
        Comment: "Get a point in render coordinates when given a point in window coordinates."
        Return:
          Sdl: bool
          Zig: |
            struct { x: f32, y: f32 }
          Convert: .{ .x = render_x, .y = render_y }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: x
            Type: f32
            Value: null
            Mode: null
          - Name: y
            Type: f32
            Value: null
            Mode: null
          - Name: render_x
            Type: f32
            Value: "&render_x"
            Mode: out
          - Name: render_y
            Type: f32
            Value: "&render_y"
            Mode: out
      - SdlName: SDL_RenderCoordinatesToWindow
        ZigName: renderCoordinatesToWindowCoordinates
        Comment: "Get a point in window coordinates when given a point in render coordinates."
        Return:
          Sdl: bool
          Zig: |
            struct { x: f32, y: f32 }
          Convert: .{ .x = window_x, .y = window_y }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: x
            Type: f32
            Value: null
            Mode: null
          - Name: y
            Type: f32
            Value: null
            Mode: null
          - Name: window_x
            Type: f32
            Value: "&window_x"
            Mode: out
          - Name: window_y
            Type: f32
            Value: "&window_y"
            Mode: out
      - SdlName: SDL_SetRenderViewport
        ZigName: setViewport
        Comment: "Set the drawing area for rendering on the current target."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: viewport
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_GetRenderViewport
        ZigName: getViewport
        Comment: "Get the drawing area for the current target."
        Return:
          Sdl: bool
          Zig: ?rect.Rect
          Convert: rect.Rect.fromSdl(viewport)
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: viewport
            Type: SDL_Rect
            Value: "&viewport"
            Mode: out
      - SdlName: SDL_RenderViewportSet
        ZigName: viewportSet
        Comment: "Return whether an explicit rectangle was set as the viewport."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderSafeArea
        ZigName: getSafeArea
        Comment: "Get the safe area for rendering within the current viewport."
        Return:
          Sdl: bool
          Zig: ?rect.Rect
          Convert: rect.Rect.fromSdl(area)
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: area
            Type: SDL_Rect
            Value: "&area"
            Mode: out
      - SdlName: SDL_SetRenderClipRect
        ZigName: setClipRect
        Comment: "Set the clip rectangle for rendering on the specified target."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: clipping
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_GetRenderClipRect
        ZigName: getClipRect
        Comment: "Get the clip rectangle for the current target."
        Return:
          Sdl: bool
          Zig: ?rect.Rect
          Convert: rect.Rect.fromSdl(clipping)
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
            - Method: Custom
              ComparisonVal: |
                if (clipping.empty())
                            return null;
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: clipping
            Type: SDL_Rect
            Value: "&clipping"
            Mode: out
      - SdlName: SDL_RenderClipEnabled
        ZigName: clipEnabled
        Comment: "Get whether clipping is enabled on the given renderer."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_SetRenderScale
        ZigName: setScale
        Comment: "Set the drawing scale for rendering on the current target."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: x
            Type: f32
            Value: null
            Mode: null
          - Name: y
            Type: f32
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderScale
        ZigName: getScale
        Comment: "Get the drawing scale for the current target."
        Return:
          Sdl: bool
          Zig: |
            !struct { x: f32, y: f32 }
          Convert: .{ .x = x, .y = y }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: x
            Type: f32
            Value: "&x"
            Mode: out
          - Name: y
            Type: f32
            Value: "&y"
            Mode: out
      - SdlName: SDL_SetRenderDrawColor
        ZigName: setDrawColor
        Comment: "Set the color used for drawing operations (Rect, Line and Clear)."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: color
            Type: SDL_Color
            Value: color.r
            Mode: null
          - Name: g
            Type: null
            Value: color.g
            Mode: null
          - Name: b
            Type: null
            Value: color.b
            Mode: null
          - Name: a
            Type: null
            Value: color.a
            Mode: null
      - SdlName: SDL_SetRenderDrawColorFloat
        ZigName: setDrawColorFloat
        Comment: "Set the color used for drawing operations (Rect, Line and Clear)."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: color
            Type: SDL_FColor
            Value: color.r
            Mode: null
          - Name: g
            Type: null
            Value: color.g
            Mode: null
          - Name: b
            Type: null
            Value: color.b
            Mode: null
          - Name: a
            Type: null
            Value: color.a
            Mode: null
      - SdlName: SDL_GetRenderDrawColor
        ZigName: getDrawColor
        Comment: "Get the color used for drawing operations (Rect, Line and Clear)."
        Return:
          Sdl: bool
          Zig: "!pixels.Color"
          Convert: .{ .r = r, .g = g, .b = b, .a = a }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: "&r"
            Mode: out
          - Name: g
            Type: u8
            Value: "&g"
            Mode: out
          - Name: b
            Type: u8
            Value: "&b"
            Mode: out
          - Name: a
            Type: u8
            Value: "&a"
            Mode: out
      - SdlName: SDL_GetRenderDrawColorFloat
        ZigName: getDrawColorFloat
        Comment: "Get the color used for drawing operations (Rect, Line and Clear)."
        Return:
          Sdl: bool
          Zig: "!pixels.FColor"
          Convert: .{ .r = r, .g = g, .b = b, .a = a }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: r
            Type: f32
            Value: "&r"
            Mode: out
          - Name: g
            Type: f32
            Value: "&g"
            Mode: out
          - Name: b
            Type: f32
            Value: "&b"
            Mode: out
          - Name: a
            Type: f32
            Value: "&a"
            Mode: out
      - SdlName: SDL_SetRenderColorScale
        ZigName: setColorScale
        Comment: "Set the color scale used for render operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: scale
            Type: f32
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderColorScale
        ZigName: getColorScale
        Comment: "Get the color scale used for render operations."
        Return:
          Sdl: bool
          Zig: "!f32"
          Convert: scale
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: scale
            Type: f32
            Value: "&scale"
            Mode: out
      - SdlName: SDL_SetRenderDrawBlendMode
        ZigName: setDrawBlendMode
        Comment: "Set the blend mode used for drawing operations (Fill and Line)."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: mode
            Type: ?SDL_BlendMode
            Value: if (mode) |mode_val| mode_val.value else C.SDL_BLENDMODE_NONE
            Mode: null
      - SdlName: SDL_GetRenderDrawBlendMode
        ZigName: getDrawBlendMode
        Comment: "Get the blend mode used for drawing operations."
        Return:
          Sdl: bool
          Zig: "!?blend_mode.Mode"
          Convert: .{ .value = mode }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
            - Method: Custom
              ComparisonVal: |
                if (mode == C.SDL_BLENDMODE_NONE)
                            return null;
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: mode
            Type: SDL_BlendMode
            Value: "&mode"
            Mode: out
      - SdlName: SDL_RenderClear
        ZigName: clear
        Comment: "Clear the current rendering target with the drawing color."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_RenderPoint
        ZigName: renderPoint
        Comment: "Draw a point on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: p1
            Type: SDL_FPoint
            Value: p1.x
            Mode: null
          - Name: p1_y
            Type: null
            Value: p1.y
            Mode: null
      - SdlName: SDL_RenderPoints
        ZigName: renderPoints
        Comment: "Draw multiple points on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: points
            Type: "[]const rect.FPoint"
            Value: "@ptrCast(points.ptr)"
            Mode: verbatim
          - Name: count
            Type: null
            Value: "@intCast(points.len)"
            Mode: null
      - SdlName: SDL_RenderLine
        ZigName: renderLine
        Comment: "Draw a line on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: p1
            Type: SDL_FPoint
            Value: p1.x
            Mode: null
          - Name: p1_y
            Type: null
            Value: p1.y
            Mode: null
          - Name: p2
            Type: SDL_FPoint
            Value: p2.x
            Mode: null
          - Name: p2_y
            Type: null
            Value: p2.y
            Mode: null
      - SdlName: SDL_RenderLines
        ZigName: renderLines
        Comment: "Draw a series of connected lines on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: points
            Type: "[]const rect.FPoint"
            Value: "@ptrCast(points.ptr)"
            Mode: verbatim
          - Name: count
            Type: null
            Value: "@intCast(points.len)"
            Mode: null
      - SdlName: SDL_RenderRect
        ZigName: renderRect
        Comment: "Draw a rectangle on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: dst
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderRects
        ZigName: renderRects
        Comment: "Draw some number of rectangles on the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: rects
            Type: "[]const rect.FRect"
            Value: "@ptrCast(rects.ptr)"
            Mode: verbatim
          - Name: count
            Type: null
            Value: "@intCast(rects.len)"
            Mode: null
      - SdlName: SDL_RenderFillRect
        ZigName: renderFillRect
        Comment: "Fill a rectangle on the current rendering target with the drawing color at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: dst
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderFillRects
        ZigName: renderFillRects
        Comment: "Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: rects
            Type: "[]const rect.FRect"
            Value: "@ptrCast(rects.ptr)"
            Mode: verbatim
          - Name: count
            Type: null
            Value: "@intCast(rects.len)"
            Mode: null
      - SdlName: SDL_RenderTexture
        ZigName: renderTexture
        Comment: "Copy a portion of the texture to the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: src_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
          - Name: dst_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderTextureRotated
        ZigName: renderTextureRotated
        Comment: "Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: src_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
          - Name: dst_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
          - Name: angle
            Type: f64
            Value: null
            Mode: null
          - Name: center
            Type: SDL_FPoint
            Value: null
            Mode: convertSdlConstNullable
          - Name: flip_mode
            Type: ?SDL_FlipMode
            Value: if (flip_mode) |val| @intFromEnum(val) else C.SDL_FLIP_NONE
            Mode: null
      - SdlName: SDL_RenderTextureTiled
        ZigName: renderTextureTiled
        Comment: "Tile a portion of the texture to the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: src_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
          - Name: scale
            Type: f32
            Value: null
            Mode: null
          - Name: dst_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderTexture9Grid
        ZigName: renderTexture9Grid
        Comment: "Perform a scaled copy using the 9-grid algorithm to the current rendering target at subpixel precision."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: src_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
          - Name: left_width
            Type: f32
            Value: null
            Mode: null
          - Name: right_width
            Type: f32
            Value: null
            Mode: null
          - Name: top_height
            Type: f32
            Value: null
            Mode: null
          - Name: bottom_height
            Type: f32
            Value: null
            Mode: null
          - Name: scale
            Type: f32
            Value: null
            Mode: null
          - Name: dst_rect
            Type: SDL_FRect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderGeometry
        ZigName: renderGeometry
        Comment: "Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: ?SDL_Texture
            Value: null
            Mode: null
          - Name: vertices
            Type: "[*]const Vertex"
            Value: vertices
            Mode: verbatim
          - Name: num_vertices
            Type: usize
            Value: null
            Mode: null
          - Name: indices
            Type: "?[*]const c_int"
            Value: if (indices) |val| val else null
            Mode: verbatim
          - Name: num_indices
            Type: usize
            Value: null
            Mode: null
      - SdlName: SDL_RenderGeometryRaw
        ZigName: renderGeometryRaw
        Comment: "Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: texture
            Type: ?SDL_Texture
            Value: null
            Mode: null
          - Name: xy_positions
            Type: "[*]const f32"
            Value: xy_positions
            Mode: verbatim
          - Name: xy_positions_stride
            Type: usize
            Value: null
            Mode: null
          - Name: colors
            Type: "[*]const pixels.FColor"
            Value: colors
            Mode: verbatim
          - Name: colors_stride
            Type: usize
            Value: null
            Mode: null
          - Name: uv_coords
            Type: "[*]const f32"
            Value: uv_coords
            Mode: verbatim
          - Name: uv_coords_stride
            Type: usize
            Value: null
            Mode: null
          - Name: num_vertices
            Type: usize
            Value: null
            Mode: null
          - Name: indices
            Type: "?*const anyopaque"
            Value: indices
            Mode: verbatim
          - Name: num_indices
            Type: usize
            Value: null
            Mode: null
          - Name: bytes_per_index
            Type: usize
            Value: null
            Mode: null
      - SdlName: SDL_RenderReadPixels
        ZigName: readPixels
        Comment: "Read pixels from the current rendering target."
        Return:
          Sdl: SDL_Surface
          Zig: "!surface.Surface"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: capture_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_RenderPresent
        ZigName: present
        Comment: "Update the screen with any rendering performed since the previous call."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_DestroyRenderer
        ZigName: deinit
        Comment: "Destroy the rendering context for a window and free all associated textures."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_FlushRenderer
        ZigName: flush
        Comment: "Force the rendering context to flush any pending commands and state."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderMetalLayer
        ZigName: getMetalLayer
        Comment: "Get the CAMetalLayer associated with the given Metal renderer."
        Return:
          Sdl: "*void"
          Zig: "?*anyopaque"
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_GetRenderMetalCommandEncoder
        ZigName: getMetalCommandEncoder
        Comment: "Get the Metal command encoder for the current frame."
        Return:
          Sdl: "*void"
          Zig: "?*anyopaque"
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
      - SdlName: SDL_AddVulkanRenderSemaphores
        ZigName: addVulkanSemaphores
        Comment: "Add a set of synchronization semaphores for the current frame."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Renderer
            Value: null
            Mode: null
          - Name: wait_stage_mask
            Type: u32
            Value: null
            Mode: null
          - Name: wait_semaphore
            Type: i64
            Value: null
            Mode: null
          - Name: signal_semaphore
            Type: i64
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Set VSync of the given renderer.
              pub fn setVSync(
                  self: Renderer,
                  vsync: ?VSync,
              ) !void {
                  const ret = C.SDL_SetRenderVSync(self.value, VSync.toSdl(vsync));
                  if (!ret)
                      return error.SdlError;
              }
      - Code: |
          /// Get VSync of the given renderer.
              pub fn getVSync(
                  self: Renderer,
              ) !?VSync {
                  var vsync: c_int = undefined;
                  const ret = C.SDL_GetRenderVSync(self.value, &vsync);
                  if (!ret)
                      return error.SdlError;
                  return VSync.fromSdl(vsync);
              }
  - SdlName: SDL_Texture
    ZigName: Texture
    Type: "*$SDL.SDL_Texture"
    IsOpaque: false
    Comment: "An efficient driver-specific representation of pixel data."
    Presets: []
    Functions:
      - SdlName: SDL_GetTextureProperties
        ZigName: getProperties
        Comment: "Get the properties associated with a texture."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "!properties.Group"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
      - SdlName: SDL_GetRendererFromTexture
        ZigName: getRenderer
        Comment: "Get the renderer that created an SDL_Texture."
        Return:
          Sdl: SDL_Renderer
          Zig: "!Renderer"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
      - SdlName: SDL_GetTextureSize
        ZigName: getSize
        Comment: "Get the size of a texture, as floating point values."
        Return:
          Sdl: bool
          Zig: |
            !struct { width: f32, height: f32 }
          Convert: .{ .width = @floatCast(w), .height = @floatCast(h) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: w
            Type: f32
            Value: "&w"
            Mode: out
          - Name: h
            Type: f32
            Value: "&h"
            Mode: out
      - SdlName: SDL_SetTextureColorMod
        ZigName: setColorMod
        Comment: "Set an additional color value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: null
            Mode: null
          - Name: g
            Type: u8
            Value: null
            Mode: null
          - Name: b
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_SetTextureColorModFloat
        ZigName: setColorModFloat
        Comment: "Set an additional color value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: r
            Type: f32
            Value: null
            Mode: null
          - Name: g
            Type: f32
            Value: null
            Mode: null
          - Name: b
            Type: f32
            Value: null
            Mode: null
      - SdlName: SDL_GetTextureColorMod
        ZigName: getColorMod
        Comment: "Get the additional color value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: |
            !struct { r: u8, g: u8, b: u8 }
          Convert: .{ .r = r, .g = g, .b = b }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: r
            Type: u8
            Value: "&r"
            Mode: out
          - Name: g
            Type: u8
            Value: "&g"
            Mode: out
          - Name: b
            Type: u8
            Value: "&b"
            Mode: out
      - SdlName: SDL_GetTextureColorModFloat
        ZigName: getColorModFloat
        Comment: "Get the additional color value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: |
            !struct { r: f32, g: f32, b: f32 }
          Convert: .{ .r = r, .g = g, .b = b }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: r
            Type: f32
            Value: "&r"
            Mode: out
          - Name: g
            Type: f32
            Value: "&g"
            Mode: out
          - Name: b
            Type: f32
            Value: "&b"
            Mode: out
      - SdlName: SDL_SetTextureAlphaMod
        ZigName: setAlphaMod
        Comment: "Set an additional alpha value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: alpha
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_SetTextureAlphaModFloat
        ZigName: setAlphaModFloat
        Comment: "Set an additional alpha value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: alpha
            Type: f32
            Value: null
            Mode: null
      - SdlName: SDL_GetTextureAlphaMod
        ZigName: getAlphaMod
        Comment: "Get the additional alpha value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!u8"
          Convert: alpha
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: alpha
            Type: u8
            Value: "&alpha"
            Mode: out
      - SdlName: SDL_GetTextureAlphaModFloat
        ZigName: getAlphaModFloat
        Comment: "Get the additional alpha value multiplied into render copy operations."
        Return:
          Sdl: bool
          Zig: "!f32"
          Convert: alpha
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: alpha
            Type: f32
            Value: "&alpha"
            Mode: out
      - SdlName: SDL_SetTextureBlendMode
        ZigName: setBlendMode
        Comment: "Set the blend mode for a texture, used by `renderer.renderTexture`."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: mode
            Type: SDL_BlendMode
            Value: null
            Mode: null
      - SdlName: SDL_GetTextureBlendMode
        ZigName: getBlendMode
        Comment: "Get the blend mode used for texture copy operations."
        Return:
          Sdl: bool
          Zig: "!?blend_mode.Mode"
          Convert: .{ .value = mode }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
            - Method: Custom
              ComparisonVal: |
                if (mode == C.SDL_BLENDMODE_INVALID)
                            return null;
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: mode
            Type: SDL_BlendMode
            Value: "&mode"
            Mode: out
      - SdlName: SDL_SetTextureScaleMode
        ZigName: setScaleMode
        Comment: "Set the scale mode used for texture scale operations."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: mode
            Type: SDL_ScaleMode
            Value: null
            Mode: null
      - SdlName: SDL_GetTextureScaleMode
        ZigName: getScaleMode
        Comment: "Get the scale mode used for texture scale operations."
        Return:
          Sdl: bool
          Zig: "!surface.ScaleMode"
          Convert: "@enumFromInt(mode)"
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: mode
            Type: SDL_ScaleMode
            Value: "&mode"
            Mode: out
      - SdlName: SDL_UpdateTexture
        ZigName: update
        Comment: "Update the given texture rectangle with new pixel data."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: update_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: data
            Type: "[]const u8"
            Value: data.ptr
            Mode: verbatim
          - Name: pitch
            Type: null
            Value: "@intCast(data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
      - SdlName: SDL_UpdateYUVTexture
        ZigName: updateYUV
        Comment: "Update a rectangle within a planar YV12 or IYUV texture with new pixel data."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: update_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: y_data
            Type: "[]const u8"
            Value: y_data.ptr
            Mode: verbatim
          - Name: y_pitch
            Type: null
            Value: "@intCast(y_data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
          - Name: u_data
            Type: "[]const u8"
            Value: u_data.ptr
            Mode: verbatim
          - Name: u_pitch
            Type: null
            Value: "@intCast(u_data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
          - Name: v_data
            Type: "[]const u8"
            Value: v_data.ptr
            Mode: verbatim
          - Name: v_pitch
            Type: null
            Value: "@intCast(v_data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
      - SdlName: SDL_UpdateNVTexture
        ZigName: updateNV
        Comment: "Update a rectangle within a planar NV12 or NV21 texture with new pixels."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: update_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: y_data
            Type: "[]const u8"
            Value: y_data.ptr
            Mode: verbatim
          - Name: y_pitch
            Type: null
            Value: "@intCast(y_data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
          - Name: uv_data
            Type: "[]const u8"
            Value: uv_data.ptr
            Mode: verbatim
          - Name: uv_pitch
            Type: null
            Value: "@intCast(uv_data.len / (if (update_area_sdl) |val| @as(usize, @intCast(val.h)) else self.getHeight()))"
            Mode: null
      - SdlName: SDL_LockTexture
        ZigName: lock
        Comment: "Lock a portion of the texture for write-only pixel access."
        Return:
          Sdl: bool
          Zig: "![]u8"
          Convert: .{ .ptr = @ptrCast(@alignCast(pixels)), .len = self.getHeight() * @as(usize, @intCast(pitch)) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: update_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: data
            Type: "?*anyopaque"
            Value: "&data"
            Mode: out
          - Name: pitch
            Type: c_int
            Value: "&pitch"
            Mode: out
      - SdlName: SDL_LockTextureToSurface
        ZigName: lockToSurface
        Comment: "Lock a portion of the texture for write-only pixel access, and expose it as a SDL surface."
        Return:
          Sdl: bool
          Zig: "!surface.Surface"
          Convert: target_surface
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: bool
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
          - Name: update_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: target_surface
            Type: SDL_Surface
            Value: "&target_surface"
            Mode: out
      - SdlName: SDL_UnlockTexture
        ZigName: unlock
        Comment: "Unlock a texture, uploading the changes to video memory, if needed."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
      - SdlName: SDL_DestroyTexture
        ZigName: deinit
        Comment: "Destroy the specified texture."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Texture
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get the pixel format for the texture.
              pub fn getPixelFormat(self: Texture) ?pixels.Format {
                  return if (self.value.format == C.SDL_PIXELFORMAT_UNKNOWN) null else @enumFromInt(self.value.format);
              }
      - Code: |
          /// Get the width of the texture.
              pub fn getWidth(self: Texture) usize {
                  return @intCast(self.value.w);
              }
      - Code: |
          /// Get the height of the texture.
              pub fn getHeight(self: Texture) usize {
                  return @intCast(self.value.h);
              }
      - Code: |
          /// Get the reference count of the texture.
              pub fn getRefCount(self: Texture) usize {
                  return @intCast(self.value.refcount);
              }
Flags: []
StringMap: []
Structs: []
Functions: []
CustomFunctions:
  - Code: |
      /// Vertex for rendering.
      pub const Vertex = extern struct {
          /// Position in SDL renderer coordinates.
          position: rect.FPoint,
          /// Vertex color.
          color: pixels.FColor,
          /// Normalize texture coordinates.
          tex_coord: rect.FPoint,
      };
  - Code: |
      /// VSync mode.
      pub const VSync = union {
          OnEachNumRefresh: usize,
          Adaptive: void,

          pub fn fromSdl(val: c_int) ?VSync {
              return if (val == 0) null else if (val == -1) .Apdative else .OnEachNumRefresh(@intCast(val));
          }

          /// Convert to an SDL value.
          pub fn toSdl(self: ?VSync) c_int {
              return if (self) |sync|
                  switch (sync) {
                      .OnEachNumRefresh => |val| @intCast(val),
                      .Adaptive => -1,
                  }
              else
                  0;
          }
      };
Typedefs:
  - SdlName: SDL_SOFTWARE_RENDERER
    ZigName: software_renderer_name
    Comment: "The name of the software renderer."
Tests: []
