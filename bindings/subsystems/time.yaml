Name: time
Extension: false
Callbacks: []
Enums:
  - SdlType: SDL_Day
    ZigType: Day
    InternalType: c_int
    Comment: "Day of the week."
    Values:
      - ZigValue: Sunday
        SdlValue: 0
        Comment: null
      - ZigValue: Monday
        SdlValue: 1
        Comment: null
      - ZigValue: Tuesday
        SdlValue: 2
        Comment: null
      - ZigValue: Wednesday
        SdlValue: 3
        Comment: null
      - ZigValue: Thursday
        SdlValue: 4
        Comment: null
      - ZigValue: Friday
        SdlValue: 5
        Comment: null
      - ZigValue: Saturday
        SdlValue: 6
        Comment: null
    Functions: []
  - SdlType: SDL_Month
    ZigType: Month
    InternalType: c_int
    Comment: "Month of the year."
    Values:
      - ZigValue: January
        SdlValue: 1
        Comment: null
      - ZigValue: February
        SdlValue: 2
        Comment: null
      - ZigValue: March
        SdlValue: 3
        Comment: null
      - ZigValue: April
        SdlValue: 4
        Comment: null
      - ZigValue: May
        SdlValue: 5
        Comment: null
      - ZigValue: June
        SdlValue: 6
        Comment: null
      - ZigValue: July
        SdlValue: 7
        Comment: null
      - ZigValue: August
        SdlValue: 8
        Comment: null
      - ZigValue: September
        SdlValue: 9
        Comment: null
      - ZigValue: October
        SdlValue: 10
        Comment: null
      - ZigValue: November
        SdlValue: 11
        Comment: null
      - ZigValue: December
        SdlValue: 12
        Comment: null
    Functions: []
  - SdlType: SDL_DateFormat
    ZigType: DateFormat
    InternalType: c_uint
    Comment: "The preferred date format of the current system locale."
    Values:
      - ZigValue: YearMonthDay
        SdlValue: $SDL.SDL_DATE_FORMAT_YYYYMMDD
        Comment: null
      - ZigValue: DayMonthYear
        SdlValue: $SDL.SDL_DATE_FORMAT_DDMMYYYY
        Comment: null
      - ZigValue: MonthDayYear
        SdlValue: $SDL.SDL_DATE_FORMAT_MMDDYYYY
        Comment: null
    Functions: []
  - SdlType: SDL_TimeFormat
    ZigType: TimeFormat
    InternalType: c_uint
    Comment: "The preferred time format of the current system locale."
    Values:
      - ZigValue: TwentyFourHour
        SdlValue: $SDL.SDL_TIME_FORMAT_24HR
        Comment: null
      - ZigValue: TwelveHour
        SdlValue: $SDL.SDL_TIME_FORMAT_12HR
        Comment: null
    Functions: []
Errors: []
Values:
  - SdlName: SDL_Time
    ZigName: Time
    Type: $SDL.SDL_Time
    IsOpaque: false
    Comment: "Nanoseconds since the unix epoch."
    Presets: []
    Functions:
      - SdlName: SDL_GetCurrentTime
        ZigName: getCurrent
        Comment: "Gets the current value of the system realtime clock in nanoseconds since Jan 1, 1970 in Universal Coordinated Time (UTC)."
        Return:
          Sdl: bool
          Zig: "!Time"
          Convert: Time{ .value = time }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: time
            Type: SDL_Time
            Value: &time
            Mode: out
      - SdlName: SDL_GetDateTimeLocalePreferences
        ZigName: getLocalePreferences
        Comment: "Gets the current preferred date and time format for the system locale. This is a *slow* call and should only be used once ideally."
        Return:
          Sdl: bool
          Zig: |
            !struct { dateFormat: DateFormat, timeFormat: TimeFormat }
          Convert: .{ .dateFormat = @enumFromInt(dateFormat), .timeFormat = @enumFromInt(timeFormat) }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Time
            Value: null
            Mode: null
          - Name: dateFormat
            Type: SDL_DateFormat
            Value: &dateFormat
            Mode: out
          - Name: timeFormat
            Type: SDL_TimeFormat
            Value: &timeFormat
            Mode: out
      - SdlName: SDL_DateTimeToTime
        ZigName: fromDateTime
        Comment: "Converts a calendar time to an SDL_Time in nanoseconds since the epoch."
        Return:
          Sdl: bool
          Zig: "!Time"
          Convert: Time{ .value = time }
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: date_time
            Type: SDL_DateTime
            Value: null
            Mode: convertSdlConst
          - Name: time
            Type: SDL_Time
            Value: &time
            Mode: out
      - SdlName: SDL_TimeToWindows
        ZigName: toWindows
        Comment: "Converts an SDL time to a windows FILETIME."
        Return:
          Sdl: void
          Zig: |
            struct { lowDateTime: u32, highDateTime: u32 }
          Convert: .{ .lowDateTime = lowDateTime, .highDateTime = highDateTime }
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Time
            Value: null
            Mode: null
          - Name: lowDateTime
            Type: u32
            Value: &lowDateTime
            Mode: out
          - Name: highDateTime
            Type: u32
            Value: &highDateTime
            Mode: out
      - SdlName: SDL_TimeFromWindows
        ZigName: fromWindows
        Comment: "Converts a windows FILETIME to an SDL time."
        Return:
          Sdl: SDL_Time
          Zig: Time
          Convert: null
          Checks: []
        Arguments:
          - Name: lowDateTime
            Type: u32
            Value: null
            Mode: null
          - Name: highDateTime
            Type: u32
            Value: null
            Mode: null
    CustomFunctions: []
Flags: []
StringMap: []
Structs:
  - Name: DateTime
    Type: SDL_DateTime
    Comment: "A structure holding a calendar date and time broken down into it's components."
    Members:
      - ZigName: year
        SdlName: year
        Type: u31
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: month
        SdlName: month
        Type: SDL_Month
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: day
        SdlName: day
        Type: u5
        Value: null
        Comment: "Range is [0-31] inclusively."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: hour
        SdlName: hour
        Type: u5
        Value: null
        Comment: "Range is [0-23] inclusively."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: minute
        SdlName: minute
        Type: u6
        Value: null
        Comment: "Range is [0-59] inclusively."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: second
        SdlName: second
        Type: u6
        Value: null
        Comment: "Range is [0-59] inclusively."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: nanosecond
        SdlName: nanosecond
        Type: u31
        Value: null
        Comment: "Range is [0-999999999] inclusively."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: day_of_week
        SdlName: day_of_week
        Type: SDL_Day
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: utc_offset
        SdlName: utc_offset
        Type: int
        Value: null
        Comment: "Seconds east of UTC."
        FromSdlCustom: null
        ToSdlCustom: null
    Functions:
      - SdlName: SDL_TimeToDateTime
        ZigName: fromTime
        Comment: "Converts an SDL time in nanoseconds since the epoch to a calendar time in the SDL date time format."
        Return:
          Sdl: bool
          Zig: "!DateTime"
          Convert: null
          Checks:
            - Method: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: time
            Type: SDL_Time
            Value: null
            Mode: null
          - Name: date_time
            Type: SDL_DateTime
            Value: &date_time
            Mode: out
          - Name: local_instead_of_utc
            Type: bool
            Value: null
            Mode: null
    CustomFunctions: []
Functions:
  - SdlName: SDL_GetDaysInMonth
    ZigName: getDaysInMonth
    Comment: "Get the number of days in a month for a given year."
    Return:
      Sdl: int
      Zig: "!u5"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: -1
    Arguments:
      - Name: year
        Type: u31
        Value: null
        Mode: null
      - Name: month
        Type: SDL_Month
        Value: null
        Mode: null
  - SdlName: SDL_GetDayOfYear
    ZigName: getDayOfYear
    Comment: "Get the day of a given year with value [0-365]."
    Return:
      Sdl: int
      Zig: "!u9"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: -1
    Arguments:
      - Name: year
        Type: u31
        Value: null
        Mode: null
      - Name: month
        Type: SDL_Month
        Value: null
        Mode: null
      - Name: day
        Type: u5
        Value: null
        Mode: null
  - SdlName: SDL_GetDayOfWeek
    ZigName: getDayOfWeek
    Comment: "Get the day of a given week."
    Return:
      Sdl: SDL_Day
      Zig: "!Day"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: -1
    Arguments:
      - Name: year
        Type: u31
        Value: null
        Mode: null
      - Name: month
        Type: SDL_Month
        Value: null
        Mode: null
      - Name: day
        Type: u5
        Value: null
        Mode: null
CustomFunctions: []
Typedefs: []
Tests:
  - Name: Dates
    Comment: "Ensure time and date recognition works."
    Code: |
      try std.testing.expect(try getDaysInMonth(2018, Month.February) == 28);
      try std.testing.expect(try getDaysInMonth(2020, Month.February) == 29);
      try std.testing.expect(try getDaysInMonth(2014, Month.October) == 31);

      try std.testing.expect(try getDayOfYear(1972, Month.June, 13) == 164);
      try std.testing.expect(try getDayOfYear(2057, Month.March, 12) == 70);
      try std.testing.expect(try getDayOfYear(2018, Month.September, 27) == 269);
      try std.testing.expectError(error.SdlError, getDayOfYear(2020, Month.February, 31));

      try std.testing.expect(try getDayOfWeek(2001, Month.November, 2) == Day.Friday);
      try std.testing.expect(try getDayOfWeek(1984, Month.January, 11) == Day.Wednesday);
      try std.testing.expect(try getDayOfWeek(2024, Month.October, 9) == Day.Wednesday);
      try std.testing.expectError(error.SdlError, getDayOfWeek(2020, Month.February, 31));
