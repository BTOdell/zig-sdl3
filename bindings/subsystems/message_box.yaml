Name: message_box
Callbacks: []
Enums: []
Errors: []
Values: []
Flags:
  - Name: ButtonFlags
    Type: SDL_MessageBoxButtonFlags
    Comment: "Message box button flags."
    Values:
      - Name: mark_default_with_return_key
        Type: SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
        Value: false
        Comment: null
      - Name: mark_default_with_escape_key
        Type: SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT
        Value: false
        Comment: null
    Presets: []
    Functions: []
    CustomFunctions: []
  - Name: BoxFlags
    Type: SDL_MessageBoxFlags
    Comment: "Message box flags."
    Values:
      - Name: error_dialog
        Type: SDL_MESSAGEBOX_ERROR
        Value: false
        Comment: null
      - Name: warning_dialog
        Type: SDL_MESSAGEBOX_WARNING
        Value: false
        Comment: null
      - Name: information_dialog
        Type: SDL_MESSAGEBOX_INFORMATION
        Value: false
        Comment: null
      - Name: buttons_left_to_right
        Type: SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT
        Value: false
        Comment: null
      - Name: buttons_right_to_left
        Type: SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT
        Value: false
        Comment: null
    Presets: []
    Functions: []
    CustomFunctions: []
StringMap: []
Structs:
  - Name: Button
    Type: SDL_MessageBoxButtonData
    Comment: "Message box button."
    Members:
      - ZigName: flags
        SdlName: flags
        Type: SDL_MessageBoxFlags
        Value: ".{}"
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: value
        SdlName: buttonID
        Type: int
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: text
        SdlName: text
        Type: string
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
    Functions: []
    CustomFunctions: []
  - Name: Color
    Type: SDL_MessageBoxColor
    Comment: Message box color. Simple RGB.
    Members:
      - ZigName: r
        SdlName: r
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: g
        SdlName: g
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: b
        SdlName: b
        Type: u8
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
    Functions: []
    CustomFunctions:
      - Code: |
          /// Create a color from a hex code.
              pub fn fromHex(hex_code: *const [6:0]u8) !Color {
                  return .{
                      .r = try std.fmt.parseInt(u8, hex_code[0..2], 16),
                      .g = try std.fmt.parseInt(u8, hex_code[2..4], 16),
                      .b = try std.fmt.parseInt(u8, hex_code[4..6], 16),
                  };
              }
Functions:
  - SdlName: SDL_ShowSimpleMessageBox
    ZigName: showSimple
    Comment: "Display a simple modal message box."
    Return:
      Sdl: bool
      Zig: "!void"
      Convert: null
      Checks:
        - Mode: ReturnErrIfEq
          ComparisonVal: false
    Arguments:
      - Name: flags
        Type: SDL_MessageBoxFlags
        Value: null
        Mode: null
      - Name: title
        Type: string
        Value: null
        Mode: null
      - Name: message
        Type: string
        Value: null
        Mode: null
      - Name: parent_window
        Type: ?SDL_Window
        Value: null
        Mode: null
CustomFunctions:
  - Code: |
      /// A set of colors to use for message box dialogs.
      pub const ColorScheme = struct {
          background: Color,
          text: Color,
          button_border: Color,
          button_background: Color,
          button_selected: Color,

          /// Convert from an SDL value.
          pub fn fromSdl(data: C.SDL_MessageBoxColorScheme) ColorScheme {
              return .{
                  .background = Color.fromSdl(data.colors[C.SDL_MESSAGEBOX_COLOR_BACKGROUND]),
                  .text = Color.fromSdl(data.colors[C.SDL_MESSAGEBOX_COLOR_TEXT]),
                  .button_border = Color.fromSdl(data.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER]),
                  .button_background = Color.fromSdl(data.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND]),
                  .button_selected = Color.fromSdl(data.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED]),
              };
          }

          /// Convert to an SDL value.
          pub fn toSdl(self: ColorScheme) C.SDL_MessageBoxColorScheme {
              var ret: C.SDL_MessageBoxColorScheme = undefined;
              ret.colors[C.SDL_MESSAGEBOX_COLOR_BACKGROUND] = self.background.toSdl();
              ret.colors[C.SDL_MESSAGEBOX_COLOR_TEXT] = self.text.toSdl();
              ret.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER] = self.button_border.toSdl();
              ret.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND] = self.button_background.toSdl();
              ret.colors[C.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED] = self.button_selected.toSdl();
              return ret;
          }
      };
  - Code: |
      /// Buttons.
      pub fn Buttons(comptime len: usize) type {
          return struct {
              buttons: [len]C.SDL_MessageBoxButtonData,

              /// Create buttons from zig.
              pub fn fromZig(buttons: [len]Button) Buttons(len) {
                  var ret: Buttons(len) = undefined;
                  for (0..len) |ind| {
                      ret.buttons[ind] = buttons[ind].toSdl();
                  }
                  return ret;
              }
          };
      }
  - Code: |
      /// Create a modal message box.
      pub fn show(
          flags: BoxFlags,
          title: [:0]const u8,
          message: [:0]const u8,
          parent_window: ?video.Window,
          comptime buttons: anytype,
          color_scheme: ?ColorScheme,
      ) !u32 {
          const button_data = Buttons(buttons.len).fromZig(buttons);
          const colors: ?C.SDL_MessageBoxColorScheme = if (color_scheme) |val| val.toSdl() else null;
          const data = C.SDL_MessageBoxData{
              .buttons = &button_data.buttons,
              .colorScheme = if (color_scheme) |_| &colors.? else null,
              .flags = flags.toSdl(),
              .message = message,
              .numbuttons = @intCast(buttons.len),
              .title = title,
              .window = if (parent_window == null) null else parent_window.?.value,
          };
          var button_id: c_int = undefined;
          const ret = C.SDL_ShowMessageBox(&data, &button_id);
          if (!ret)
              return error.SdlError;
          return @intCast(button_id);
      }
  - Code: |
      /// Create a modal message box.
      pub fn showWithButtonLen(
          flags: BoxFlags,
          title: [:0]const u8,
          message: [:0]const u8,
          parent_window: ?video.Window,
          comptime buttons_len: usize,
          buttons: Buttons(buttons_len),
          color_scheme: ?ColorScheme,
      ) !u32 {
          const colors: ?C.SDL_MessageBoxColorScheme = if (color_scheme) |val| val.toSdl() else null;
          const data = C.SDL_MessageBoxData{
              .buttons = &buttons.buttons,
              .colorScheme = if (color_scheme) |_| &colors.? else null,
              .flags = flags.toSdl(),
              .message = message,
              .numbuttons = @intCast(buttons_len),
              .title = title,
              .window = if (parent_window == null) null else parent_window.?.value,
          };
          var button_id: c_int = undefined;
          const ret = C.SDL_ShowMessageBox(&data, &button_id);
          if (!ret)
              return error.SdlError;
          return @intCast(button_id);
      }
Typedefs: []
Tests: []
