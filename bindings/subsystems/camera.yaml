Name: camera
Callbacks: []
Enums:
  - SdlType: SDL_CameraPermissionState
    ZigType: PermissionState
    InternalType: c_int
    Comment: "If camera is approved by user."
    Values:
      - ZigValue: Denied
        SdlValue: -1
        Comment: null
      - ZigValue: Awaiting
        SdlValue: 0
        Comment: null
      - ZigValue: Approved
        SdlValue: 1
        Comment: null
    Functions: []
  - SdlType: SDL_CameraPosition
    ZigType: Position
    InternalType: c_uint
    Comment: "The position of camera in relation to system device."
    Values:
      - ZigValue: FrontFacing
        SdlValue: $SDL.SDL_CAMERA_POSITION_FRONT_FACING
        Comment: null
      - ZigValue: BackFacing
        SdlValue: $SDL.SDL_CAMERA_POSITION_BACK_FACING
        Comment: null
    Functions: []
Errors: []
Values:
  - SdlName: SDL_CameraID
    ZigName: ID
    Type: $SDL.SDL_CameraID
    IsOpaque: false
    Comment: "This is a unique ID for a camera device for the time it is connected to the system, and is never reused for the lifetime of the application."
    Presets: []
    Functions:
      - SdlName: SDL_GetCameraName
        ZigName: getName
        Comment: "Get the human-readable device name for a camera."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_CameraID
            Value: null
            Mode: null
      - SdlName: SDL_GetCameraPosition
        ZigName: getPosition
        Comment: "Get the position of the camera in relation to the system."
        Return:
          Sdl: SDL_CameraPosition
          Zig: "?Position"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_CAMERA_POSITION_UNKNOWN
        Arguments:
          - Name: self
            Type: SDL_CameraID
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get a list of currently connected camera devices. Result must be freed.
              pub fn getAll(
                  allocator: std.mem.Allocator,
              ) ![]ID {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetCameras(
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(ID, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind].value = ret[ind];
                  }
                  return converted_ret;
              }
      - Code: |
          /// Get the list of native formats/sizes a camera supports. Result Must be freed.
              pub fn getSupportedFormats(
                  self: ID,
                  allocator: std.mem.Allocator,
              ) ![]Specification {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetCameraSupportedFormats(
                      self.value,
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(Specification, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind] = Specification.fromSdl(ret[ind].*);
                  }
                  return converted_ret;
              }
  - SdlName: SDL_Camera
    ZigName: Camera
    Type: $SDL.SDL_Camera
    IsOpaque: true
    Comment: "The opaque structure used to identify an opened SDL camera."
    Presets: []
    Functions:
      - SdlName: SDL_OpenCamera
        ZigName: init
        Comment: "Open a video recording device (a camera)."
        Return:
          Sdl: SDL_Camera
          Zig: "!Camera"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: id
            Type: SDL_CameraID
            Value: null
            Mode: null
          - Name: specification
            Type: SDL_CameraSpec
            Value: null
            Mode: convertSdlConst
      - SdlName: SDL_GetCameraPermissionState
        ZigName: getPermissionState
        Comment: "Query if camera access has been approved by the user."
        Return:
          Sdl: SDL_CameraPermissionState
          Zig: PermissionState
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
      - SdlName: SDL_GetCameraID
        ZigName: getID
        Comment: "Get the instance ID of an opened camera."
        Return:
          Sdl: SDL_CameraID
          Zig: "!ID"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
      - SdlName: SDL_GetCameraProperties
        ZigName: getProperties
        Comment: "Get the properties associated with an opened camera."
        Return:
          Sdl: SDL_PropertiesID
          Zig: "!properties.Group"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
      - SdlName: SDL_GetCameraFormat
        ZigName: getFormat
        Comment: "Get the spec that a camera is using when generating images."
        Return:
          Sdl: bool
          Zig: "!Specification"
          Convert: Specification.fromSdl(specification)
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
          - Name: specification
            Type: SDL_CameraSpec
            Value: "&specification"
            Mode: out
      - SdlName: SDL_AcquireCameraFrame
        ZigName: acquireFrame
        Comment: "Acquire a frame."
        Return:
          Sdl: SDL_Surface
          Zig: |
            struct { frame: ?surface.Surface, timestamp_nanoseconds: ?u64 }
          Convert: .{ .frame = if (ret != null) .{ .value = ret } else null, .timestamp_nanoseconds = if (timestamp_nanoseconds == 0) null else timestamp_nanoseconds }
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
          - Name: timestamp_nanoseconds
            Type: u64
            Value: "&timestamp_nanoseconds"
            Mode: out
      - SdlName: SDL_ReleaseCameraFrame
        ZigName: releaseFrame
        Comment: "Release a frame of video acquired from a camera."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
          - Name: frame
            Type: SDL_Surface
            Value: null
            Mode: null
      - SdlName: SDL_CloseCamera
        ZigName: deinit
        Comment: "Use this function to shut down camera processing and close the camera device."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_Camera
            Value: null
            Mode: null
    CustomFunctions: []
Flags: []
StringMap: []
Structs:
  - Name: Specification
    Type: SDL_CameraSpec
    Comment: "The details of an output format for a camera device."
    Members:
      - ZigName: format
        SdlName: format
        Type: ?SDL_PixelFormat
        Value: null
        Comment: null
        FromSdlCustom: if (data.format == C.SDL_PIXELFORMAT_UNKNOWN) null else pixels.Format{ .value = data.format }
        ToSdlCustom: if (self.format) |val| val.value else C.SDL_PIXELFORMAT_UNKNOWN
      - ZigName: colorspace
        SdlName: colorspace
        Type: ?SDL_Colorspace
        Value: null
        Comment: null
        FromSdlCustom: if (data.colorspace == C.SDL_COLORSPACE_UNKNOWN) null else pixels.Format{ .value = data.colorspace }
        ToSdlCustom: if (self.colorspace) |val| val.value else C.SDL_COLORSPACE_UNKNOWN
      - ZigName: width
        SdlName: width
        Type: usize
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: height
        SdlName: height
        Type: usize
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: framerate_numerator
        SdlName: framerate_numerator
        Type: usize
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: framerate_denominator
        SdlName: framerate_denominator
        Type: usize
        Value: null
        Comment: null
        FromSdlCustom: null
        ToSdlCustom: null
    Functions: []
    CustomFunctions: []
Functions:
  - SdlName: SDL_GetNumCameraDrivers
    ZigName: getNumDrivers
    Comment: "Use this function to get the number of built-in camera drivers."
    Return:
      Sdl: int
      Zig: usize
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_GetCameraDriver
    ZigName: getDriverName
    Comment: "Use this function to get the name of a built in camera driver."
    Return:
      Sdl: string
      Zig: "?[]const u8"
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments:
      - Name: driver_index
        Type: usize
        Value: null
        Mode: null
  - SdlName: SDL_GetCurrentCameraDriver
    ZigName: getCurrentDriverName
    Comment: "Get the name of the current camera driver."
    Return:
      Sdl: string
      Zig: "?[]const u8"
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments: []
CustomFunctions: []
Typedefs: []
Tests: []
