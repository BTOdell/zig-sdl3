Name: errors
Extension: false
Callbacks: []
Enums: []
Errors:
  - Name: Error
    Comment: "An SDL error."
    Values:
      - SdlError
Values: []
Flags: []
StringMap: []
Structs: []
Functions:
  - SdlName: SDL_SetError
    ZigName: set
    Comment: "Set the current SDL error."
    Return:
      Sdl: bool
      Zig: void
      Convert: null
      Checks: []
    Arguments:
      - Name: fmt
        Type: null
        Value: |
          "%s"
        Mode: null
      - Name: err
        Type: stringptr
        Value: null
        Mode: null
  - SdlName: SDL_OutOfMemory
    ZigName: signalOutOfMemory
    Comment: "Set an error indicating that memory allocation failed."
    Return:
      Sdl: bool
      Zig: void
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_GetError
    ZigName: get
    Comment: "Get the last error message if it exists. Note that lack of an error does not indicate succees, and an error being present does not indicate failure."
    Return:
      Sdl: string
      Zig: "?[]const u8"
      Convert: null
      Checks:
        - Method: ReturnNullIfEqStr
          ComparisonVal: |
            ""
    Arguments: []
  - SdlName: SDL_ClearError
    ZigName: clear
    Comment: "Clear the last error message."
    Return:
      Sdl: bool
      Zig: void
      Convert: null
      Checks: []
    Arguments: []
CustomFunctions: []
Typedefs: []
Tests:
  - Name: Error
    Comment: "Make sure error getting and setting works properly."
    Code: |
      clear();
      try std.testing.expect(get() == null);
      signalOutOfMemory();
      try std.testing.expect(std.mem.eql(u8, get().?, "Out of memory"));
      set("Hello world");
      try std.testing.expect(std.mem.eql(u8, get().?, "Hello world"));
      clear();
      try std.testing.expect(get() == null);
