Name: clipboard
Extension: false
Callbacks: []
Enums: []
Errors: []
Values: []
Flags: []
StringMap: []
Structs: []
Functions:
  - SdlName: SDL_SetClipboardText
    ZigName: setText
    Comment: "Put UTF-8 text into the clipboard."
    Return:
      Sdl: bool
      Zig: "!void"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: false
    Arguments:
      - Name: text
        Type: string
        Value: null
        Mode: null
  - SdlName: SDL_GetClipboardText
    ZigName: getText
    Comment: "Get UTF-8 text from the clipboard. Note that `sdl3.free` should be called on the return value."
    Return:
      Sdl: string
      Zig: "![]const u8"
      Convert: null
      Checks:
        - Method: ReturnErrIfEqStr
          ComparisonVal: |
            ""
    Arguments: []
  - SdlName: SDL_HasClipboardText
    ZigName: hasText
    Comment: "Query whether the clipboard exists and contains a non-empty text string."
    Return:
      Sdl: bool
      Zig: bool
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_SetPrimarySelectionText
    ZigName: setPrimarySelectionText
    Comment: "Put UTF-8 text into the primary selection."
    Return:
      Sdl: bool
      Zig: "!void"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: false
    Arguments:
      - Name: text
        Type: string
        Value: null
        Mode: null
  - SdlName: SDL_GetPrimarySelectionText
    ZigName: getPrimarySelectionText
    Comment: "Get UTF-8 text from the primary selection. Note that `sdl3.free` should be called on the return value."
    Return:
      Sdl: string
      Zig: "![]const u8"
      Convert: null
      Checks:
        - Method: ReturnErrIfEqStr
          ComparisonVal: |
            ""
    Arguments: []
  - SdlName: SDL_HasPrimarySelectionText
    ZigName: hasPrimarySelectionText
    Comment: "Query whether the primary selection exists and contains a non-empty text string."
    Return:
      Sdl: bool
      Zig: bool
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_ClearClipboardData
    ZigName: clearData
    Comment: "Clear the clipboard data."
    Return:
      Sdl: bool
      Zig: "!void"
      Convert: null
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: false
    Arguments: []
  - SdlName: SDL_GetClipboardData
    ZigName: getData
    Comment: "Get the data from clipboard for a given mime type. Note that `sdl3.free` should be called on the return value."
    Return:
      Sdl: "?*anyopaque"
      Zig: "![]const u8"
      Convert: .{ .ptr = @ptrCast(ret.?), .len = @intCast(size) }
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: null
    Arguments:
      - Name: mime_type
        Type: string
        Value: null
        Mode: null
      - Name: size
        Type: usize
        Value: &size
        Mode: out
  - SdlName: SDL_HasClipboardData
    ZigName: hasData
    Comment: "Query whether there is data in the clipboard for the provided mime type."
    Return:
      Sdl: bool
      Zig: bool
      Convert: null
      Checks: []
    Arguments:
      - Name: mime_type
        Type: string
        Value: null
        Mode: null
  - SdlName: SDL_GetClipboardMimeTypes
    ZigName: getMimeTypes
    Comment: "Retrieve the list of mime types available in the clipboard. Result needs to be freed with `sdl3.free`."
    Return:
      Sdl: "[]string"
      Zig: "[]const [:0]const u8"
      Convert: .{ .ptr = std.span(ret), .len = @intCast(num_mime_types) }
      Checks:
        - Method: ReturnErrIfEq
          ComparisonVal: null
    Arguments:
      - Name: num_mime_types
        Type: usize
        Value: &num_mime_types
        Mode: out
CustomFunctions:
  - Code: |
      /// Create user data for the set clipboard data callback function.
      pub fn SetDataUserData(comptime UserData: type) type {
          return struct {
              user_data: *UserData,
              callback: *const fn (
                  user_data: *UserData,
                  mime_type: ?[]const u8,
              ) []const u8,
              cleanup: *const fn (
                  user_data: *UserData,
              ) anyerror!void,
          };
      }
  - Code: |
      /// Callback for setting data wrapper.
      fn dataCallback(
          user_data: ?*anyopaque,
          mime_type: [*c]const u8,
          size: *usize,
      ) callconv(.C) []const u8 {
          const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
          const ret = cb_data.callback(cb_data.user_data, if (mime_type == null) null else std.mem.span(mime_type));
          size.* = ret.len;
          return ret.ptr;
      }
  - Code: |
      /// Callback for cleaning data wrapper.
      fn cleanupCallback(
          user_data: ?*anyopaque,
      ) callconv(.C) bool {
          const cb_data: *SetDataUserData(anyopaque) = @ptrCast(@alignCast(user_data));
          cb_data.cleanup(cb_data.user_data) catch return false;
          return true;
      }
  - Code: |
      /// Set data for the given mime types.
      pub fn setData(
          comptime UserData: type,
          user_data: *SetDataUserData(UserData),
          mime_types: []const [:0]const u8,
      ) !void {
          const ret = C.SDL_SetClipboardData(
              dataCallback,
              cleanupCallback,
              user_data,
              @ptrCast(mime_types.ptr),
              mime_types.len,
          );
          if (!ret)
              return error.SdlError;
      }
Typedefs: []
Tests: []
