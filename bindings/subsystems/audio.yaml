Name: audio
Extension: false
Callbacks: []
Enums: []
Errors: []
Values:
  - SdlName: SDL_AudioFormat
    ZigName: Format
    Type: c_uint
    IsOpaque: false
    Comment: "Audio format."
    Presets:
      - ZigValue: Unsigned_8_bit
        SdlValue: $SDL.SDL_AUDIO_U8
        Comment: null
      - ZigValue: Signed_8_bit
        SdlValue: $SDL.SDL_AUDIO_S8
        Comment: null
      - ZigValue: Signed_16_bit_little_endian
        SdlValue: $SDL.SDL_AUDIO_S16LE
        Comment: null
      - ZigValue: Signed_16_bit_big_endian
        SdlValue: $SDL.SDL_AUDIO_S16BE
        Comment: null
      - ZigValue: Signed_32_bit_little_endian
        SdlValue: $SDL.SDL_AUDIO_S32LE
        Comment: null
      - ZigValue: Signed_32_bit_big_endian
        SdlValue: $SDL.SDL_AUDIO_S32BE
        Comment: null
      - ZigValue: Floating_32_bit_little_endian
        SdlValue: $SDL.SDL_AUDIO_F32LE
        Comment: null
      - ZigValue: Floating_32_bit_big_endian
        SdlValue: $SDL.SDL_AUDIO_F32BE
        Comment: null
      - ZigValue: Signed_16_bit
        SdlValue: $SDL.SDL_AUDIO_S16
        Comment: null
      - ZigValue: Signed_32_bit
        SdlValue: $SDL.SDL_AUDIO_S32
        Comment: null
      - ZigValue: Floating_32_bit
        SdlValue: $SDL.SDL_AUDIO_F32
        Comment: null
    Functions:
      - SdlName: SDL_DEFINE_AUDIO_FORMAT
        ZigName: define
        Comment: "Define an audio format."
        Return:
          Sdl: SDL_AudioFormat
          Zig: Format
          Convert: null
          Checks: []
        Arguments:
          - Name: signed
            Type: bool
            Value: "@intFromBool(signed)"
            Mode: null
          - Name: big_endian
            Type: bool
            Value: "@intFromBool(big_endian)"
            Mode: null
          - Name: float
            Type: bool
            Value: "@intFromBool(float)"
            Mode: null
          - Name: bitwidth
            Type: u8
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_BITSIZE
        ZigName: getBitwidth
        Comment: "Get the bitwidth of the format."
        Return:
          Sdl: u8
          Zig: u8
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_BYTESIZE
        ZigName: getByteSize
        Comment: "Get the byte size of the format."
        Return:
          Sdl: u8
          Zig: u8
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISFLOAT
        ZigName: isFloat
        Comment: "If the format using floating point numbers."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISBIGENDIAN
        ZigName: isBigEndian
        Comment: "If the format is big endian."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISLITTLEENDIAN
        ZigName: isLittleEndian
        Comment: "If the format is little endian."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISSIGNED
        ZigName: isSigned
        Comment: "If the format is signed."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISINT
        ZigName: isInt
        Comment: "If the format is an integer."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
      - SdlName: SDL_AUDIO_ISUNSIGNED
        ZigName: isUnsigned
        Comment: "If the format is unsigned."
        Return:
          Sdl: u1
          Zig: bool
          Convert: ret > 0
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioFormat
            Value: null
            Mode: null
    CustomFunctions: []
  - SdlName: SDL_AudioDeviceID
    ZigName: Device
    Type: $SDL.SDL_AudioDeviceID
    IsOpaque: false
    Comment: "SDL Audio Device instance."
    Presets:
      - ZigValue: default_playback
        SdlValue: $SDL.SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK
        Comment: "A value used to request a default playback audio device."
      - ZigValue: default_recording
        SdlValue: $SDL.SDL_AUDIO_DEVICE_DEFAULT_RECORDING
        Comment: "A value used to request a default recording audio device."
    Functions:
      - SdlName: SDL_GetAudioDeviceName
        ZigName: getName
        Comment: "Get the human-readable name of a specific audio device."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_GetAudioDeviceFormat
        ZigName: getFormat
        Comment: "For an opened device, this will report the format the device is currently using. If the device isn't yet opened, this will report the device's preferred format (or a reasonable default if this can't be determined)."
        Return:
          Sdl: bool
          Zig: |
            !struct { spec: Spec, device_sample_frames: usize }
          Convert: .{ .spec = Spec.fromSdl(spec), .device_sample_frames = @intCast(device_sample_frames) }
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
          - Name: spec
            Type: SDL_AudioSpec
            Value: "&spec"
            Mode: out
          - Name: device_sample_frames
            Type: c_int
            Value: "&device_sample_frames"
            Mode: out
      - SdlName: SDL_OpenAudioDevice
        ZigName: open
        Comment: "Open a specific audio device."
        Return:
          Sdl: SDL_AudioDeviceID
          Zig: "!Device"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: 0
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
          - Name: spec
            Type: SDL_AudioSpec
            Value: null
            Mode: convertSdlConstNullable
      - SdlName: SDL_PauseAudioDevice
        ZigName: pausePlayback
        Comment: "Use this function to pause audio playback on a specified device."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_ResumeAudioDevice
        ZigName: resumePlayback
        Comment: "Use this function to unpause audio playback on a specified device."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_AudioDevicePaused
        ZigName: getPaused
        Comment: "Use this function to query if an audio device is paused."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_GetAudioDeviceGain
        ZigName: getGain
        Comment: "Get the gain of an audio device."
        Return:
          Sdl: f32
          Zig: "!f32"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: -1
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_SetAudioDeviceGain
        ZigName: setGain
        Comment: "Change the gain of an audio device."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
          - Name: gain
            Type: f32
            Value: null
            Mode: null
      - SdlName: SDL_CloseAudioDevice
        ZigName: close
        Comment: "Close a previously-opened audio device."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
      - SdlName: SDL_BindAudioStreams
        ZigName: bindStreams
        Comment: "Bind a list of audio streams to an audio device."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
          - Name: streams
            Type: "[]*C.SDL_AudioStream"
            Value: streams.ptr
            Mode: verbatim
          - Name: null
            Type: null
            Value: "@intCast(streams.len)"
            Mode: null
      - SdlName: SDL_BindAudioStream
        ZigName: bindStream
        Comment: "Bind a single audio stream to an audio device."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: self
            Type: SDL_AudioDeviceID
            Value: null
            Mode: null
          - Name: stream
            Type: SDL_AudioStream
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get a list of audio playback devices. Result must be freed.
              pub fn getAllPlaybackDevices(
                  allocator: std.mem.Allocator,
              ) ![]Device {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetAudioPlaybackDevices(
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(Device, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind].value = ret[ind];
                  }
                  return converted_ret;
              }
      - Code: |
          /// Get a list of audio recording devices. Result must be freed.
              pub fn getAllRecordingDevices(
                  allocator: std.mem.Allocator,
              ) ![]Device {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetAudioRecordingDevices(
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(Device, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind].value = ret[ind];
                  }
                  return converted_ret;
              }
      - Code: |
          /// Get the current channel map of an audio device if needed. Result must be freed.
              pub fn getChannelMap(
                  self: Device,
                  allocator: std.mem.Allocator,
              ) ![]usize {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetAudioDeviceChannelMap(
                      self.value,
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(usize, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind] = @intCast(ret[ind]);
                  }
                  return converted_ret;
              }
  - SdlName: SDL_AudioStream
    ZigName: Stream
    Type: $SDL.SDL_AudioStream
    IsOpaque: true
    Comment: "Audio streams is an audio conversion interface."
    Presets: []
    Functions: []
    CustomFunctions: []
Flags: []
StringMap: []
Structs:
  - Name: Spec
    Type: SDL_AudioSpec
    Comment: "Format specifier for audio data."
    Members:
      - ZigName: format
        SdlName: format
        Type: SDL_AudioFormat
        Value: null
        Comment: "Audio data format."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: num_channels
        SdlName: channels
        Type: usize
        Value: null
        Comment: "Number of channels."
        FromSdlCustom: null
        ToSdlCustom: null
      - ZigName: sample_rate
        SdlName: freq
        Type: usize
        Value: null
        Comment: "Sample frames per second."
        FromSdlCustom: null
        ToSdlCustom: null
    Functions:
      - SdlName: SDL_AUDIO_FRAMESIZE
        ZigName: getFrameSize
        Comment: "Calculate the size of each audio frame (in bytes) from an audio spec."
        Return:
          Sdl: int
          Zig: usize
          Convert: null
          Checks: []
        Arguments:
          - Name: self
            Type: SDL_AudioSpec
            Value: null
            Mode: null
    CustomFunctions: []
Functions:
  - SdlName: SDL_GetNumAudioDrivers
    ZigName: getNumDrivers
    Comment: "Use this function to get the number of built-in audio drivers."
    Return:
      Sdl: int
      Zig: usize
      Convert: null
      Checks: []
    Arguments: []
  - SdlName: SDL_GetAudioDriver
    ZigName: getDriverName
    Comment: "Use this function to get the name of a built in audio driver."
    Return:
      Sdl: string
      Zig: "?[]const u8"
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments:
      - Name: index
        Type: usize
        Value: null
        Mode: null
  - SdlName: SDL_GetCurrentAudioDriver
    ZigName: getCurrentDriverName
    Comment: "Get the name of the current audio driver."
    Return:
      Sdl: string
      Zig: "?[]const u8"
      Convert: null
      Checks:
        - Mode: ReturnNullIfEq
          ComparisonVal: null
    Arguments: []
CustomFunctions: []
Typedefs: []
Tests: []
