Name: keyboard
Extension: false
Callbacks: []
Enums:
  - SdlType: SDL_TextInputType
    ZigType: TextInputType
    InternalType: c_uint
    Comment: "Text input type."
    Values:
      - ZigValue: Text
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT
        Comment: "The input is text."
      - ZigValue: TextName
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT_NAME
        Comment: "The input is a person's name."
      - ZigValue: TextEmail
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT_EMAIL
        Comment: "The input is an e-mail address."
      - ZigValue: TextUsername
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT_USERNAME
        Comment: "The input is a username."
      - ZigValue: TextPasswordHidden
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN
        Comment: "he input is a secure password that is hidden."
      - ZigValue: TextPasswordVisible
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE
        Comment: "The input is a secure password that is visible."
      - ZigValue: Number
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_NUMBER
        Comment: "The input is a number."
      - ZigValue: NumberPasswordHidden
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN
        Comment: "The input is a secure PIN that is hidden."
      - ZigValue: NumberPasswordVisible
        SdlValue: $SDL.SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE
        Comment: "The input is a secure PIN that is visible."
    Functions: []
  - SdlType: SDL_Capitalization
    ZigType: Capitalization
    InternalType: c_uint
    Comment: "Auto capitalization type."
    Values:
      - ZigValue: Sentences
        SdlValue: $SDL.SDL_CAPITALIZE_SENTENCES
        Comment: "The first letter of sentences will be capitalized."
      - ZigValue: Words
        SdlValue: $SDL.SDL_CAPITALIZE_WORDS
        Comment: "The first letter of words will be capitalized."
      - ZigValue: Letters
        SdlValue: $SDL.SDL_CAPITALIZE_LETTERS
        Comment: "All letters will be capitalized."
    Functions: []
Errors: []
Values:
  - SdlName: SDL_KeyboardID
    ZigName: Keyboard
    Type: $SDL.SDL_KeyboardID
    IsOpaque: false
    Comment: "This is a unique ID for a keyboard for the time it is connected to the system, and is never reused for the lifetime of the application."
    Presets: []
    Functions:
      - SdlName: SDL_GetKeyboardNameForID
        ZigName: getName
        Comment: "Get the name of a keyboard."
        Return:
          Sdl: string
          Zig: "![]const u8"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: null
        Arguments:
          - Name: self
            Type: SDL_KeyboardID
            Value: null
            Mode: null
      - SdlName: SDL_HasKeyboard
        ZigName: has
        Comment: "Return whether a keyboard is currently connected."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetKeyboardFocus
        ZigName: getFocus
        Comment: "Query the window which currently has keyboard focus."
        Return:
          Sdl: "SDL_Window"
          Zig: "video.Window"
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetKeyboardState
        ZigName: getState
        Comment: "Get a snapshot of the current state of the keyboard. This is indexed by scancodes. This is not to be freed."
        Return:
          Sdl: "*bool"
          Zig: "[]bool"
          Convert: .{ .ptr = ret, .len = @intCast(num_keys) }
          Checks: []
        Arguments:
          - Name: num_keys
            Type: c_int
            Value: "&num_keys"
            Mode: out
      - SdlName: SDL_ResetKeyboard
        ZigName: reset
        Comment: "Clear the state of the keyboard."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_GetModState
        ZigName: getModState
        Comment: "Get the current key modifier state for the keyboard."
        Return:
          Sdl: SDL_Keymod
          Zig: keycode.KeyModifier
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_SetModState
        ZigName: setModState
        Comment: "Set the current key modifier state for the keyboard."
        Return:
          Sdl: void
          Zig: void
          Convert: null
          Checks: []
        Arguments:
          - Name: modifiers
            Type: SDL_Keymod
            Value: null
            Mode: null
      - SdlName: SDL_GetKeyFromScancode
        ZigName: getKeyFromScancode
        Comment: "Get the key code corresponding to the given scancode according to the current keyboard layout."
        Return:
          Sdl: SDL_Keycode
          Zig: "?keycode.Keycode"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDLK_UNKNOWN
        Arguments:
          - Name: code
            Type: SDL_Scancode
            Value: null
            Mode: null
          - Name: modifier
            Type: SDL_Keymod
            Value: null
            Mode: null
          - Name: used_in_key_events
            Type: bool
            Value: null
            Mode: null
      - SdlName: SDL_GetScancodeFromKey
        ZigName: getScancodeFromKey
        Comment: "Get the scancode corresponding to the given key code according to the current keyboard layout. Keymod is the first one that matches."
        Return:
          Sdl: SDL_Scancode
          Zig: |
            ?struct { code: scancode.Scancode, key_mod: keycode.KeyModifier }
          Convert: ".{ .code = .{ .value = ret }, .key_mod = keycode.KeyModifier.fromSdl(key_mod) }"
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: $SDL.SDL_SCANCODE_UNKNOWN
        Arguments:
          - Name: key
            Type: SDL_Keycode
            Value: null
            Mode: null
          - Name: key_mod
            Type: SDL_Keymod
            Value: "&key_mod"
            Mode: out
      - SdlName: SDL_SetScancodeName
        ZigName: setScancodeName
        Comment: "Set a human-readable name for a scancode. Note that the string given is not copied and must outlive SDL."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEq
              ComparisonVal: false
        Arguments:
          - Name: code
            Type: SDL_Scancode
            Value: null
            Mode: null
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetScancodeName
        ZigName: getScancodeName
        Comment: "Get a human-readable name for a scancode."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEqStr
              ComparisonVal: |
                ""
        Arguments:
          - Name: code
            Type: SDL_Scancode
            Value: null
            Mode: null
      - SdlName: SDL_GetScancodeFromName
        ZigName: getScancodeFromName
        Comment: "Get a scancode from a human-readable name."
        Return:
          Sdl: SDL_Scancode
          Zig: "!scancode.Scancode"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: $SDL.SDL_SCANCODE_UNKNOWN
        Arguments:
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_GetKeyName
        ZigName: getKeyName
        Comment: "Get a human-readable name for a key."
        Return:
          Sdl: string
          Zig: "?[]const u8"
          Convert: null
          Checks:
            - Mode: ReturnNullIfEqStr
              ComparisonVal: |
                ""
        Arguments:
          - Name: key
            Type: SDL_Keycode
            Value: null
            Mode: null
      - SdlName: SDL_GetKeyFromName
        ZigName: getKeyFromName
        Comment: "Get a key code from a human-readable name."
        Return:
          Sdl: SDL_Keycode
          Zig: "!keycode.Keycode"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: $SDL.SDLK_UNKNOWN
        Arguments:
          - Name: name
            Type: string
            Value: null
            Mode: null
      - SdlName: SDL_StartTextInput
        ZigName: startTextInput
        Comment: "Start accepting Unicode text input events in a window."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_StartTextInputWithProperties
        ZigName: startTextInputWithProperties
        Comment: "Start accepting Unicode text input events in a window, with properties describing the input."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
          - Name: input_properties
            Type: SDL_PropertiesID
            Value: null
            Mode: null
      - SdlName: SDL_TextInputActive
        ZigName: textInputActive
        Comment: "Check whether or not Unicode text input events are enabled for a window."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_StopTextInput
        ZigName: stopTextInput
        Comment: "Stop receiving any text input events in a window."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_ClearComposition
        ZigName: clearComposition
        Comment: "Dismiss the composition window/IME without disabling the subsystem."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
      - SdlName: SDL_SetTextInputArea
        ZigName: setTextInputArea
        Comment: "Set the area used to type Unicode text input."
        Return:
          Sdl: bool
          Zig: "!void"
          Convert: null
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
          - Name: input_area
            Type: SDL_Rect
            Value: null
            Mode: convertSdlConstNullable
          - Name: cursor
            Type: int
            Value: null
            Mode: null
      - SdlName: SDL_GetTextInputArea
        ZigName: getTextInputArea
        Comment: "Get the area used to type Unicode text input."
        Return:
          Sdl: bool
          Zig: |
            struct { input_area: rect.IRect, cursor_offset: i32 }
          Convert: .{ .input_area = rect.IRect.fromSdl(input_area), .cursor_offset = @intCast(cursor_offset) }
          Checks:
            - Mode: ReturnErrIfEq
              ComparisonVal: false
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
          - Name: input_area
            Type: SDL_Rect
            Value: "&input_area"
            Mode: out
          - Name: cursor_offset
            Type: c_int
            Value: "&cursor_offset"
            Mode: out
      - SdlName: SDL_HasScreenKeyboardSupport
        ZigName: hasScreenSupport
        Comment: "Check whether the platform has screen keyboard support."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments: []
      - SdlName: SDL_ScreenKeyboardShown
        ZigName: shownOnScreen
        Comment: "Check whether the screen keyboard is shown for given window."
        Return:
          Sdl: bool
          Zig: bool
          Convert: null
          Checks: []
        Arguments:
          - Name: window
            Type: SDL_Window
            Value: null
            Mode: null
    CustomFunctions:
      - Code: |
          /// Get a list of currently connected keyboard devices. Result must be freed.
              pub fn getAll(
                  allocator: std.mem.Allocator,
              ) ![]Keyboard {
                  var count: c_int = undefined;
                  const ret = C.SDL_GetKeyboards(
                      &count,
                  );
                  if (ret == null)
                      return error.SdlError;
                  defer C.SDL_free(ret);
                  var converted_ret = try allocator.alloc(Keyboard, @intCast(count));
                  for (0..count) |ind| {
                      converted_ret[ind].value = ret[ind];
                  }
                  return converted_ret;
              }
Flags: []
StringMap: []
Structs: []
Functions: []
CustomFunctions: []
Typedefs: []
Tests: []
